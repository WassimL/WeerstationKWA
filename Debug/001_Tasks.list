
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000275c  00008010  00008010  00008010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0000a76c  0000a76c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ac  0000a778  0000a778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  0000a824  0000a824  0000a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  0000a82c  0000a82c  0000a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0001a830  0001a830  0000a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0001a834  0001a834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  0001a838  0001a838  0000a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001004  0001a8a4  0001a8a4  0000a8a4  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  0000a8a4  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c78  00000000  00000000  0000a91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000ce93  00000000  00000000  0000b597  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002024  00000000  00000000  0001842a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a1b5  00000000  00000000  0001a44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c70  00000000  00000000  00024604  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000696f7  00000000  00000000  00027274  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000b78  00000000  00000000  0009096b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00011c0a  00000000  00000000  000914e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000028  00000000  00000000  000a30ed  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	46c0      	nop			; (mov r8, r8)
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

00008010 <exit>:
    8010:	4b08      	ldr	r3, [pc, #32]	; (8034 <exit+0x24>)
    8012:	b510      	push	{r4, lr}
    8014:	0004      	movs	r4, r0
    8016:	2b00      	cmp	r3, #0
    8018:	d002      	beq.n	8020 <exit+0x10>
    801a:	2100      	movs	r1, #0
    801c:	e000      	b.n	8020 <exit+0x10>
    801e:	bf00      	nop
    8020:	4b05      	ldr	r3, [pc, #20]	; (8038 <exit+0x28>)
    8022:	6818      	ldr	r0, [r3, #0]
    8024:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8026:	2b00      	cmp	r3, #0
    8028:	d000      	beq.n	802c <exit+0x1c>
    802a:	4798      	blx	r3
    802c:	0020      	movs	r0, r4
    802e:	f002 fad3 	bl	a5d8 <_exit>
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	00000000 	.word	0x00000000
    8038:	0000a820 	.word	0x0000a820

0000803c <__do_global_dtors_aux>:
    803c:	b510      	push	{r4, lr}
    803e:	4c06      	ldr	r4, [pc, #24]	; (8058 <__do_global_dtors_aux+0x1c>)
    8040:	7823      	ldrb	r3, [r4, #0]
    8042:	2b00      	cmp	r3, #0
    8044:	d107      	bne.n	8056 <__do_global_dtors_aux+0x1a>
    8046:	4b05      	ldr	r3, [pc, #20]	; (805c <__do_global_dtors_aux+0x20>)
    8048:	2b00      	cmp	r3, #0
    804a:	d002      	beq.n	8052 <__do_global_dtors_aux+0x16>
    804c:	4804      	ldr	r0, [pc, #16]	; (8060 <__do_global_dtors_aux+0x24>)
    804e:	e000      	b.n	8052 <__do_global_dtors_aux+0x16>
    8050:	bf00      	nop
    8052:	2301      	movs	r3, #1
    8054:	7023      	strb	r3, [r4, #0]
    8056:	bd10      	pop	{r4, pc}
    8058:	0001a8a4 	.word	0x0001a8a4
    805c:	00000000 	.word	0x00000000
    8060:	0000a82c 	.word	0x0000a82c

00008064 <frame_dummy>:
    8064:	4b04      	ldr	r3, [pc, #16]	; (8078 <frame_dummy+0x14>)
    8066:	b510      	push	{r4, lr}
    8068:	2b00      	cmp	r3, #0
    806a:	d003      	beq.n	8074 <frame_dummy+0x10>
    806c:	4903      	ldr	r1, [pc, #12]	; (807c <frame_dummy+0x18>)
    806e:	4804      	ldr	r0, [pc, #16]	; (8080 <frame_dummy+0x1c>)
    8070:	e000      	b.n	8074 <frame_dummy+0x10>
    8072:	bf00      	nop
    8074:	bd10      	pop	{r4, pc}
    8076:	46c0      	nop			; (mov r8, r8)
    8078:	00000000 	.word	0x00000000
    807c:	0001a8a8 	.word	0x0001a8a8
    8080:	0000a82c 	.word	0x0000a82c

00008084 <_mainCRTStartup>:
    8084:	4b16      	ldr	r3, [pc, #88]	; (80e0 <_mainCRTStartup+0x5c>)
    8086:	2b00      	cmp	r3, #0
    8088:	d100      	bne.n	808c <_mainCRTStartup+0x8>
    808a:	4b14      	ldr	r3, [pc, #80]	; (80dc <_mainCRTStartup+0x58>)
    808c:	469d      	mov	sp, r3
    808e:	2240      	movs	r2, #64	; 0x40
    8090:	0292      	lsls	r2, r2, #10
    8092:	1a9a      	subs	r2, r3, r2
    8094:	4692      	mov	sl, r2
    8096:	2100      	movs	r1, #0
    8098:	468b      	mov	fp, r1
    809a:	460f      	mov	r7, r1
    809c:	4813      	ldr	r0, [pc, #76]	; (80ec <_mainCRTStartup+0x68>)
    809e:	4a14      	ldr	r2, [pc, #80]	; (80f0 <_mainCRTStartup+0x6c>)
    80a0:	1a12      	subs	r2, r2, r0
    80a2:	f002 facf 	bl	a644 <memset>
    80a6:	4b0f      	ldr	r3, [pc, #60]	; (80e4 <_mainCRTStartup+0x60>)
    80a8:	2b00      	cmp	r3, #0
    80aa:	d000      	beq.n	80ae <_mainCRTStartup+0x2a>
    80ac:	4798      	blx	r3
    80ae:	4b0e      	ldr	r3, [pc, #56]	; (80e8 <_mainCRTStartup+0x64>)
    80b0:	2b00      	cmp	r3, #0
    80b2:	d000      	beq.n	80b6 <_mainCRTStartup+0x32>
    80b4:	4798      	blx	r3
    80b6:	2000      	movs	r0, #0
    80b8:	2100      	movs	r1, #0
    80ba:	0004      	movs	r4, r0
    80bc:	000d      	movs	r5, r1
    80be:	480d      	ldr	r0, [pc, #52]	; (80f4 <_mainCRTStartup+0x70>)
    80c0:	2800      	cmp	r0, #0
    80c2:	d002      	beq.n	80ca <_mainCRTStartup+0x46>
    80c4:	480c      	ldr	r0, [pc, #48]	; (80f8 <_mainCRTStartup+0x74>)
    80c6:	e000      	b.n	80ca <_mainCRTStartup+0x46>
    80c8:	bf00      	nop
    80ca:	f002 fa97 	bl	a5fc <__libc_init_array>
    80ce:	0020      	movs	r0, r4
    80d0:	0029      	movs	r1, r5
    80d2:	f002 f8a7 	bl	a224 <main>
    80d6:	f7ff ff9b 	bl	8010 <exit>
    80da:	46c0      	nop			; (mov r8, r8)
    80dc:	00080000 	.word	0x00080000
	...
    80ec:	0001a8a4 	.word	0x0001a8a4
    80f0:	0001b8a8 	.word	0x0001b8a8
	...

000080fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    80fc:	b580      	push	{r7, lr}
    80fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    8100:	4b07      	ldr	r3, [pc, #28]	; (8120 <HAL_Init+0x24>)
    8102:	681a      	ldr	r2, [r3, #0]
    8104:	4b06      	ldr	r3, [pc, #24]	; (8120 <HAL_Init+0x24>)
    8106:	2110      	movs	r1, #16
    8108:	430a      	orrs	r2, r1
    810a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
    810c:	2000      	movs	r0, #0
    810e:	f002 f9f7 	bl	a500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    8112:	f002 f9d1 	bl	a4b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    8116:	2300      	movs	r3, #0
}
    8118:	0018      	movs	r0, r3
    811a:	46bd      	mov	sp, r7
    811c:	bd80      	pop	{r7, pc}
    811e:	46c0      	nop			; (mov r8, r8)
    8120:	40022000 	.word	0x40022000

00008124 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    8124:	b580      	push	{r7, lr}
    8126:	af00      	add	r7, sp, #0
  return uwTick;
    8128:	4b02      	ldr	r3, [pc, #8]	; (8134 <HAL_GetTick+0x10>)
    812a:	681b      	ldr	r3, [r3, #0]
}
    812c:	0018      	movs	r0, r3
    812e:	46bd      	mov	sp, r7
    8130:	bd80      	pop	{r7, pc}
    8132:	46c0      	nop			; (mov r8, r8)
    8134:	0001b858 	.word	0x0001b858

00008138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8138:	b580      	push	{r7, lr}
    813a:	b082      	sub	sp, #8
    813c:	af00      	add	r7, sp, #0
    813e:	0002      	movs	r2, r0
    8140:	1dfb      	adds	r3, r7, #7
    8142:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    8144:	1dfb      	adds	r3, r7, #7
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	2b7f      	cmp	r3, #127	; 0x7f
    814a:	d809      	bhi.n	8160 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    814c:	1dfb      	adds	r3, r7, #7
    814e:	781b      	ldrb	r3, [r3, #0]
    8150:	001a      	movs	r2, r3
    8152:	231f      	movs	r3, #31
    8154:	401a      	ands	r2, r3
    8156:	4b04      	ldr	r3, [pc, #16]	; (8168 <__NVIC_EnableIRQ+0x30>)
    8158:	2101      	movs	r1, #1
    815a:	4091      	lsls	r1, r2
    815c:	000a      	movs	r2, r1
    815e:	601a      	str	r2, [r3, #0]
  }
}
    8160:	46c0      	nop			; (mov r8, r8)
    8162:	46bd      	mov	sp, r7
    8164:	b002      	add	sp, #8
    8166:	bd80      	pop	{r7, pc}
    8168:	e000e100 	.word	0xe000e100

0000816c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    816c:	b590      	push	{r4, r7, lr}
    816e:	b083      	sub	sp, #12
    8170:	af00      	add	r7, sp, #0
    8172:	0002      	movs	r2, r0
    8174:	6039      	str	r1, [r7, #0]
    8176:	1dfb      	adds	r3, r7, #7
    8178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    817a:	1dfb      	adds	r3, r7, #7
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	2b7f      	cmp	r3, #127	; 0x7f
    8180:	d828      	bhi.n	81d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8182:	4a2f      	ldr	r2, [pc, #188]	; (8240 <__NVIC_SetPriority+0xd4>)
    8184:	1dfb      	adds	r3, r7, #7
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	b25b      	sxtb	r3, r3
    818a:	089b      	lsrs	r3, r3, #2
    818c:	33c0      	adds	r3, #192	; 0xc0
    818e:	009b      	lsls	r3, r3, #2
    8190:	589b      	ldr	r3, [r3, r2]
    8192:	1dfa      	adds	r2, r7, #7
    8194:	7812      	ldrb	r2, [r2, #0]
    8196:	0011      	movs	r1, r2
    8198:	2203      	movs	r2, #3
    819a:	400a      	ands	r2, r1
    819c:	00d2      	lsls	r2, r2, #3
    819e:	21ff      	movs	r1, #255	; 0xff
    81a0:	4091      	lsls	r1, r2
    81a2:	000a      	movs	r2, r1
    81a4:	43d2      	mvns	r2, r2
    81a6:	401a      	ands	r2, r3
    81a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    81aa:	683b      	ldr	r3, [r7, #0]
    81ac:	019b      	lsls	r3, r3, #6
    81ae:	22ff      	movs	r2, #255	; 0xff
    81b0:	401a      	ands	r2, r3
    81b2:	1dfb      	adds	r3, r7, #7
    81b4:	781b      	ldrb	r3, [r3, #0]
    81b6:	0018      	movs	r0, r3
    81b8:	2303      	movs	r3, #3
    81ba:	4003      	ands	r3, r0
    81bc:	00db      	lsls	r3, r3, #3
    81be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    81c0:	481f      	ldr	r0, [pc, #124]	; (8240 <__NVIC_SetPriority+0xd4>)
    81c2:	1dfb      	adds	r3, r7, #7
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	b25b      	sxtb	r3, r3
    81c8:	089b      	lsrs	r3, r3, #2
    81ca:	430a      	orrs	r2, r1
    81cc:	33c0      	adds	r3, #192	; 0xc0
    81ce:	009b      	lsls	r3, r3, #2
    81d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    81d2:	e031      	b.n	8238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    81d4:	4a1b      	ldr	r2, [pc, #108]	; (8244 <__NVIC_SetPriority+0xd8>)
    81d6:	1dfb      	adds	r3, r7, #7
    81d8:	781b      	ldrb	r3, [r3, #0]
    81da:	0019      	movs	r1, r3
    81dc:	230f      	movs	r3, #15
    81de:	400b      	ands	r3, r1
    81e0:	3b08      	subs	r3, #8
    81e2:	089b      	lsrs	r3, r3, #2
    81e4:	3306      	adds	r3, #6
    81e6:	009b      	lsls	r3, r3, #2
    81e8:	18d3      	adds	r3, r2, r3
    81ea:	3304      	adds	r3, #4
    81ec:	681b      	ldr	r3, [r3, #0]
    81ee:	1dfa      	adds	r2, r7, #7
    81f0:	7812      	ldrb	r2, [r2, #0]
    81f2:	0011      	movs	r1, r2
    81f4:	2203      	movs	r2, #3
    81f6:	400a      	ands	r2, r1
    81f8:	00d2      	lsls	r2, r2, #3
    81fa:	21ff      	movs	r1, #255	; 0xff
    81fc:	4091      	lsls	r1, r2
    81fe:	000a      	movs	r2, r1
    8200:	43d2      	mvns	r2, r2
    8202:	401a      	ands	r2, r3
    8204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    8206:	683b      	ldr	r3, [r7, #0]
    8208:	019b      	lsls	r3, r3, #6
    820a:	22ff      	movs	r2, #255	; 0xff
    820c:	401a      	ands	r2, r3
    820e:	1dfb      	adds	r3, r7, #7
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	0018      	movs	r0, r3
    8214:	2303      	movs	r3, #3
    8216:	4003      	ands	r3, r0
    8218:	00db      	lsls	r3, r3, #3
    821a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    821c:	4809      	ldr	r0, [pc, #36]	; (8244 <__NVIC_SetPriority+0xd8>)
    821e:	1dfb      	adds	r3, r7, #7
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	001c      	movs	r4, r3
    8224:	230f      	movs	r3, #15
    8226:	4023      	ands	r3, r4
    8228:	3b08      	subs	r3, #8
    822a:	089b      	lsrs	r3, r3, #2
    822c:	430a      	orrs	r2, r1
    822e:	3306      	adds	r3, #6
    8230:	009b      	lsls	r3, r3, #2
    8232:	18c3      	adds	r3, r0, r3
    8234:	3304      	adds	r3, #4
    8236:	601a      	str	r2, [r3, #0]
}
    8238:	46c0      	nop			; (mov r8, r8)
    823a:	46bd      	mov	sp, r7
    823c:	b003      	add	sp, #12
    823e:	bd90      	pop	{r4, r7, pc}
    8240:	e000e100 	.word	0xe000e100
    8244:	e000ed00 	.word	0xe000ed00

00008248 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    8248:	b580      	push	{r7, lr}
    824a:	b084      	sub	sp, #16
    824c:	af00      	add	r7, sp, #0
    824e:	60b9      	str	r1, [r7, #8]
    8250:	607a      	str	r2, [r7, #4]
    8252:	210f      	movs	r1, #15
    8254:	187b      	adds	r3, r7, r1
    8256:	1c02      	adds	r2, r0, #0
    8258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
    825a:	68ba      	ldr	r2, [r7, #8]
    825c:	187b      	adds	r3, r7, r1
    825e:	781b      	ldrb	r3, [r3, #0]
    8260:	b25b      	sxtb	r3, r3
    8262:	0011      	movs	r1, r2
    8264:	0018      	movs	r0, r3
    8266:	f7ff ff81 	bl	816c <__NVIC_SetPriority>
}
    826a:	46c0      	nop			; (mov r8, r8)
    826c:	46bd      	mov	sp, r7
    826e:	b004      	add	sp, #16
    8270:	bd80      	pop	{r7, pc}

00008272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8272:	b580      	push	{r7, lr}
    8274:	b082      	sub	sp, #8
    8276:	af00      	add	r7, sp, #0
    8278:	0002      	movs	r2, r0
    827a:	1dfb      	adds	r3, r7, #7
    827c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    827e:	1dfb      	adds	r3, r7, #7
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	b25b      	sxtb	r3, r3
    8284:	0018      	movs	r0, r3
    8286:	f7ff ff57 	bl	8138 <__NVIC_EnableIRQ>
}
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	46bd      	mov	sp, r7
    828e:	b002      	add	sp, #8
    8290:	bd80      	pop	{r7, pc}
	...

00008294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    8294:	b580      	push	{r7, lr}
    8296:	b086      	sub	sp, #24
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
    829c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
    829e:	2300      	movs	r3, #0
    82a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
    82a2:	e14f      	b.n	8544 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
    82a4:	683b      	ldr	r3, [r7, #0]
    82a6:	681b      	ldr	r3, [r3, #0]
    82a8:	2101      	movs	r1, #1
    82aa:	697a      	ldr	r2, [r7, #20]
    82ac:	4091      	lsls	r1, r2
    82ae:	000a      	movs	r2, r1
    82b0:	4013      	ands	r3, r2
    82b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
    82b4:	68fb      	ldr	r3, [r7, #12]
    82b6:	2b00      	cmp	r3, #0
    82b8:	d100      	bne.n	82bc <HAL_GPIO_Init+0x28>
    82ba:	e140      	b.n	853e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
    82bc:	683b      	ldr	r3, [r7, #0]
    82be:	685b      	ldr	r3, [r3, #4]
    82c0:	2203      	movs	r2, #3
    82c2:	4013      	ands	r3, r2
    82c4:	2b01      	cmp	r3, #1
    82c6:	d005      	beq.n	82d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
    82c8:	683b      	ldr	r3, [r7, #0]
    82ca:	685b      	ldr	r3, [r3, #4]
    82cc:	2203      	movs	r2, #3
    82ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
    82d0:	2b02      	cmp	r3, #2
    82d2:	d130      	bne.n	8336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	689b      	ldr	r3, [r3, #8]
    82d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
    82da:	697b      	ldr	r3, [r7, #20]
    82dc:	005b      	lsls	r3, r3, #1
    82de:	2203      	movs	r2, #3
    82e0:	409a      	lsls	r2, r3
    82e2:	0013      	movs	r3, r2
    82e4:	43da      	mvns	r2, r3
    82e6:	693b      	ldr	r3, [r7, #16]
    82e8:	4013      	ands	r3, r2
    82ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
    82ec:	683b      	ldr	r3, [r7, #0]
    82ee:	68da      	ldr	r2, [r3, #12]
    82f0:	697b      	ldr	r3, [r7, #20]
    82f2:	005b      	lsls	r3, r3, #1
    82f4:	409a      	lsls	r2, r3
    82f6:	0013      	movs	r3, r2
    82f8:	693a      	ldr	r2, [r7, #16]
    82fa:	4313      	orrs	r3, r2
    82fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
    82fe:	687b      	ldr	r3, [r7, #4]
    8300:	693a      	ldr	r2, [r7, #16]
    8302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
    8304:	687b      	ldr	r3, [r7, #4]
    8306:	685b      	ldr	r3, [r3, #4]
    8308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    830a:	2201      	movs	r2, #1
    830c:	697b      	ldr	r3, [r7, #20]
    830e:	409a      	lsls	r2, r3
    8310:	0013      	movs	r3, r2
    8312:	43da      	mvns	r2, r3
    8314:	693b      	ldr	r3, [r7, #16]
    8316:	4013      	ands	r3, r2
    8318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
    831a:	683b      	ldr	r3, [r7, #0]
    831c:	685b      	ldr	r3, [r3, #4]
    831e:	091b      	lsrs	r3, r3, #4
    8320:	2201      	movs	r2, #1
    8322:	401a      	ands	r2, r3
    8324:	697b      	ldr	r3, [r7, #20]
    8326:	409a      	lsls	r2, r3
    8328:	0013      	movs	r3, r2
    832a:	693a      	ldr	r2, [r7, #16]
    832c:	4313      	orrs	r3, r2
    832e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
    8330:	687b      	ldr	r3, [r7, #4]
    8332:	693a      	ldr	r2, [r7, #16]
    8334:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
    8336:	683b      	ldr	r3, [r7, #0]
    8338:	685b      	ldr	r3, [r3, #4]
    833a:	2203      	movs	r2, #3
    833c:	4013      	ands	r3, r2
    833e:	2b03      	cmp	r3, #3
    8340:	d017      	beq.n	8372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
    8342:	687b      	ldr	r3, [r7, #4]
    8344:	68db      	ldr	r3, [r3, #12]
    8346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
    8348:	697b      	ldr	r3, [r7, #20]
    834a:	005b      	lsls	r3, r3, #1
    834c:	2203      	movs	r2, #3
    834e:	409a      	lsls	r2, r3
    8350:	0013      	movs	r3, r2
    8352:	43da      	mvns	r2, r3
    8354:	693b      	ldr	r3, [r7, #16]
    8356:	4013      	ands	r3, r2
    8358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
    835a:	683b      	ldr	r3, [r7, #0]
    835c:	689a      	ldr	r2, [r3, #8]
    835e:	697b      	ldr	r3, [r7, #20]
    8360:	005b      	lsls	r3, r3, #1
    8362:	409a      	lsls	r2, r3
    8364:	0013      	movs	r3, r2
    8366:	693a      	ldr	r2, [r7, #16]
    8368:	4313      	orrs	r3, r2
    836a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	693a      	ldr	r2, [r7, #16]
    8370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
    8372:	683b      	ldr	r3, [r7, #0]
    8374:	685b      	ldr	r3, [r3, #4]
    8376:	2203      	movs	r2, #3
    8378:	4013      	ands	r3, r2
    837a:	2b02      	cmp	r3, #2
    837c:	d123      	bne.n	83c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
    837e:	697b      	ldr	r3, [r7, #20]
    8380:	08da      	lsrs	r2, r3, #3
    8382:	687b      	ldr	r3, [r7, #4]
    8384:	3208      	adds	r2, #8
    8386:	0092      	lsls	r2, r2, #2
    8388:	58d3      	ldr	r3, [r2, r3]
    838a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
    838c:	697b      	ldr	r3, [r7, #20]
    838e:	2207      	movs	r2, #7
    8390:	4013      	ands	r3, r2
    8392:	009b      	lsls	r3, r3, #2
    8394:	220f      	movs	r2, #15
    8396:	409a      	lsls	r2, r3
    8398:	0013      	movs	r3, r2
    839a:	43da      	mvns	r2, r3
    839c:	693b      	ldr	r3, [r7, #16]
    839e:	4013      	ands	r3, r2
    83a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
    83a2:	683b      	ldr	r3, [r7, #0]
    83a4:	691a      	ldr	r2, [r3, #16]
    83a6:	697b      	ldr	r3, [r7, #20]
    83a8:	2107      	movs	r1, #7
    83aa:	400b      	ands	r3, r1
    83ac:	009b      	lsls	r3, r3, #2
    83ae:	409a      	lsls	r2, r3
    83b0:	0013      	movs	r3, r2
    83b2:	693a      	ldr	r2, [r7, #16]
    83b4:	4313      	orrs	r3, r2
    83b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
    83b8:	697b      	ldr	r3, [r7, #20]
    83ba:	08da      	lsrs	r2, r3, #3
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	3208      	adds	r2, #8
    83c0:	0092      	lsls	r2, r2, #2
    83c2:	6939      	ldr	r1, [r7, #16]
    83c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	681b      	ldr	r3, [r3, #0]
    83ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
    83cc:	697b      	ldr	r3, [r7, #20]
    83ce:	005b      	lsls	r3, r3, #1
    83d0:	2203      	movs	r2, #3
    83d2:	409a      	lsls	r2, r3
    83d4:	0013      	movs	r3, r2
    83d6:	43da      	mvns	r2, r3
    83d8:	693b      	ldr	r3, [r7, #16]
    83da:	4013      	ands	r3, r2
    83dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
    83de:	683b      	ldr	r3, [r7, #0]
    83e0:	685b      	ldr	r3, [r3, #4]
    83e2:	2203      	movs	r2, #3
    83e4:	401a      	ands	r2, r3
    83e6:	697b      	ldr	r3, [r7, #20]
    83e8:	005b      	lsls	r3, r3, #1
    83ea:	409a      	lsls	r2, r3
    83ec:	0013      	movs	r3, r2
    83ee:	693a      	ldr	r2, [r7, #16]
    83f0:	4313      	orrs	r3, r2
    83f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
    83f4:	687b      	ldr	r3, [r7, #4]
    83f6:	693a      	ldr	r2, [r7, #16]
    83f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
    83fa:	683b      	ldr	r3, [r7, #0]
    83fc:	685a      	ldr	r2, [r3, #4]
    83fe:	23c0      	movs	r3, #192	; 0xc0
    8400:	029b      	lsls	r3, r3, #10
    8402:	4013      	ands	r3, r2
    8404:	d100      	bne.n	8408 <HAL_GPIO_Init+0x174>
    8406:	e09a      	b.n	853e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
    8408:	4b54      	ldr	r3, [pc, #336]	; (855c <HAL_GPIO_Init+0x2c8>)
    840a:	699a      	ldr	r2, [r3, #24]
    840c:	4b53      	ldr	r3, [pc, #332]	; (855c <HAL_GPIO_Init+0x2c8>)
    840e:	2101      	movs	r1, #1
    8410:	430a      	orrs	r2, r1
    8412:	619a      	str	r2, [r3, #24]
    8414:	4b51      	ldr	r3, [pc, #324]	; (855c <HAL_GPIO_Init+0x2c8>)
    8416:	699b      	ldr	r3, [r3, #24]
    8418:	2201      	movs	r2, #1
    841a:	4013      	ands	r3, r2
    841c:	60bb      	str	r3, [r7, #8]
    841e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
    8420:	4a4f      	ldr	r2, [pc, #316]	; (8560 <HAL_GPIO_Init+0x2cc>)
    8422:	697b      	ldr	r3, [r7, #20]
    8424:	089b      	lsrs	r3, r3, #2
    8426:	3302      	adds	r3, #2
    8428:	009b      	lsls	r3, r3, #2
    842a:	589b      	ldr	r3, [r3, r2]
    842c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
    842e:	697b      	ldr	r3, [r7, #20]
    8430:	2203      	movs	r2, #3
    8432:	4013      	ands	r3, r2
    8434:	009b      	lsls	r3, r3, #2
    8436:	220f      	movs	r2, #15
    8438:	409a      	lsls	r2, r3
    843a:	0013      	movs	r3, r2
    843c:	43da      	mvns	r2, r3
    843e:	693b      	ldr	r3, [r7, #16]
    8440:	4013      	ands	r3, r2
    8442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
    8444:	687a      	ldr	r2, [r7, #4]
    8446:	2390      	movs	r3, #144	; 0x90
    8448:	05db      	lsls	r3, r3, #23
    844a:	429a      	cmp	r2, r3
    844c:	d013      	beq.n	8476 <HAL_GPIO_Init+0x1e2>
    844e:	687b      	ldr	r3, [r7, #4]
    8450:	4a44      	ldr	r2, [pc, #272]	; (8564 <HAL_GPIO_Init+0x2d0>)
    8452:	4293      	cmp	r3, r2
    8454:	d00d      	beq.n	8472 <HAL_GPIO_Init+0x1de>
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	4a43      	ldr	r2, [pc, #268]	; (8568 <HAL_GPIO_Init+0x2d4>)
    845a:	4293      	cmp	r3, r2
    845c:	d007      	beq.n	846e <HAL_GPIO_Init+0x1da>
    845e:	687b      	ldr	r3, [r7, #4]
    8460:	4a42      	ldr	r2, [pc, #264]	; (856c <HAL_GPIO_Init+0x2d8>)
    8462:	4293      	cmp	r3, r2
    8464:	d101      	bne.n	846a <HAL_GPIO_Init+0x1d6>
    8466:	2303      	movs	r3, #3
    8468:	e006      	b.n	8478 <HAL_GPIO_Init+0x1e4>
    846a:	2305      	movs	r3, #5
    846c:	e004      	b.n	8478 <HAL_GPIO_Init+0x1e4>
    846e:	2302      	movs	r3, #2
    8470:	e002      	b.n	8478 <HAL_GPIO_Init+0x1e4>
    8472:	2301      	movs	r3, #1
    8474:	e000      	b.n	8478 <HAL_GPIO_Init+0x1e4>
    8476:	2300      	movs	r3, #0
    8478:	697a      	ldr	r2, [r7, #20]
    847a:	2103      	movs	r1, #3
    847c:	400a      	ands	r2, r1
    847e:	0092      	lsls	r2, r2, #2
    8480:	4093      	lsls	r3, r2
    8482:	693a      	ldr	r2, [r7, #16]
    8484:	4313      	orrs	r3, r2
    8486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
    8488:	4935      	ldr	r1, [pc, #212]	; (8560 <HAL_GPIO_Init+0x2cc>)
    848a:	697b      	ldr	r3, [r7, #20]
    848c:	089b      	lsrs	r3, r3, #2
    848e:	3302      	adds	r3, #2
    8490:	009b      	lsls	r3, r3, #2
    8492:	693a      	ldr	r2, [r7, #16]
    8494:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
    8496:	4b36      	ldr	r3, [pc, #216]	; (8570 <HAL_GPIO_Init+0x2dc>)
    8498:	681b      	ldr	r3, [r3, #0]
    849a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	43da      	mvns	r2, r3
    84a0:	693b      	ldr	r3, [r7, #16]
    84a2:	4013      	ands	r3, r2
    84a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
    84a6:	683b      	ldr	r3, [r7, #0]
    84a8:	685a      	ldr	r2, [r3, #4]
    84aa:	2380      	movs	r3, #128	; 0x80
    84ac:	025b      	lsls	r3, r3, #9
    84ae:	4013      	ands	r3, r2
    84b0:	d003      	beq.n	84ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
    84b2:	693a      	ldr	r2, [r7, #16]
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	4313      	orrs	r3, r2
    84b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
    84ba:	4b2d      	ldr	r3, [pc, #180]	; (8570 <HAL_GPIO_Init+0x2dc>)
    84bc:	693a      	ldr	r2, [r7, #16]
    84be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
    84c0:	4b2b      	ldr	r3, [pc, #172]	; (8570 <HAL_GPIO_Init+0x2dc>)
    84c2:	685b      	ldr	r3, [r3, #4]
    84c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
    84c6:	68fb      	ldr	r3, [r7, #12]
    84c8:	43da      	mvns	r2, r3
    84ca:	693b      	ldr	r3, [r7, #16]
    84cc:	4013      	ands	r3, r2
    84ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
    84d0:	683b      	ldr	r3, [r7, #0]
    84d2:	685a      	ldr	r2, [r3, #4]
    84d4:	2380      	movs	r3, #128	; 0x80
    84d6:	029b      	lsls	r3, r3, #10
    84d8:	4013      	ands	r3, r2
    84da:	d003      	beq.n	84e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
    84dc:	693a      	ldr	r2, [r7, #16]
    84de:	68fb      	ldr	r3, [r7, #12]
    84e0:	4313      	orrs	r3, r2
    84e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
    84e4:	4b22      	ldr	r3, [pc, #136]	; (8570 <HAL_GPIO_Init+0x2dc>)
    84e6:	693a      	ldr	r2, [r7, #16]
    84e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
    84ea:	4b21      	ldr	r3, [pc, #132]	; (8570 <HAL_GPIO_Init+0x2dc>)
    84ec:	689b      	ldr	r3, [r3, #8]
    84ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
    84f0:	68fb      	ldr	r3, [r7, #12]
    84f2:	43da      	mvns	r2, r3
    84f4:	693b      	ldr	r3, [r7, #16]
    84f6:	4013      	ands	r3, r2
    84f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
    84fa:	683b      	ldr	r3, [r7, #0]
    84fc:	685a      	ldr	r2, [r3, #4]
    84fe:	2380      	movs	r3, #128	; 0x80
    8500:	035b      	lsls	r3, r3, #13
    8502:	4013      	ands	r3, r2
    8504:	d003      	beq.n	850e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
    8506:	693a      	ldr	r2, [r7, #16]
    8508:	68fb      	ldr	r3, [r7, #12]
    850a:	4313      	orrs	r3, r2
    850c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
    850e:	4b18      	ldr	r3, [pc, #96]	; (8570 <HAL_GPIO_Init+0x2dc>)
    8510:	693a      	ldr	r2, [r7, #16]
    8512:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
    8514:	4b16      	ldr	r3, [pc, #88]	; (8570 <HAL_GPIO_Init+0x2dc>)
    8516:	68db      	ldr	r3, [r3, #12]
    8518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
    851a:	68fb      	ldr	r3, [r7, #12]
    851c:	43da      	mvns	r2, r3
    851e:	693b      	ldr	r3, [r7, #16]
    8520:	4013      	ands	r3, r2
    8522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
    8524:	683b      	ldr	r3, [r7, #0]
    8526:	685a      	ldr	r2, [r3, #4]
    8528:	2380      	movs	r3, #128	; 0x80
    852a:	039b      	lsls	r3, r3, #14
    852c:	4013      	ands	r3, r2
    852e:	d003      	beq.n	8538 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
    8530:	693a      	ldr	r2, [r7, #16]
    8532:	68fb      	ldr	r3, [r7, #12]
    8534:	4313      	orrs	r3, r2
    8536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
    8538:	4b0d      	ldr	r3, [pc, #52]	; (8570 <HAL_GPIO_Init+0x2dc>)
    853a:	693a      	ldr	r2, [r7, #16]
    853c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
    853e:	697b      	ldr	r3, [r7, #20]
    8540:	3301      	adds	r3, #1
    8542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
    8544:	683b      	ldr	r3, [r7, #0]
    8546:	681a      	ldr	r2, [r3, #0]
    8548:	697b      	ldr	r3, [r7, #20]
    854a:	40da      	lsrs	r2, r3
    854c:	1e13      	subs	r3, r2, #0
    854e:	d000      	beq.n	8552 <HAL_GPIO_Init+0x2be>
    8550:	e6a8      	b.n	82a4 <HAL_GPIO_Init+0x10>
  } 
}
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	46bd      	mov	sp, r7
    8556:	b006      	add	sp, #24
    8558:	bd80      	pop	{r7, pc}
    855a:	46c0      	nop			; (mov r8, r8)
    855c:	40021000 	.word	0x40021000
    8560:	40010000 	.word	0x40010000
    8564:	48000400 	.word	0x48000400
    8568:	48000800 	.word	0x48000800
    856c:	48000c00 	.word	0x48000c00
    8570:	40010400 	.word	0x40010400

00008574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    8574:	b580      	push	{r7, lr}
    8576:	b082      	sub	sp, #8
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
    857c:	0008      	movs	r0, r1
    857e:	0011      	movs	r1, r2
    8580:	1cbb      	adds	r3, r7, #2
    8582:	1c02      	adds	r2, r0, #0
    8584:	801a      	strh	r2, [r3, #0]
    8586:	1c7b      	adds	r3, r7, #1
    8588:	1c0a      	adds	r2, r1, #0
    858a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
    858c:	1c7b      	adds	r3, r7, #1
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	2b00      	cmp	r3, #0
    8592:	d004      	beq.n	859e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
    8594:	1cbb      	adds	r3, r7, #2
    8596:	881a      	ldrh	r2, [r3, #0]
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
    859c:	e003      	b.n	85a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
    859e:	1cbb      	adds	r3, r7, #2
    85a0:	881a      	ldrh	r2, [r3, #0]
    85a2:	687b      	ldr	r3, [r7, #4]
    85a4:	629a      	str	r2, [r3, #40]	; 0x28
}
    85a6:	46c0      	nop			; (mov r8, r8)
    85a8:	46bd      	mov	sp, r7
    85aa:	b002      	add	sp, #8
    85ac:	bd80      	pop	{r7, pc}
	...

000085b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    85b0:	b580      	push	{r7, lr}
    85b2:	b088      	sub	sp, #32
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2b00      	cmp	r3, #0
    85bc:	d101      	bne.n	85c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
    85be:	2301      	movs	r3, #1
    85c0:	e303      	b.n	8bca <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	681b      	ldr	r3, [r3, #0]
    85c6:	2201      	movs	r2, #1
    85c8:	4013      	ands	r3, r2
    85ca:	d100      	bne.n	85ce <HAL_RCC_OscConfig+0x1e>
    85cc:	e08d      	b.n	86ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
    85ce:	4bc4      	ldr	r3, [pc, #784]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    85d0:	685b      	ldr	r3, [r3, #4]
    85d2:	220c      	movs	r2, #12
    85d4:	4013      	ands	r3, r2
    85d6:	2b04      	cmp	r3, #4
    85d8:	d00e      	beq.n	85f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    85da:	4bc1      	ldr	r3, [pc, #772]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    85dc:	685b      	ldr	r3, [r3, #4]
    85de:	220c      	movs	r2, #12
    85e0:	4013      	ands	r3, r2
    85e2:	2b08      	cmp	r3, #8
    85e4:	d116      	bne.n	8614 <HAL_RCC_OscConfig+0x64>
    85e6:	4bbe      	ldr	r3, [pc, #760]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    85e8:	685a      	ldr	r2, [r3, #4]
    85ea:	2380      	movs	r3, #128	; 0x80
    85ec:	025b      	lsls	r3, r3, #9
    85ee:	401a      	ands	r2, r3
    85f0:	2380      	movs	r3, #128	; 0x80
    85f2:	025b      	lsls	r3, r3, #9
    85f4:	429a      	cmp	r2, r3
    85f6:	d10d      	bne.n	8614 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    85f8:	4bb9      	ldr	r3, [pc, #740]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    85fa:	681a      	ldr	r2, [r3, #0]
    85fc:	2380      	movs	r3, #128	; 0x80
    85fe:	029b      	lsls	r3, r3, #10
    8600:	4013      	ands	r3, r2
    8602:	d100      	bne.n	8606 <HAL_RCC_OscConfig+0x56>
    8604:	e070      	b.n	86e8 <HAL_RCC_OscConfig+0x138>
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	685b      	ldr	r3, [r3, #4]
    860a:	2b00      	cmp	r3, #0
    860c:	d000      	beq.n	8610 <HAL_RCC_OscConfig+0x60>
    860e:	e06b      	b.n	86e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
    8610:	2301      	movs	r3, #1
    8612:	e2da      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	685b      	ldr	r3, [r3, #4]
    8618:	2b01      	cmp	r3, #1
    861a:	d107      	bne.n	862c <HAL_RCC_OscConfig+0x7c>
    861c:	4bb0      	ldr	r3, [pc, #704]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    861e:	681a      	ldr	r2, [r3, #0]
    8620:	4baf      	ldr	r3, [pc, #700]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8622:	2180      	movs	r1, #128	; 0x80
    8624:	0249      	lsls	r1, r1, #9
    8626:	430a      	orrs	r2, r1
    8628:	601a      	str	r2, [r3, #0]
    862a:	e02f      	b.n	868c <HAL_RCC_OscConfig+0xdc>
    862c:	687b      	ldr	r3, [r7, #4]
    862e:	685b      	ldr	r3, [r3, #4]
    8630:	2b00      	cmp	r3, #0
    8632:	d10c      	bne.n	864e <HAL_RCC_OscConfig+0x9e>
    8634:	4baa      	ldr	r3, [pc, #680]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8636:	681a      	ldr	r2, [r3, #0]
    8638:	4ba9      	ldr	r3, [pc, #676]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    863a:	49aa      	ldr	r1, [pc, #680]	; (88e4 <HAL_RCC_OscConfig+0x334>)
    863c:	400a      	ands	r2, r1
    863e:	601a      	str	r2, [r3, #0]
    8640:	4ba7      	ldr	r3, [pc, #668]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8642:	681a      	ldr	r2, [r3, #0]
    8644:	4ba6      	ldr	r3, [pc, #664]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8646:	49a8      	ldr	r1, [pc, #672]	; (88e8 <HAL_RCC_OscConfig+0x338>)
    8648:	400a      	ands	r2, r1
    864a:	601a      	str	r2, [r3, #0]
    864c:	e01e      	b.n	868c <HAL_RCC_OscConfig+0xdc>
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	685b      	ldr	r3, [r3, #4]
    8652:	2b05      	cmp	r3, #5
    8654:	d10e      	bne.n	8674 <HAL_RCC_OscConfig+0xc4>
    8656:	4ba2      	ldr	r3, [pc, #648]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8658:	681a      	ldr	r2, [r3, #0]
    865a:	4ba1      	ldr	r3, [pc, #644]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    865c:	2180      	movs	r1, #128	; 0x80
    865e:	02c9      	lsls	r1, r1, #11
    8660:	430a      	orrs	r2, r1
    8662:	601a      	str	r2, [r3, #0]
    8664:	4b9e      	ldr	r3, [pc, #632]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8666:	681a      	ldr	r2, [r3, #0]
    8668:	4b9d      	ldr	r3, [pc, #628]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    866a:	2180      	movs	r1, #128	; 0x80
    866c:	0249      	lsls	r1, r1, #9
    866e:	430a      	orrs	r2, r1
    8670:	601a      	str	r2, [r3, #0]
    8672:	e00b      	b.n	868c <HAL_RCC_OscConfig+0xdc>
    8674:	4b9a      	ldr	r3, [pc, #616]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8676:	681a      	ldr	r2, [r3, #0]
    8678:	4b99      	ldr	r3, [pc, #612]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    867a:	499a      	ldr	r1, [pc, #616]	; (88e4 <HAL_RCC_OscConfig+0x334>)
    867c:	400a      	ands	r2, r1
    867e:	601a      	str	r2, [r3, #0]
    8680:	4b97      	ldr	r3, [pc, #604]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8682:	681a      	ldr	r2, [r3, #0]
    8684:	4b96      	ldr	r3, [pc, #600]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8686:	4998      	ldr	r1, [pc, #608]	; (88e8 <HAL_RCC_OscConfig+0x338>)
    8688:	400a      	ands	r2, r1
    868a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	685b      	ldr	r3, [r3, #4]
    8690:	2b00      	cmp	r3, #0
    8692:	d014      	beq.n	86be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8694:	f7ff fd46 	bl	8124 <HAL_GetTick>
    8698:	0003      	movs	r3, r0
    869a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    869c:	e008      	b.n	86b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    869e:	f7ff fd41 	bl	8124 <HAL_GetTick>
    86a2:	0002      	movs	r2, r0
    86a4:	69bb      	ldr	r3, [r7, #24]
    86a6:	1ad3      	subs	r3, r2, r3
    86a8:	2b64      	cmp	r3, #100	; 0x64
    86aa:	d901      	bls.n	86b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
    86ac:	2303      	movs	r3, #3
    86ae:	e28c      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    86b0:	4b8b      	ldr	r3, [pc, #556]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    86b2:	681a      	ldr	r2, [r3, #0]
    86b4:	2380      	movs	r3, #128	; 0x80
    86b6:	029b      	lsls	r3, r3, #10
    86b8:	4013      	ands	r3, r2
    86ba:	d0f0      	beq.n	869e <HAL_RCC_OscConfig+0xee>
    86bc:	e015      	b.n	86ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    86be:	f7ff fd31 	bl	8124 <HAL_GetTick>
    86c2:	0003      	movs	r3, r0
    86c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    86c6:	e008      	b.n	86da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    86c8:	f7ff fd2c 	bl	8124 <HAL_GetTick>
    86cc:	0002      	movs	r2, r0
    86ce:	69bb      	ldr	r3, [r7, #24]
    86d0:	1ad3      	subs	r3, r2, r3
    86d2:	2b64      	cmp	r3, #100	; 0x64
    86d4:	d901      	bls.n	86da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
    86d6:	2303      	movs	r3, #3
    86d8:	e277      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    86da:	4b81      	ldr	r3, [pc, #516]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    86dc:	681a      	ldr	r2, [r3, #0]
    86de:	2380      	movs	r3, #128	; 0x80
    86e0:	029b      	lsls	r3, r3, #10
    86e2:	4013      	ands	r3, r2
    86e4:	d1f0      	bne.n	86c8 <HAL_RCC_OscConfig+0x118>
    86e6:	e000      	b.n	86ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    86e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	681b      	ldr	r3, [r3, #0]
    86ee:	2202      	movs	r2, #2
    86f0:	4013      	ands	r3, r2
    86f2:	d100      	bne.n	86f6 <HAL_RCC_OscConfig+0x146>
    86f4:	e069      	b.n	87ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
    86f6:	4b7a      	ldr	r3, [pc, #488]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    86f8:	685b      	ldr	r3, [r3, #4]
    86fa:	220c      	movs	r2, #12
    86fc:	4013      	ands	r3, r2
    86fe:	d00b      	beq.n	8718 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    8700:	4b77      	ldr	r3, [pc, #476]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8702:	685b      	ldr	r3, [r3, #4]
    8704:	220c      	movs	r2, #12
    8706:	4013      	ands	r3, r2
    8708:	2b08      	cmp	r3, #8
    870a:	d11c      	bne.n	8746 <HAL_RCC_OscConfig+0x196>
    870c:	4b74      	ldr	r3, [pc, #464]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    870e:	685a      	ldr	r2, [r3, #4]
    8710:	2380      	movs	r3, #128	; 0x80
    8712:	025b      	lsls	r3, r3, #9
    8714:	4013      	ands	r3, r2
    8716:	d116      	bne.n	8746 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8718:	4b71      	ldr	r3, [pc, #452]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	2202      	movs	r2, #2
    871e:	4013      	ands	r3, r2
    8720:	d005      	beq.n	872e <HAL_RCC_OscConfig+0x17e>
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	68db      	ldr	r3, [r3, #12]
    8726:	2b01      	cmp	r3, #1
    8728:	d001      	beq.n	872e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
    872a:	2301      	movs	r3, #1
    872c:	e24d      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    872e:	4b6c      	ldr	r3, [pc, #432]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8730:	681b      	ldr	r3, [r3, #0]
    8732:	22f8      	movs	r2, #248	; 0xf8
    8734:	4393      	bics	r3, r2
    8736:	0019      	movs	r1, r3
    8738:	687b      	ldr	r3, [r7, #4]
    873a:	691b      	ldr	r3, [r3, #16]
    873c:	00da      	lsls	r2, r3, #3
    873e:	4b68      	ldr	r3, [pc, #416]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8740:	430a      	orrs	r2, r1
    8742:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8744:	e041      	b.n	87ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	68db      	ldr	r3, [r3, #12]
    874a:	2b00      	cmp	r3, #0
    874c:	d024      	beq.n	8798 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    874e:	4b64      	ldr	r3, [pc, #400]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8750:	681a      	ldr	r2, [r3, #0]
    8752:	4b63      	ldr	r3, [pc, #396]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8754:	2101      	movs	r1, #1
    8756:	430a      	orrs	r2, r1
    8758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    875a:	f7ff fce3 	bl	8124 <HAL_GetTick>
    875e:	0003      	movs	r3, r0
    8760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8762:	e008      	b.n	8776 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    8764:	f7ff fcde 	bl	8124 <HAL_GetTick>
    8768:	0002      	movs	r2, r0
    876a:	69bb      	ldr	r3, [r7, #24]
    876c:	1ad3      	subs	r3, r2, r3
    876e:	2b02      	cmp	r3, #2
    8770:	d901      	bls.n	8776 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
    8772:	2303      	movs	r3, #3
    8774:	e229      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8776:	4b5a      	ldr	r3, [pc, #360]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8778:	681b      	ldr	r3, [r3, #0]
    877a:	2202      	movs	r2, #2
    877c:	4013      	ands	r3, r2
    877e:	d0f1      	beq.n	8764 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8780:	4b57      	ldr	r3, [pc, #348]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8782:	681b      	ldr	r3, [r3, #0]
    8784:	22f8      	movs	r2, #248	; 0xf8
    8786:	4393      	bics	r3, r2
    8788:	0019      	movs	r1, r3
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	691b      	ldr	r3, [r3, #16]
    878e:	00da      	lsls	r2, r3, #3
    8790:	4b53      	ldr	r3, [pc, #332]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8792:	430a      	orrs	r2, r1
    8794:	601a      	str	r2, [r3, #0]
    8796:	e018      	b.n	87ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    8798:	4b51      	ldr	r3, [pc, #324]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    879a:	681a      	ldr	r2, [r3, #0]
    879c:	4b50      	ldr	r3, [pc, #320]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    879e:	2101      	movs	r1, #1
    87a0:	438a      	bics	r2, r1
    87a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    87a4:	f7ff fcbe 	bl	8124 <HAL_GetTick>
    87a8:	0003      	movs	r3, r0
    87aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    87ac:	e008      	b.n	87c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    87ae:	f7ff fcb9 	bl	8124 <HAL_GetTick>
    87b2:	0002      	movs	r2, r0
    87b4:	69bb      	ldr	r3, [r7, #24]
    87b6:	1ad3      	subs	r3, r2, r3
    87b8:	2b02      	cmp	r3, #2
    87ba:	d901      	bls.n	87c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
    87bc:	2303      	movs	r3, #3
    87be:	e204      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    87c0:	4b47      	ldr	r3, [pc, #284]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    87c2:	681b      	ldr	r3, [r3, #0]
    87c4:	2202      	movs	r2, #2
    87c6:	4013      	ands	r3, r2
    87c8:	d1f1      	bne.n	87ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	681b      	ldr	r3, [r3, #0]
    87ce:	2208      	movs	r2, #8
    87d0:	4013      	ands	r3, r2
    87d2:	d036      	beq.n	8842 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	69db      	ldr	r3, [r3, #28]
    87d8:	2b00      	cmp	r3, #0
    87da:	d019      	beq.n	8810 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    87dc:	4b40      	ldr	r3, [pc, #256]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    87de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    87e0:	4b3f      	ldr	r3, [pc, #252]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    87e2:	2101      	movs	r1, #1
    87e4:	430a      	orrs	r2, r1
    87e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    87e8:	f7ff fc9c 	bl	8124 <HAL_GetTick>
    87ec:	0003      	movs	r3, r0
    87ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    87f0:	e008      	b.n	8804 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    87f2:	f7ff fc97 	bl	8124 <HAL_GetTick>
    87f6:	0002      	movs	r2, r0
    87f8:	69bb      	ldr	r3, [r7, #24]
    87fa:	1ad3      	subs	r3, r2, r3
    87fc:	2b02      	cmp	r3, #2
    87fe:	d901      	bls.n	8804 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
    8800:	2303      	movs	r3, #3
    8802:	e1e2      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8804:	4b36      	ldr	r3, [pc, #216]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8808:	2202      	movs	r2, #2
    880a:	4013      	ands	r3, r2
    880c:	d0f1      	beq.n	87f2 <HAL_RCC_OscConfig+0x242>
    880e:	e018      	b.n	8842 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    8810:	4b33      	ldr	r3, [pc, #204]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8814:	4b32      	ldr	r3, [pc, #200]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8816:	2101      	movs	r1, #1
    8818:	438a      	bics	r2, r1
    881a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    881c:	f7ff fc82 	bl	8124 <HAL_GetTick>
    8820:	0003      	movs	r3, r0
    8822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8824:	e008      	b.n	8838 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8826:	f7ff fc7d 	bl	8124 <HAL_GetTick>
    882a:	0002      	movs	r2, r0
    882c:	69bb      	ldr	r3, [r7, #24]
    882e:	1ad3      	subs	r3, r2, r3
    8830:	2b02      	cmp	r3, #2
    8832:	d901      	bls.n	8838 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
    8834:	2303      	movs	r3, #3
    8836:	e1c8      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8838:	4b29      	ldr	r3, [pc, #164]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    883c:	2202      	movs	r2, #2
    883e:	4013      	ands	r3, r2
    8840:	d1f1      	bne.n	8826 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	681b      	ldr	r3, [r3, #0]
    8846:	2204      	movs	r2, #4
    8848:	4013      	ands	r3, r2
    884a:	d100      	bne.n	884e <HAL_RCC_OscConfig+0x29e>
    884c:	e0b6      	b.n	89bc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
    884e:	231f      	movs	r3, #31
    8850:	18fb      	adds	r3, r7, r3
    8852:	2200      	movs	r2, #0
    8854:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    8856:	4b22      	ldr	r3, [pc, #136]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8858:	69da      	ldr	r2, [r3, #28]
    885a:	2380      	movs	r3, #128	; 0x80
    885c:	055b      	lsls	r3, r3, #21
    885e:	4013      	ands	r3, r2
    8860:	d111      	bne.n	8886 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    8862:	4b1f      	ldr	r3, [pc, #124]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8864:	69da      	ldr	r2, [r3, #28]
    8866:	4b1e      	ldr	r3, [pc, #120]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8868:	2180      	movs	r1, #128	; 0x80
    886a:	0549      	lsls	r1, r1, #21
    886c:	430a      	orrs	r2, r1
    886e:	61da      	str	r2, [r3, #28]
    8870:	4b1b      	ldr	r3, [pc, #108]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    8872:	69da      	ldr	r2, [r3, #28]
    8874:	2380      	movs	r3, #128	; 0x80
    8876:	055b      	lsls	r3, r3, #21
    8878:	4013      	ands	r3, r2
    887a:	60fb      	str	r3, [r7, #12]
    887c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
    887e:	231f      	movs	r3, #31
    8880:	18fb      	adds	r3, r7, r3
    8882:	2201      	movs	r2, #1
    8884:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    8886:	4b19      	ldr	r3, [pc, #100]	; (88ec <HAL_RCC_OscConfig+0x33c>)
    8888:	681a      	ldr	r2, [r3, #0]
    888a:	2380      	movs	r3, #128	; 0x80
    888c:	005b      	lsls	r3, r3, #1
    888e:	4013      	ands	r3, r2
    8890:	d11a      	bne.n	88c8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    8892:	4b16      	ldr	r3, [pc, #88]	; (88ec <HAL_RCC_OscConfig+0x33c>)
    8894:	681a      	ldr	r2, [r3, #0]
    8896:	4b15      	ldr	r3, [pc, #84]	; (88ec <HAL_RCC_OscConfig+0x33c>)
    8898:	2180      	movs	r1, #128	; 0x80
    889a:	0049      	lsls	r1, r1, #1
    889c:	430a      	orrs	r2, r1
    889e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    88a0:	f7ff fc40 	bl	8124 <HAL_GetTick>
    88a4:	0003      	movs	r3, r0
    88a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    88a8:	e008      	b.n	88bc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    88aa:	f7ff fc3b 	bl	8124 <HAL_GetTick>
    88ae:	0002      	movs	r2, r0
    88b0:	69bb      	ldr	r3, [r7, #24]
    88b2:	1ad3      	subs	r3, r2, r3
    88b4:	2b64      	cmp	r3, #100	; 0x64
    88b6:	d901      	bls.n	88bc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
    88b8:	2303      	movs	r3, #3
    88ba:	e186      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    88bc:	4b0b      	ldr	r3, [pc, #44]	; (88ec <HAL_RCC_OscConfig+0x33c>)
    88be:	681a      	ldr	r2, [r3, #0]
    88c0:	2380      	movs	r3, #128	; 0x80
    88c2:	005b      	lsls	r3, r3, #1
    88c4:	4013      	ands	r3, r2
    88c6:	d0f0      	beq.n	88aa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	689b      	ldr	r3, [r3, #8]
    88cc:	2b01      	cmp	r3, #1
    88ce:	d10f      	bne.n	88f0 <HAL_RCC_OscConfig+0x340>
    88d0:	4b03      	ldr	r3, [pc, #12]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    88d2:	6a1a      	ldr	r2, [r3, #32]
    88d4:	4b02      	ldr	r3, [pc, #8]	; (88e0 <HAL_RCC_OscConfig+0x330>)
    88d6:	2101      	movs	r1, #1
    88d8:	430a      	orrs	r2, r1
    88da:	621a      	str	r2, [r3, #32]
    88dc:	e036      	b.n	894c <HAL_RCC_OscConfig+0x39c>
    88de:	46c0      	nop			; (mov r8, r8)
    88e0:	40021000 	.word	0x40021000
    88e4:	fffeffff 	.word	0xfffeffff
    88e8:	fffbffff 	.word	0xfffbffff
    88ec:	40007000 	.word	0x40007000
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	689b      	ldr	r3, [r3, #8]
    88f4:	2b00      	cmp	r3, #0
    88f6:	d10c      	bne.n	8912 <HAL_RCC_OscConfig+0x362>
    88f8:	4bb6      	ldr	r3, [pc, #728]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    88fa:	6a1a      	ldr	r2, [r3, #32]
    88fc:	4bb5      	ldr	r3, [pc, #724]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    88fe:	2101      	movs	r1, #1
    8900:	438a      	bics	r2, r1
    8902:	621a      	str	r2, [r3, #32]
    8904:	4bb3      	ldr	r3, [pc, #716]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8906:	6a1a      	ldr	r2, [r3, #32]
    8908:	4bb2      	ldr	r3, [pc, #712]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    890a:	2104      	movs	r1, #4
    890c:	438a      	bics	r2, r1
    890e:	621a      	str	r2, [r3, #32]
    8910:	e01c      	b.n	894c <HAL_RCC_OscConfig+0x39c>
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	689b      	ldr	r3, [r3, #8]
    8916:	2b05      	cmp	r3, #5
    8918:	d10c      	bne.n	8934 <HAL_RCC_OscConfig+0x384>
    891a:	4bae      	ldr	r3, [pc, #696]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    891c:	6a1a      	ldr	r2, [r3, #32]
    891e:	4bad      	ldr	r3, [pc, #692]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8920:	2104      	movs	r1, #4
    8922:	430a      	orrs	r2, r1
    8924:	621a      	str	r2, [r3, #32]
    8926:	4bab      	ldr	r3, [pc, #684]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8928:	6a1a      	ldr	r2, [r3, #32]
    892a:	4baa      	ldr	r3, [pc, #680]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    892c:	2101      	movs	r1, #1
    892e:	430a      	orrs	r2, r1
    8930:	621a      	str	r2, [r3, #32]
    8932:	e00b      	b.n	894c <HAL_RCC_OscConfig+0x39c>
    8934:	4ba7      	ldr	r3, [pc, #668]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8936:	6a1a      	ldr	r2, [r3, #32]
    8938:	4ba6      	ldr	r3, [pc, #664]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    893a:	2101      	movs	r1, #1
    893c:	438a      	bics	r2, r1
    893e:	621a      	str	r2, [r3, #32]
    8940:	4ba4      	ldr	r3, [pc, #656]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8942:	6a1a      	ldr	r2, [r3, #32]
    8944:	4ba3      	ldr	r3, [pc, #652]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8946:	2104      	movs	r1, #4
    8948:	438a      	bics	r2, r1
    894a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    894c:	687b      	ldr	r3, [r7, #4]
    894e:	689b      	ldr	r3, [r3, #8]
    8950:	2b00      	cmp	r3, #0
    8952:	d014      	beq.n	897e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8954:	f7ff fbe6 	bl	8124 <HAL_GetTick>
    8958:	0003      	movs	r3, r0
    895a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    895c:	e009      	b.n	8972 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    895e:	f7ff fbe1 	bl	8124 <HAL_GetTick>
    8962:	0002      	movs	r2, r0
    8964:	69bb      	ldr	r3, [r7, #24]
    8966:	1ad3      	subs	r3, r2, r3
    8968:	4a9b      	ldr	r2, [pc, #620]	; (8bd8 <HAL_RCC_OscConfig+0x628>)
    896a:	4293      	cmp	r3, r2
    896c:	d901      	bls.n	8972 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
    896e:	2303      	movs	r3, #3
    8970:	e12b      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    8972:	4b98      	ldr	r3, [pc, #608]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8974:	6a1b      	ldr	r3, [r3, #32]
    8976:	2202      	movs	r2, #2
    8978:	4013      	ands	r3, r2
    897a:	d0f0      	beq.n	895e <HAL_RCC_OscConfig+0x3ae>
    897c:	e013      	b.n	89a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    897e:	f7ff fbd1 	bl	8124 <HAL_GetTick>
    8982:	0003      	movs	r3, r0
    8984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    8986:	e009      	b.n	899c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    8988:	f7ff fbcc 	bl	8124 <HAL_GetTick>
    898c:	0002      	movs	r2, r0
    898e:	69bb      	ldr	r3, [r7, #24]
    8990:	1ad3      	subs	r3, r2, r3
    8992:	4a91      	ldr	r2, [pc, #580]	; (8bd8 <HAL_RCC_OscConfig+0x628>)
    8994:	4293      	cmp	r3, r2
    8996:	d901      	bls.n	899c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
    8998:	2303      	movs	r3, #3
    899a:	e116      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    899c:	4b8d      	ldr	r3, [pc, #564]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    899e:	6a1b      	ldr	r3, [r3, #32]
    89a0:	2202      	movs	r2, #2
    89a2:	4013      	ands	r3, r2
    89a4:	d1f0      	bne.n	8988 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
    89a6:	231f      	movs	r3, #31
    89a8:	18fb      	adds	r3, r7, r3
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	2b01      	cmp	r3, #1
    89ae:	d105      	bne.n	89bc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    89b0:	4b88      	ldr	r3, [pc, #544]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89b2:	69da      	ldr	r2, [r3, #28]
    89b4:	4b87      	ldr	r3, [pc, #540]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89b6:	4989      	ldr	r1, [pc, #548]	; (8bdc <HAL_RCC_OscConfig+0x62c>)
    89b8:	400a      	ands	r2, r1
    89ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	681b      	ldr	r3, [r3, #0]
    89c0:	2210      	movs	r2, #16
    89c2:	4013      	ands	r3, r2
    89c4:	d063      	beq.n	8a8e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	695b      	ldr	r3, [r3, #20]
    89ca:	2b01      	cmp	r3, #1
    89cc:	d12a      	bne.n	8a24 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
    89ce:	4b81      	ldr	r3, [pc, #516]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    89d2:	4b80      	ldr	r3, [pc, #512]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89d4:	2104      	movs	r1, #4
    89d6:	430a      	orrs	r2, r1
    89d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
    89da:	4b7e      	ldr	r3, [pc, #504]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    89de:	4b7d      	ldr	r3, [pc, #500]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    89e0:	2101      	movs	r1, #1
    89e2:	430a      	orrs	r2, r1
    89e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    89e6:	f7ff fb9d 	bl	8124 <HAL_GetTick>
    89ea:	0003      	movs	r3, r0
    89ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
    89ee:	e008      	b.n	8a02 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
    89f0:	f7ff fb98 	bl	8124 <HAL_GetTick>
    89f4:	0002      	movs	r2, r0
    89f6:	69bb      	ldr	r3, [r7, #24]
    89f8:	1ad3      	subs	r3, r2, r3
    89fa:	2b02      	cmp	r3, #2
    89fc:	d901      	bls.n	8a02 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
    89fe:	2303      	movs	r3, #3
    8a00:	e0e3      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
    8a02:	4b74      	ldr	r3, [pc, #464]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a06:	2202      	movs	r2, #2
    8a08:	4013      	ands	r3, r2
    8a0a:	d0f1      	beq.n	89f0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    8a0c:	4b71      	ldr	r3, [pc, #452]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a10:	22f8      	movs	r2, #248	; 0xf8
    8a12:	4393      	bics	r3, r2
    8a14:	0019      	movs	r1, r3
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	699b      	ldr	r3, [r3, #24]
    8a1a:	00da      	lsls	r2, r3, #3
    8a1c:	4b6d      	ldr	r3, [pc, #436]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a1e:	430a      	orrs	r2, r1
    8a20:	635a      	str	r2, [r3, #52]	; 0x34
    8a22:	e034      	b.n	8a8e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	695b      	ldr	r3, [r3, #20]
    8a28:	3305      	adds	r3, #5
    8a2a:	d111      	bne.n	8a50 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
    8a2c:	4b69      	ldr	r3, [pc, #420]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8a30:	4b68      	ldr	r3, [pc, #416]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a32:	2104      	movs	r1, #4
    8a34:	438a      	bics	r2, r1
    8a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    8a38:	4b66      	ldr	r3, [pc, #408]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a3c:	22f8      	movs	r2, #248	; 0xf8
    8a3e:	4393      	bics	r3, r2
    8a40:	0019      	movs	r1, r3
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	699b      	ldr	r3, [r3, #24]
    8a46:	00da      	lsls	r2, r3, #3
    8a48:	4b62      	ldr	r3, [pc, #392]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a4a:	430a      	orrs	r2, r1
    8a4c:	635a      	str	r2, [r3, #52]	; 0x34
    8a4e:	e01e      	b.n	8a8e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
    8a50:	4b60      	ldr	r3, [pc, #384]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8a54:	4b5f      	ldr	r3, [pc, #380]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a56:	2104      	movs	r1, #4
    8a58:	430a      	orrs	r2, r1
    8a5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
    8a5c:	4b5d      	ldr	r3, [pc, #372]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8a60:	4b5c      	ldr	r3, [pc, #368]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a62:	2101      	movs	r1, #1
    8a64:	438a      	bics	r2, r1
    8a66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8a68:	f7ff fb5c 	bl	8124 <HAL_GetTick>
    8a6c:	0003      	movs	r3, r0
    8a6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
    8a70:	e008      	b.n	8a84 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
    8a72:	f7ff fb57 	bl	8124 <HAL_GetTick>
    8a76:	0002      	movs	r2, r0
    8a78:	69bb      	ldr	r3, [r7, #24]
    8a7a:	1ad3      	subs	r3, r2, r3
    8a7c:	2b02      	cmp	r3, #2
    8a7e:	d901      	bls.n	8a84 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
    8a80:	2303      	movs	r3, #3
    8a82:	e0a2      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
    8a84:	4b53      	ldr	r3, [pc, #332]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a88:	2202      	movs	r2, #2
    8a8a:	4013      	ands	r3, r2
    8a8c:	d1f1      	bne.n	8a72 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	6a1b      	ldr	r3, [r3, #32]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d100      	bne.n	8a98 <HAL_RCC_OscConfig+0x4e8>
    8a96:	e097      	b.n	8bc8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    8a98:	4b4e      	ldr	r3, [pc, #312]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8a9a:	685b      	ldr	r3, [r3, #4]
    8a9c:	220c      	movs	r2, #12
    8a9e:	4013      	ands	r3, r2
    8aa0:	2b08      	cmp	r3, #8
    8aa2:	d100      	bne.n	8aa6 <HAL_RCC_OscConfig+0x4f6>
    8aa4:	e06b      	b.n	8b7e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    8aa6:	687b      	ldr	r3, [r7, #4]
    8aa8:	6a1b      	ldr	r3, [r3, #32]
    8aaa:	2b02      	cmp	r3, #2
    8aac:	d14c      	bne.n	8b48 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8aae:	4b49      	ldr	r3, [pc, #292]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8ab0:	681a      	ldr	r2, [r3, #0]
    8ab2:	4b48      	ldr	r3, [pc, #288]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8ab4:	494a      	ldr	r1, [pc, #296]	; (8be0 <HAL_RCC_OscConfig+0x630>)
    8ab6:	400a      	ands	r2, r1
    8ab8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8aba:	f7ff fb33 	bl	8124 <HAL_GetTick>
    8abe:	0003      	movs	r3, r0
    8ac0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8ac2:	e008      	b.n	8ad6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8ac4:	f7ff fb2e 	bl	8124 <HAL_GetTick>
    8ac8:	0002      	movs	r2, r0
    8aca:	69bb      	ldr	r3, [r7, #24]
    8acc:	1ad3      	subs	r3, r2, r3
    8ace:	2b02      	cmp	r3, #2
    8ad0:	d901      	bls.n	8ad6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
    8ad2:	2303      	movs	r3, #3
    8ad4:	e079      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8ad6:	4b3f      	ldr	r3, [pc, #252]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8ad8:	681a      	ldr	r2, [r3, #0]
    8ada:	2380      	movs	r3, #128	; 0x80
    8adc:	049b      	lsls	r3, r3, #18
    8ade:	4013      	ands	r3, r2
    8ae0:	d1f0      	bne.n	8ac4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
    8ae2:	4b3c      	ldr	r3, [pc, #240]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8ae6:	220f      	movs	r2, #15
    8ae8:	4393      	bics	r3, r2
    8aea:	0019      	movs	r1, r3
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8af0:	4b38      	ldr	r3, [pc, #224]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8af2:	430a      	orrs	r2, r1
    8af4:	62da      	str	r2, [r3, #44]	; 0x2c
    8af6:	4b37      	ldr	r3, [pc, #220]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8af8:	685b      	ldr	r3, [r3, #4]
    8afa:	4a3a      	ldr	r2, [pc, #232]	; (8be4 <HAL_RCC_OscConfig+0x634>)
    8afc:	4013      	ands	r3, r2
    8afe:	0019      	movs	r1, r3
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8b04:	687b      	ldr	r3, [r7, #4]
    8b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b08:	431a      	orrs	r2, r3
    8b0a:	4b32      	ldr	r3, [pc, #200]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b0c:	430a      	orrs	r2, r1
    8b0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    8b10:	4b30      	ldr	r3, [pc, #192]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b12:	681a      	ldr	r2, [r3, #0]
    8b14:	4b2f      	ldr	r3, [pc, #188]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b16:	2180      	movs	r1, #128	; 0x80
    8b18:	0449      	lsls	r1, r1, #17
    8b1a:	430a      	orrs	r2, r1
    8b1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8b1e:	f7ff fb01 	bl	8124 <HAL_GetTick>
    8b22:	0003      	movs	r3, r0
    8b24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    8b26:	e008      	b.n	8b3a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8b28:	f7ff fafc 	bl	8124 <HAL_GetTick>
    8b2c:	0002      	movs	r2, r0
    8b2e:	69bb      	ldr	r3, [r7, #24]
    8b30:	1ad3      	subs	r3, r2, r3
    8b32:	2b02      	cmp	r3, #2
    8b34:	d901      	bls.n	8b3a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
    8b36:	2303      	movs	r3, #3
    8b38:	e047      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    8b3a:	4b26      	ldr	r3, [pc, #152]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b3c:	681a      	ldr	r2, [r3, #0]
    8b3e:	2380      	movs	r3, #128	; 0x80
    8b40:	049b      	lsls	r3, r3, #18
    8b42:	4013      	ands	r3, r2
    8b44:	d0f0      	beq.n	8b28 <HAL_RCC_OscConfig+0x578>
    8b46:	e03f      	b.n	8bc8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8b48:	4b22      	ldr	r3, [pc, #136]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b4a:	681a      	ldr	r2, [r3, #0]
    8b4c:	4b21      	ldr	r3, [pc, #132]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b4e:	4924      	ldr	r1, [pc, #144]	; (8be0 <HAL_RCC_OscConfig+0x630>)
    8b50:	400a      	ands	r2, r1
    8b52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8b54:	f7ff fae6 	bl	8124 <HAL_GetTick>
    8b58:	0003      	movs	r3, r0
    8b5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8b5c:	e008      	b.n	8b70 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8b5e:	f7ff fae1 	bl	8124 <HAL_GetTick>
    8b62:	0002      	movs	r2, r0
    8b64:	69bb      	ldr	r3, [r7, #24]
    8b66:	1ad3      	subs	r3, r2, r3
    8b68:	2b02      	cmp	r3, #2
    8b6a:	d901      	bls.n	8b70 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
    8b6c:	2303      	movs	r3, #3
    8b6e:	e02c      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8b70:	4b18      	ldr	r3, [pc, #96]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b72:	681a      	ldr	r2, [r3, #0]
    8b74:	2380      	movs	r3, #128	; 0x80
    8b76:	049b      	lsls	r3, r3, #18
    8b78:	4013      	ands	r3, r2
    8b7a:	d1f0      	bne.n	8b5e <HAL_RCC_OscConfig+0x5ae>
    8b7c:	e024      	b.n	8bc8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	6a1b      	ldr	r3, [r3, #32]
    8b82:	2b01      	cmp	r3, #1
    8b84:	d101      	bne.n	8b8a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
    8b86:	2301      	movs	r3, #1
    8b88:	e01f      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
    8b8a:	4b12      	ldr	r3, [pc, #72]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b8c:	685b      	ldr	r3, [r3, #4]
    8b8e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
    8b90:	4b10      	ldr	r3, [pc, #64]	; (8bd4 <HAL_RCC_OscConfig+0x624>)
    8b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b94:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
    8b96:	697a      	ldr	r2, [r7, #20]
    8b98:	2380      	movs	r3, #128	; 0x80
    8b9a:	025b      	lsls	r3, r3, #9
    8b9c:	401a      	ands	r2, r3
    8b9e:	687b      	ldr	r3, [r7, #4]
    8ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ba2:	429a      	cmp	r2, r3
    8ba4:	d10e      	bne.n	8bc4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
    8ba6:	693b      	ldr	r3, [r7, #16]
    8ba8:	220f      	movs	r2, #15
    8baa:	401a      	ands	r2, r3
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
    8bb0:	429a      	cmp	r2, r3
    8bb2:	d107      	bne.n	8bc4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
    8bb4:	697a      	ldr	r2, [r7, #20]
    8bb6:	23f0      	movs	r3, #240	; 0xf0
    8bb8:	039b      	lsls	r3, r3, #14
    8bba:	401a      	ands	r2, r3
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
    8bc0:	429a      	cmp	r2, r3
    8bc2:	d001      	beq.n	8bc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
    8bc4:	2301      	movs	r3, #1
    8bc6:	e000      	b.n	8bca <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
    8bc8:	2300      	movs	r3, #0
}
    8bca:	0018      	movs	r0, r3
    8bcc:	46bd      	mov	sp, r7
    8bce:	b008      	add	sp, #32
    8bd0:	bd80      	pop	{r7, pc}
    8bd2:	46c0      	nop			; (mov r8, r8)
    8bd4:	40021000 	.word	0x40021000
    8bd8:	00001388 	.word	0x00001388
    8bdc:	efffffff 	.word	0xefffffff
    8be0:	feffffff 	.word	0xfeffffff
    8be4:	ffc2ffff 	.word	0xffc2ffff

00008be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	b084      	sub	sp, #16
    8bec:	af00      	add	r7, sp, #0
    8bee:	6078      	str	r0, [r7, #4]
    8bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d101      	bne.n	8bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    8bf8:	2301      	movs	r3, #1
    8bfa:	e0b3      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
    8bfc:	4b5b      	ldr	r3, [pc, #364]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8bfe:	681b      	ldr	r3, [r3, #0]
    8c00:	2201      	movs	r2, #1
    8c02:	4013      	ands	r3, r2
    8c04:	683a      	ldr	r2, [r7, #0]
    8c06:	429a      	cmp	r2, r3
    8c08:	d911      	bls.n	8c2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    8c0a:	4b58      	ldr	r3, [pc, #352]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	2201      	movs	r2, #1
    8c10:	4393      	bics	r3, r2
    8c12:	0019      	movs	r1, r3
    8c14:	4b55      	ldr	r3, [pc, #340]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8c16:	683a      	ldr	r2, [r7, #0]
    8c18:	430a      	orrs	r2, r1
    8c1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    8c1c:	4b53      	ldr	r3, [pc, #332]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8c1e:	681b      	ldr	r3, [r3, #0]
    8c20:	2201      	movs	r2, #1
    8c22:	4013      	ands	r3, r2
    8c24:	683a      	ldr	r2, [r7, #0]
    8c26:	429a      	cmp	r2, r3
    8c28:	d001      	beq.n	8c2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
    8c2a:	2301      	movs	r3, #1
    8c2c:	e09a      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	681b      	ldr	r3, [r3, #0]
    8c32:	2202      	movs	r2, #2
    8c34:	4013      	ands	r3, r2
    8c36:	d015      	beq.n	8c64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	681b      	ldr	r3, [r3, #0]
    8c3c:	2204      	movs	r2, #4
    8c3e:	4013      	ands	r3, r2
    8c40:	d006      	beq.n	8c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
    8c42:	4b4b      	ldr	r3, [pc, #300]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c44:	685a      	ldr	r2, [r3, #4]
    8c46:	4b4a      	ldr	r3, [pc, #296]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c48:	21e0      	movs	r1, #224	; 0xe0
    8c4a:	00c9      	lsls	r1, r1, #3
    8c4c:	430a      	orrs	r2, r1
    8c4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    8c50:	4b47      	ldr	r3, [pc, #284]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c52:	685b      	ldr	r3, [r3, #4]
    8c54:	22f0      	movs	r2, #240	; 0xf0
    8c56:	4393      	bics	r3, r2
    8c58:	0019      	movs	r1, r3
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	689a      	ldr	r2, [r3, #8]
    8c5e:	4b44      	ldr	r3, [pc, #272]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c60:	430a      	orrs	r2, r1
    8c62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    8c64:	687b      	ldr	r3, [r7, #4]
    8c66:	681b      	ldr	r3, [r3, #0]
    8c68:	2201      	movs	r2, #1
    8c6a:	4013      	ands	r3, r2
    8c6c:	d040      	beq.n	8cf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	685b      	ldr	r3, [r3, #4]
    8c72:	2b01      	cmp	r3, #1
    8c74:	d107      	bne.n	8c86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8c76:	4b3e      	ldr	r3, [pc, #248]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c78:	681a      	ldr	r2, [r3, #0]
    8c7a:	2380      	movs	r3, #128	; 0x80
    8c7c:	029b      	lsls	r3, r3, #10
    8c7e:	4013      	ands	r3, r2
    8c80:	d114      	bne.n	8cac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
    8c82:	2301      	movs	r3, #1
    8c84:	e06e      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	685b      	ldr	r3, [r3, #4]
    8c8a:	2b02      	cmp	r3, #2
    8c8c:	d107      	bne.n	8c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    8c8e:	4b38      	ldr	r3, [pc, #224]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8c90:	681a      	ldr	r2, [r3, #0]
    8c92:	2380      	movs	r3, #128	; 0x80
    8c94:	049b      	lsls	r3, r3, #18
    8c96:	4013      	ands	r3, r2
    8c98:	d108      	bne.n	8cac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
    8c9a:	2301      	movs	r3, #1
    8c9c:	e062      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8c9e:	4b34      	ldr	r3, [pc, #208]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8ca0:	681b      	ldr	r3, [r3, #0]
    8ca2:	2202      	movs	r2, #2
    8ca4:	4013      	ands	r3, r2
    8ca6:	d101      	bne.n	8cac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
    8ca8:	2301      	movs	r3, #1
    8caa:	e05b      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    8cac:	4b30      	ldr	r3, [pc, #192]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8cae:	685b      	ldr	r3, [r3, #4]
    8cb0:	2203      	movs	r2, #3
    8cb2:	4393      	bics	r3, r2
    8cb4:	0019      	movs	r1, r3
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	685a      	ldr	r2, [r3, #4]
    8cba:	4b2d      	ldr	r3, [pc, #180]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8cbc:	430a      	orrs	r2, r1
    8cbe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    8cc0:	f7ff fa30 	bl	8124 <HAL_GetTick>
    8cc4:	0003      	movs	r3, r0
    8cc6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    8cc8:	e009      	b.n	8cde <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
    8cca:	f7ff fa2b 	bl	8124 <HAL_GetTick>
    8cce:	0002      	movs	r2, r0
    8cd0:	68fb      	ldr	r3, [r7, #12]
    8cd2:	1ad3      	subs	r3, r2, r3
    8cd4:	4a27      	ldr	r2, [pc, #156]	; (8d74 <HAL_RCC_ClockConfig+0x18c>)
    8cd6:	4293      	cmp	r3, r2
    8cd8:	d901      	bls.n	8cde <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
    8cda:	2303      	movs	r3, #3
    8cdc:	e042      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    8cde:	4b24      	ldr	r3, [pc, #144]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8ce0:	685b      	ldr	r3, [r3, #4]
    8ce2:	220c      	movs	r2, #12
    8ce4:	401a      	ands	r2, r3
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	685b      	ldr	r3, [r3, #4]
    8cea:	009b      	lsls	r3, r3, #2
    8cec:	429a      	cmp	r2, r3
    8cee:	d1ec      	bne.n	8cca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
    8cf0:	4b1e      	ldr	r3, [pc, #120]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	2201      	movs	r2, #1
    8cf6:	4013      	ands	r3, r2
    8cf8:	683a      	ldr	r2, [r7, #0]
    8cfa:	429a      	cmp	r2, r3
    8cfc:	d211      	bcs.n	8d22 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    8cfe:	4b1b      	ldr	r3, [pc, #108]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	2201      	movs	r2, #1
    8d04:	4393      	bics	r3, r2
    8d06:	0019      	movs	r1, r3
    8d08:	4b18      	ldr	r3, [pc, #96]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8d0a:	683a      	ldr	r2, [r7, #0]
    8d0c:	430a      	orrs	r2, r1
    8d0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    8d10:	4b16      	ldr	r3, [pc, #88]	; (8d6c <HAL_RCC_ClockConfig+0x184>)
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	2201      	movs	r2, #1
    8d16:	4013      	ands	r3, r2
    8d18:	683a      	ldr	r2, [r7, #0]
    8d1a:	429a      	cmp	r2, r3
    8d1c:	d001      	beq.n	8d22 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
    8d1e:	2301      	movs	r3, #1
    8d20:	e020      	b.n	8d64 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	681b      	ldr	r3, [r3, #0]
    8d26:	2204      	movs	r2, #4
    8d28:	4013      	ands	r3, r2
    8d2a:	d009      	beq.n	8d40 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
    8d2c:	4b10      	ldr	r3, [pc, #64]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8d2e:	685b      	ldr	r3, [r3, #4]
    8d30:	4a11      	ldr	r2, [pc, #68]	; (8d78 <HAL_RCC_ClockConfig+0x190>)
    8d32:	4013      	ands	r3, r2
    8d34:	0019      	movs	r1, r3
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	68da      	ldr	r2, [r3, #12]
    8d3a:	4b0d      	ldr	r3, [pc, #52]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8d3c:	430a      	orrs	r2, r1
    8d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
    8d40:	f000 f820 	bl	8d84 <HAL_RCC_GetSysClockFreq>
    8d44:	0001      	movs	r1, r0
    8d46:	4b0a      	ldr	r3, [pc, #40]	; (8d70 <HAL_RCC_ClockConfig+0x188>)
    8d48:	685b      	ldr	r3, [r3, #4]
    8d4a:	091b      	lsrs	r3, r3, #4
    8d4c:	220f      	movs	r2, #15
    8d4e:	4013      	ands	r3, r2
    8d50:	4a0a      	ldr	r2, [pc, #40]	; (8d7c <HAL_RCC_ClockConfig+0x194>)
    8d52:	5cd3      	ldrb	r3, [r2, r3]
    8d54:	000a      	movs	r2, r1
    8d56:	40da      	lsrs	r2, r3
    8d58:	4b09      	ldr	r3, [pc, #36]	; (8d80 <HAL_RCC_ClockConfig+0x198>)
    8d5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
    8d5c:	2000      	movs	r0, #0
    8d5e:	f001 fbcf 	bl	a500 <HAL_InitTick>
  
  return HAL_OK;
    8d62:	2300      	movs	r3, #0
}
    8d64:	0018      	movs	r0, r3
    8d66:	46bd      	mov	sp, r7
    8d68:	b004      	add	sp, #16
    8d6a:	bd80      	pop	{r7, pc}
    8d6c:	40022000 	.word	0x40022000
    8d70:	40021000 	.word	0x40021000
    8d74:	00001388 	.word	0x00001388
    8d78:	fffff8ff 	.word	0xfffff8ff
    8d7c:	0000a808 	.word	0x0000a808
    8d80:	0001a83c 	.word	0x0001a83c

00008d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
    8d84:	b590      	push	{r4, r7, lr}
    8d86:	b08f      	sub	sp, #60	; 0x3c
    8d88:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
    8d8a:	2314      	movs	r3, #20
    8d8c:	18fb      	adds	r3, r7, r3
    8d8e:	4a2b      	ldr	r2, [pc, #172]	; (8e3c <HAL_RCC_GetSysClockFreq+0xb8>)
    8d90:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d92:	c313      	stmia	r3!, {r0, r1, r4}
    8d94:	6812      	ldr	r2, [r2, #0]
    8d96:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
    8d98:	1d3b      	adds	r3, r7, #4
    8d9a:	4a29      	ldr	r2, [pc, #164]	; (8e40 <HAL_RCC_GetSysClockFreq+0xbc>)
    8d9c:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d9e:	c313      	stmia	r3!, {r0, r1, r4}
    8da0:	6812      	ldr	r2, [r2, #0]
    8da2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
    8da4:	2300      	movs	r3, #0
    8da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    8da8:	2300      	movs	r3, #0
    8daa:	62bb      	str	r3, [r7, #40]	; 0x28
    8dac:	2300      	movs	r3, #0
    8dae:	637b      	str	r3, [r7, #52]	; 0x34
    8db0:	2300      	movs	r3, #0
    8db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
    8db4:	2300      	movs	r3, #0
    8db6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
    8db8:	4b22      	ldr	r3, [pc, #136]	; (8e44 <HAL_RCC_GetSysClockFreq+0xc0>)
    8dba:	685b      	ldr	r3, [r3, #4]
    8dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
    8dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dc0:	220c      	movs	r2, #12
    8dc2:	4013      	ands	r3, r2
    8dc4:	2b04      	cmp	r3, #4
    8dc6:	d002      	beq.n	8dce <HAL_RCC_GetSysClockFreq+0x4a>
    8dc8:	2b08      	cmp	r3, #8
    8dca:	d003      	beq.n	8dd4 <HAL_RCC_GetSysClockFreq+0x50>
    8dcc:	e02d      	b.n	8e2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
    8dce:	4b1e      	ldr	r3, [pc, #120]	; (8e48 <HAL_RCC_GetSysClockFreq+0xc4>)
    8dd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
    8dd2:	e02d      	b.n	8e30 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
    8dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dd6:	0c9b      	lsrs	r3, r3, #18
    8dd8:	220f      	movs	r2, #15
    8dda:	4013      	ands	r3, r2
    8ddc:	2214      	movs	r2, #20
    8dde:	18ba      	adds	r2, r7, r2
    8de0:	5cd3      	ldrb	r3, [r2, r3]
    8de2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
    8de4:	4b17      	ldr	r3, [pc, #92]	; (8e44 <HAL_RCC_GetSysClockFreq+0xc0>)
    8de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8de8:	220f      	movs	r2, #15
    8dea:	4013      	ands	r3, r2
    8dec:	1d3a      	adds	r2, r7, #4
    8dee:	5cd3      	ldrb	r3, [r2, r3]
    8df0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
    8df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8df4:	2380      	movs	r3, #128	; 0x80
    8df6:	025b      	lsls	r3, r3, #9
    8df8:	4013      	ands	r3, r2
    8dfa:	d009      	beq.n	8e10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
    8dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    8dfe:	4812      	ldr	r0, [pc, #72]	; (8e48 <HAL_RCC_GetSysClockFreq+0xc4>)
    8e00:	f001 fc28 	bl	a654 <__udivsi3>
    8e04:	0003      	movs	r3, r0
    8e06:	001a      	movs	r2, r3
    8e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e0a:	4353      	muls	r3, r2
    8e0c:	637b      	str	r3, [r7, #52]	; 0x34
    8e0e:	e009      	b.n	8e24 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
    8e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8e12:	000a      	movs	r2, r1
    8e14:	0152      	lsls	r2, r2, #5
    8e16:	1a52      	subs	r2, r2, r1
    8e18:	0193      	lsls	r3, r2, #6
    8e1a:	1a9b      	subs	r3, r3, r2
    8e1c:	00db      	lsls	r3, r3, #3
    8e1e:	185b      	adds	r3, r3, r1
    8e20:	021b      	lsls	r3, r3, #8
    8e22:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
    8e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8e26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
    8e28:	e002      	b.n	8e30 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
    8e2a:	4b07      	ldr	r3, [pc, #28]	; (8e48 <HAL_RCC_GetSysClockFreq+0xc4>)
    8e2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
    8e2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
    8e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    8e32:	0018      	movs	r0, r3
    8e34:	46bd      	mov	sp, r7
    8e36:	b00f      	add	sp, #60	; 0x3c
    8e38:	bd90      	pop	{r4, r7, pc}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	0000a778 	.word	0x0000a778
    8e40:	0000a788 	.word	0x0000a788
    8e44:	40021000 	.word	0x40021000
    8e48:	007a1200 	.word	0x007a1200

00008e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    8e50:	4b02      	ldr	r3, [pc, #8]	; (8e5c <HAL_RCC_GetHCLKFreq+0x10>)
    8e52:	681b      	ldr	r3, [r3, #0]
}
    8e54:	0018      	movs	r0, r3
    8e56:	46bd      	mov	sp, r7
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	46c0      	nop			; (mov r8, r8)
    8e5c:	0001a83c 	.word	0x0001a83c

00008e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    8e60:	b580      	push	{r7, lr}
    8e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
    8e64:	f7ff fff2 	bl	8e4c <HAL_RCC_GetHCLKFreq>
    8e68:	0001      	movs	r1, r0
    8e6a:	4b06      	ldr	r3, [pc, #24]	; (8e84 <HAL_RCC_GetPCLK1Freq+0x24>)
    8e6c:	685b      	ldr	r3, [r3, #4]
    8e6e:	0a1b      	lsrs	r3, r3, #8
    8e70:	2207      	movs	r2, #7
    8e72:	4013      	ands	r3, r2
    8e74:	4a04      	ldr	r2, [pc, #16]	; (8e88 <HAL_RCC_GetPCLK1Freq+0x28>)
    8e76:	5cd3      	ldrb	r3, [r2, r3]
    8e78:	40d9      	lsrs	r1, r3
    8e7a:	000b      	movs	r3, r1
}    
    8e7c:	0018      	movs	r0, r3
    8e7e:	46bd      	mov	sp, r7
    8e80:	bd80      	pop	{r7, pc}
    8e82:	46c0      	nop			; (mov r8, r8)
    8e84:	40021000 	.word	0x40021000
    8e88:	0000a818 	.word	0x0000a818

00008e8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
    8e8c:	b580      	push	{r7, lr}
    8e8e:	b082      	sub	sp, #8
    8e90:	af00      	add	r7, sp, #0
    8e92:	6078      	str	r0, [r7, #4]
    8e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
    8e96:	687b      	ldr	r3, [r7, #4]
    8e98:	2207      	movs	r2, #7
    8e9a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
    8e9c:	4b0e      	ldr	r3, [pc, #56]	; (8ed8 <HAL_RCC_GetClockConfig+0x4c>)
    8e9e:	685b      	ldr	r3, [r3, #4]
    8ea0:	2203      	movs	r2, #3
    8ea2:	401a      	ands	r2, r3
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
    8ea8:	4b0b      	ldr	r3, [pc, #44]	; (8ed8 <HAL_RCC_GetClockConfig+0x4c>)
    8eaa:	685b      	ldr	r3, [r3, #4]
    8eac:	22f0      	movs	r2, #240	; 0xf0
    8eae:	401a      	ands	r2, r3
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
    8eb4:	4b08      	ldr	r3, [pc, #32]	; (8ed8 <HAL_RCC_GetClockConfig+0x4c>)
    8eb6:	685a      	ldr	r2, [r3, #4]
    8eb8:	23e0      	movs	r3, #224	; 0xe0
    8eba:	00db      	lsls	r3, r3, #3
    8ebc:	401a      	ands	r2, r3
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
    8ec2:	4b06      	ldr	r3, [pc, #24]	; (8edc <HAL_RCC_GetClockConfig+0x50>)
    8ec4:	681b      	ldr	r3, [r3, #0]
    8ec6:	2201      	movs	r2, #1
    8ec8:	401a      	ands	r2, r3
    8eca:	683b      	ldr	r3, [r7, #0]
    8ecc:	601a      	str	r2, [r3, #0]
}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	46bd      	mov	sp, r7
    8ed2:	b002      	add	sp, #8
    8ed4:	bd80      	pop	{r7, pc}
    8ed6:	46c0      	nop			; (mov r8, r8)
    8ed8:	40021000 	.word	0x40021000
    8edc:	40022000 	.word	0x40022000

00008ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    8ee0:	b580      	push	{r7, lr}
    8ee2:	b082      	sub	sp, #8
    8ee4:	af00      	add	r7, sp, #0
    8ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	2b00      	cmp	r3, #0
    8eec:	d101      	bne.n	8ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    8eee:	2301      	movs	r3, #1
    8ef0:	e042      	b.n	8f78 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    8ef2:	687b      	ldr	r3, [r7, #4]
    8ef4:	223d      	movs	r2, #61	; 0x3d
    8ef6:	5c9b      	ldrb	r3, [r3, r2]
    8ef8:	b2db      	uxtb	r3, r3
    8efa:	2b00      	cmp	r3, #0
    8efc:	d107      	bne.n	8f0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    8efe:	687b      	ldr	r3, [r7, #4]
    8f00:	223c      	movs	r2, #60	; 0x3c
    8f02:	2100      	movs	r1, #0
    8f04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	0018      	movs	r0, r3
    8f0a:	f000 f839 	bl	8f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	223d      	movs	r2, #61	; 0x3d
    8f12:	2102      	movs	r1, #2
    8f14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	681a      	ldr	r2, [r3, #0]
    8f1a:	687b      	ldr	r3, [r7, #4]
    8f1c:	3304      	adds	r3, #4
    8f1e:	0019      	movs	r1, r3
    8f20:	0010      	movs	r0, r2
    8f22:	f000 f881 	bl	9028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
    8f26:	687b      	ldr	r3, [r7, #4]
    8f28:	2246      	movs	r2, #70	; 0x46
    8f2a:	2101      	movs	r1, #1
    8f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	223e      	movs	r2, #62	; 0x3e
    8f32:	2101      	movs	r1, #1
    8f34:	5499      	strb	r1, [r3, r2]
    8f36:	687b      	ldr	r3, [r7, #4]
    8f38:	223f      	movs	r2, #63	; 0x3f
    8f3a:	2101      	movs	r1, #1
    8f3c:	5499      	strb	r1, [r3, r2]
    8f3e:	687b      	ldr	r3, [r7, #4]
    8f40:	2240      	movs	r2, #64	; 0x40
    8f42:	2101      	movs	r1, #1
    8f44:	5499      	strb	r1, [r3, r2]
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	2241      	movs	r2, #65	; 0x41
    8f4a:	2101      	movs	r1, #1
    8f4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	2242      	movs	r2, #66	; 0x42
    8f52:	2101      	movs	r1, #1
    8f54:	5499      	strb	r1, [r3, r2]
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	2243      	movs	r2, #67	; 0x43
    8f5a:	2101      	movs	r1, #1
    8f5c:	5499      	strb	r1, [r3, r2]
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	2244      	movs	r2, #68	; 0x44
    8f62:	2101      	movs	r1, #1
    8f64:	5499      	strb	r1, [r3, r2]
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	2245      	movs	r2, #69	; 0x45
    8f6a:	2101      	movs	r1, #1
    8f6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    8f6e:	687b      	ldr	r3, [r7, #4]
    8f70:	223d      	movs	r2, #61	; 0x3d
    8f72:	2101      	movs	r1, #1
    8f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
    8f76:	2300      	movs	r3, #0
}
    8f78:	0018      	movs	r0, r3
    8f7a:	46bd      	mov	sp, r7
    8f7c:	b002      	add	sp, #8
    8f7e:	bd80      	pop	{r7, pc}

00008f80 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
    8f80:	b580      	push	{r7, lr}
    8f82:	b082      	sub	sp, #8
    8f84:	af00      	add	r7, sp, #0
    8f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
    8f88:	46c0      	nop			; (mov r8, r8)
    8f8a:	46bd      	mov	sp, r7
    8f8c:	b002      	add	sp, #8
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	af00      	add	r7, sp, #0
    8f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	223d      	movs	r2, #61	; 0x3d
    8f9c:	5c9b      	ldrb	r3, [r3, r2]
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	2b01      	cmp	r3, #1
    8fa2:	d001      	beq.n	8fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
    8fa4:	2301      	movs	r3, #1
    8fa6:	e035      	b.n	9014 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    8fa8:	687b      	ldr	r3, [r7, #4]
    8faa:	223d      	movs	r2, #61	; 0x3d
    8fac:	2102      	movs	r1, #2
    8fae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	681b      	ldr	r3, [r3, #0]
    8fb4:	68da      	ldr	r2, [r3, #12]
    8fb6:	687b      	ldr	r3, [r7, #4]
    8fb8:	681b      	ldr	r3, [r3, #0]
    8fba:	2101      	movs	r1, #1
    8fbc:	430a      	orrs	r2, r1
    8fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	681b      	ldr	r3, [r3, #0]
    8fc4:	4a15      	ldr	r2, [pc, #84]	; (901c <HAL_TIM_Base_Start_IT+0x8c>)
    8fc6:	4293      	cmp	r3, r2
    8fc8:	d009      	beq.n	8fde <HAL_TIM_Base_Start_IT+0x4e>
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	681b      	ldr	r3, [r3, #0]
    8fce:	4a14      	ldr	r2, [pc, #80]	; (9020 <HAL_TIM_Base_Start_IT+0x90>)
    8fd0:	4293      	cmp	r3, r2
    8fd2:	d004      	beq.n	8fde <HAL_TIM_Base_Start_IT+0x4e>
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	681b      	ldr	r3, [r3, #0]
    8fd8:	4a12      	ldr	r2, [pc, #72]	; (9024 <HAL_TIM_Base_Start_IT+0x94>)
    8fda:	4293      	cmp	r3, r2
    8fdc:	d111      	bne.n	9002 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    8fde:	687b      	ldr	r3, [r7, #4]
    8fe0:	681b      	ldr	r3, [r3, #0]
    8fe2:	689b      	ldr	r3, [r3, #8]
    8fe4:	2207      	movs	r2, #7
    8fe6:	4013      	ands	r3, r2
    8fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    8fea:	68fb      	ldr	r3, [r7, #12]
    8fec:	2b06      	cmp	r3, #6
    8fee:	d010      	beq.n	9012 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	681a      	ldr	r2, [r3, #0]
    8ff6:	687b      	ldr	r3, [r7, #4]
    8ff8:	681b      	ldr	r3, [r3, #0]
    8ffa:	2101      	movs	r1, #1
    8ffc:	430a      	orrs	r2, r1
    8ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    9000:	e007      	b.n	9012 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
    9002:	687b      	ldr	r3, [r7, #4]
    9004:	681b      	ldr	r3, [r3, #0]
    9006:	681a      	ldr	r2, [r3, #0]
    9008:	687b      	ldr	r3, [r7, #4]
    900a:	681b      	ldr	r3, [r3, #0]
    900c:	2101      	movs	r1, #1
    900e:	430a      	orrs	r2, r1
    9010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    9012:	2300      	movs	r3, #0
}
    9014:	0018      	movs	r0, r3
    9016:	46bd      	mov	sp, r7
    9018:	b004      	add	sp, #16
    901a:	bd80      	pop	{r7, pc}
    901c:	40012c00 	.word	0x40012c00
    9020:	40000400 	.word	0x40000400
    9024:	40014000 	.word	0x40014000

00009028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
    9028:	b580      	push	{r7, lr}
    902a:	b084      	sub	sp, #16
    902c:	af00      	add	r7, sp, #0
    902e:	6078      	str	r0, [r7, #4]
    9030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    9032:	687b      	ldr	r3, [r7, #4]
    9034:	681b      	ldr	r3, [r3, #0]
    9036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	4a2f      	ldr	r2, [pc, #188]	; (90f8 <TIM_Base_SetConfig+0xd0>)
    903c:	4293      	cmp	r3, r2
    903e:	d003      	beq.n	9048 <TIM_Base_SetConfig+0x20>
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	4a2e      	ldr	r2, [pc, #184]	; (90fc <TIM_Base_SetConfig+0xd4>)
    9044:	4293      	cmp	r3, r2
    9046:	d108      	bne.n	905a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    9048:	68fb      	ldr	r3, [r7, #12]
    904a:	2270      	movs	r2, #112	; 0x70
    904c:	4393      	bics	r3, r2
    904e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    9050:	683b      	ldr	r3, [r7, #0]
    9052:	685b      	ldr	r3, [r3, #4]
    9054:	68fa      	ldr	r2, [r7, #12]
    9056:	4313      	orrs	r3, r2
    9058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	4a26      	ldr	r2, [pc, #152]	; (90f8 <TIM_Base_SetConfig+0xd0>)
    905e:	4293      	cmp	r3, r2
    9060:	d013      	beq.n	908a <TIM_Base_SetConfig+0x62>
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	4a25      	ldr	r2, [pc, #148]	; (90fc <TIM_Base_SetConfig+0xd4>)
    9066:	4293      	cmp	r3, r2
    9068:	d00f      	beq.n	908a <TIM_Base_SetConfig+0x62>
    906a:	687b      	ldr	r3, [r7, #4]
    906c:	4a24      	ldr	r2, [pc, #144]	; (9100 <TIM_Base_SetConfig+0xd8>)
    906e:	4293      	cmp	r3, r2
    9070:	d00b      	beq.n	908a <TIM_Base_SetConfig+0x62>
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	4a23      	ldr	r2, [pc, #140]	; (9104 <TIM_Base_SetConfig+0xdc>)
    9076:	4293      	cmp	r3, r2
    9078:	d007      	beq.n	908a <TIM_Base_SetConfig+0x62>
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	4a22      	ldr	r2, [pc, #136]	; (9108 <TIM_Base_SetConfig+0xe0>)
    907e:	4293      	cmp	r3, r2
    9080:	d003      	beq.n	908a <TIM_Base_SetConfig+0x62>
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	4a21      	ldr	r2, [pc, #132]	; (910c <TIM_Base_SetConfig+0xe4>)
    9086:	4293      	cmp	r3, r2
    9088:	d108      	bne.n	909c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    908a:	68fb      	ldr	r3, [r7, #12]
    908c:	4a20      	ldr	r2, [pc, #128]	; (9110 <TIM_Base_SetConfig+0xe8>)
    908e:	4013      	ands	r3, r2
    9090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    9092:	683b      	ldr	r3, [r7, #0]
    9094:	68db      	ldr	r3, [r3, #12]
    9096:	68fa      	ldr	r2, [r7, #12]
    9098:	4313      	orrs	r3, r2
    909a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    909c:	68fb      	ldr	r3, [r7, #12]
    909e:	2280      	movs	r2, #128	; 0x80
    90a0:	4393      	bics	r3, r2
    90a2:	001a      	movs	r2, r3
    90a4:	683b      	ldr	r3, [r7, #0]
    90a6:	695b      	ldr	r3, [r3, #20]
    90a8:	4313      	orrs	r3, r2
    90aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	68fa      	ldr	r2, [r7, #12]
    90b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    90b2:	683b      	ldr	r3, [r7, #0]
    90b4:	689a      	ldr	r2, [r3, #8]
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    90ba:	683b      	ldr	r3, [r7, #0]
    90bc:	681a      	ldr	r2, [r3, #0]
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	4a0c      	ldr	r2, [pc, #48]	; (90f8 <TIM_Base_SetConfig+0xd0>)
    90c6:	4293      	cmp	r3, r2
    90c8:	d00b      	beq.n	90e2 <TIM_Base_SetConfig+0xba>
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	4a0d      	ldr	r2, [pc, #52]	; (9104 <TIM_Base_SetConfig+0xdc>)
    90ce:	4293      	cmp	r3, r2
    90d0:	d007      	beq.n	90e2 <TIM_Base_SetConfig+0xba>
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	4a0c      	ldr	r2, [pc, #48]	; (9108 <TIM_Base_SetConfig+0xe0>)
    90d6:	4293      	cmp	r3, r2
    90d8:	d003      	beq.n	90e2 <TIM_Base_SetConfig+0xba>
    90da:	687b      	ldr	r3, [r7, #4]
    90dc:	4a0b      	ldr	r2, [pc, #44]	; (910c <TIM_Base_SetConfig+0xe4>)
    90de:	4293      	cmp	r3, r2
    90e0:	d103      	bne.n	90ea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    90e2:	683b      	ldr	r3, [r7, #0]
    90e4:	691a      	ldr	r2, [r3, #16]
    90e6:	687b      	ldr	r3, [r7, #4]
    90e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	2201      	movs	r2, #1
    90ee:	615a      	str	r2, [r3, #20]
}
    90f0:	46c0      	nop			; (mov r8, r8)
    90f2:	46bd      	mov	sp, r7
    90f4:	b004      	add	sp, #16
    90f6:	bd80      	pop	{r7, pc}
    90f8:	40012c00 	.word	0x40012c00
    90fc:	40000400 	.word	0x40000400
    9100:	40002000 	.word	0x40002000
    9104:	40014000 	.word	0x40014000
    9108:	40014400 	.word	0x40014400
    910c:	40014800 	.word	0x40014800
    9110:	fffffcff 	.word	0xfffffcff

00009114 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
    9114:	b580      	push	{r7, lr}
    9116:	b084      	sub	sp, #16
    9118:	af00      	add	r7, sp, #0
    911a:	0002      	movs	r2, r0
    911c:	1dbb      	adds	r3, r7, #6
    911e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
    9120:	2300      	movs	r3, #0
    9122:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
    9124:	1dbb      	adds	r3, r7, #6
    9126:	2200      	movs	r2, #0
    9128:	5e9b      	ldrsh	r3, [r3, r2]
    912a:	2b84      	cmp	r3, #132	; 0x84
    912c:	d006      	beq.n	913c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
    912e:	1dbb      	adds	r3, r7, #6
    9130:	2200      	movs	r2, #0
    9132:	5e9a      	ldrsh	r2, [r3, r2]
    9134:	68fb      	ldr	r3, [r7, #12]
    9136:	18d3      	adds	r3, r2, r3
    9138:	3303      	adds	r3, #3
    913a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
    913c:	68fb      	ldr	r3, [r7, #12]
}
    913e:	0018      	movs	r0, r3
    9140:	46bd      	mov	sp, r7
    9142:	b004      	add	sp, #16
    9144:	bd80      	pop	{r7, pc}

00009146 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
    9146:	b580      	push	{r7, lr}
    9148:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
    914a:	f000 faa1 	bl	9690 <vTaskStartScheduler>
  
  return osOK;
    914e:	2300      	movs	r3, #0
}
    9150:	0018      	movs	r0, r3
    9152:	46bd      	mov	sp, r7
    9154:	bd80      	pop	{r7, pc}

00009156 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
    9156:	b5f0      	push	{r4, r5, r6, r7, lr}
    9158:	b089      	sub	sp, #36	; 0x24
    915a:	af04      	add	r7, sp, #16
    915c:	6078      	str	r0, [r7, #4]
    915e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	695b      	ldr	r3, [r3, #20]
    9164:	2b00      	cmp	r3, #0
    9166:	d020      	beq.n	91aa <osThreadCreate+0x54>
    9168:	687b      	ldr	r3, [r7, #4]
    916a:	699b      	ldr	r3, [r3, #24]
    916c:	2b00      	cmp	r3, #0
    916e:	d01c      	beq.n	91aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
    9170:	687b      	ldr	r3, [r7, #4]
    9172:	685c      	ldr	r4, [r3, #4]
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	681d      	ldr	r5, [r3, #0]
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	691e      	ldr	r6, [r3, #16]
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	2208      	movs	r2, #8
    9180:	5e9b      	ldrsh	r3, [r3, r2]
    9182:	0018      	movs	r0, r3
    9184:	f7ff ffc6 	bl	9114 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	695a      	ldr	r2, [r3, #20]
    918c:	687b      	ldr	r3, [r7, #4]
    918e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
    9190:	6839      	ldr	r1, [r7, #0]
    9192:	9302      	str	r3, [sp, #8]
    9194:	9201      	str	r2, [sp, #4]
    9196:	9000      	str	r0, [sp, #0]
    9198:	000b      	movs	r3, r1
    919a:	0032      	movs	r2, r6
    919c:	0029      	movs	r1, r5
    919e:	0020      	movs	r0, r4
    91a0:	f000 f8e3 	bl	936a <xTaskCreateStatic>
    91a4:	0003      	movs	r3, r0
    91a6:	60fb      	str	r3, [r7, #12]
    91a8:	e01d      	b.n	91e6 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
    91aa:	687b      	ldr	r3, [r7, #4]
    91ac:	685c      	ldr	r4, [r3, #4]
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
    91b6:	b29e      	uxth	r6, r3
    91b8:	687b      	ldr	r3, [r7, #4]
    91ba:	2208      	movs	r2, #8
    91bc:	5e9b      	ldrsh	r3, [r3, r2]
    91be:	0018      	movs	r0, r3
    91c0:	f7ff ffa8 	bl	9114 <makeFreeRtosPriority>
    91c4:	0001      	movs	r1, r0
    91c6:	683a      	ldr	r2, [r7, #0]
    91c8:	230c      	movs	r3, #12
    91ca:	18fb      	adds	r3, r7, r3
    91cc:	9301      	str	r3, [sp, #4]
    91ce:	9100      	str	r1, [sp, #0]
    91d0:	0013      	movs	r3, r2
    91d2:	0032      	movs	r2, r6
    91d4:	0029      	movs	r1, r5
    91d6:	0020      	movs	r0, r4
    91d8:	f000 f90a 	bl	93f0 <xTaskCreate>
    91dc:	0003      	movs	r3, r0
    91de:	2b01      	cmp	r3, #1
    91e0:	d001      	beq.n	91e6 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
    91e2:	2300      	movs	r3, #0
    91e4:	e000      	b.n	91e8 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
    91e6:	68fb      	ldr	r3, [r7, #12]
}
    91e8:	0018      	movs	r0, r3
    91ea:	46bd      	mov	sp, r7
    91ec:	b005      	add	sp, #20
    91ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000091f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b084      	sub	sp, #16
    91f4:	af00      	add	r7, sp, #0
    91f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
    91f8:	687b      	ldr	r3, [r7, #4]
    91fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
    91fc:	68fb      	ldr	r3, [r7, #12]
    91fe:	2b00      	cmp	r3, #0
    9200:	d001      	beq.n	9206 <osDelay+0x16>
    9202:	68fb      	ldr	r3, [r7, #12]
    9204:	e000      	b.n	9208 <osDelay+0x18>
    9206:	2301      	movs	r3, #1
    9208:	0018      	movs	r0, r3
    920a:	f000 fa1b 	bl	9644 <vTaskDelay>
  
  return osOK;
    920e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
    9210:	0018      	movs	r0, r3
    9212:	46bd      	mov	sp, r7
    9214:	b004      	add	sp, #16
    9216:	bd80      	pop	{r7, pc}

00009218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    9218:	b580      	push	{r7, lr}
    921a:	b082      	sub	sp, #8
    921c:	af00      	add	r7, sp, #0
    921e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	3308      	adds	r3, #8
    9224:	001a      	movs	r2, r3
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	2201      	movs	r2, #1
    922e:	4252      	negs	r2, r2
    9230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	3308      	adds	r3, #8
    9236:	001a      	movs	r2, r3
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    923c:	687b      	ldr	r3, [r7, #4]
    923e:	3308      	adds	r3, #8
    9240:	001a      	movs	r2, r3
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	2200      	movs	r2, #0
    924a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    924c:	46c0      	nop			; (mov r8, r8)
    924e:	46bd      	mov	sp, r7
    9250:	b002      	add	sp, #8
    9252:	bd80      	pop	{r7, pc}

00009254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    9254:	b580      	push	{r7, lr}
    9256:	b082      	sub	sp, #8
    9258:	af00      	add	r7, sp, #0
    925a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	2200      	movs	r2, #0
    9260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    9262:	46c0      	nop			; (mov r8, r8)
    9264:	46bd      	mov	sp, r7
    9266:	b002      	add	sp, #8
    9268:	bd80      	pop	{r7, pc}

0000926a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    926a:	b580      	push	{r7, lr}
    926c:	b084      	sub	sp, #16
    926e:	af00      	add	r7, sp, #0
    9270:	6078      	str	r0, [r7, #4]
    9272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	685b      	ldr	r3, [r3, #4]
    9278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    927a:	683b      	ldr	r3, [r7, #0]
    927c:	68fa      	ldr	r2, [r7, #12]
    927e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    9280:	68fb      	ldr	r3, [r7, #12]
    9282:	689a      	ldr	r2, [r3, #8]
    9284:	683b      	ldr	r3, [r7, #0]
    9286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	689b      	ldr	r3, [r3, #8]
    928c:	683a      	ldr	r2, [r7, #0]
    928e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    9290:	68fb      	ldr	r3, [r7, #12]
    9292:	683a      	ldr	r2, [r7, #0]
    9294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    9296:	683b      	ldr	r3, [r7, #0]
    9298:	687a      	ldr	r2, [r7, #4]
    929a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	681b      	ldr	r3, [r3, #0]
    92a0:	1c5a      	adds	r2, r3, #1
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	601a      	str	r2, [r3, #0]
}
    92a6:	46c0      	nop			; (mov r8, r8)
    92a8:	46bd      	mov	sp, r7
    92aa:	b004      	add	sp, #16
    92ac:	bd80      	pop	{r7, pc}

000092ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    92ae:	b580      	push	{r7, lr}
    92b0:	b084      	sub	sp, #16
    92b2:	af00      	add	r7, sp, #0
    92b4:	6078      	str	r0, [r7, #4]
    92b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    92b8:	683b      	ldr	r3, [r7, #0]
    92ba:	681b      	ldr	r3, [r3, #0]
    92bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    92be:	68bb      	ldr	r3, [r7, #8]
    92c0:	3301      	adds	r3, #1
    92c2:	d103      	bne.n	92cc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	691b      	ldr	r3, [r3, #16]
    92c8:	60fb      	str	r3, [r7, #12]
    92ca:	e00c      	b.n	92e6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	3308      	adds	r3, #8
    92d0:	60fb      	str	r3, [r7, #12]
    92d2:	e002      	b.n	92da <vListInsert+0x2c>
    92d4:	68fb      	ldr	r3, [r7, #12]
    92d6:	685b      	ldr	r3, [r3, #4]
    92d8:	60fb      	str	r3, [r7, #12]
    92da:	68fb      	ldr	r3, [r7, #12]
    92dc:	685b      	ldr	r3, [r3, #4]
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	68ba      	ldr	r2, [r7, #8]
    92e2:	429a      	cmp	r2, r3
    92e4:	d2f6      	bcs.n	92d4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    92e6:	68fb      	ldr	r3, [r7, #12]
    92e8:	685a      	ldr	r2, [r3, #4]
    92ea:	683b      	ldr	r3, [r7, #0]
    92ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    92ee:	683b      	ldr	r3, [r7, #0]
    92f0:	685b      	ldr	r3, [r3, #4]
    92f2:	683a      	ldr	r2, [r7, #0]
    92f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    92f6:	683b      	ldr	r3, [r7, #0]
    92f8:	68fa      	ldr	r2, [r7, #12]
    92fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    92fc:	68fb      	ldr	r3, [r7, #12]
    92fe:	683a      	ldr	r2, [r7, #0]
    9300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    9302:	683b      	ldr	r3, [r7, #0]
    9304:	687a      	ldr	r2, [r7, #4]
    9306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	681b      	ldr	r3, [r3, #0]
    930c:	1c5a      	adds	r2, r3, #1
    930e:	687b      	ldr	r3, [r7, #4]
    9310:	601a      	str	r2, [r3, #0]
}
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	46bd      	mov	sp, r7
    9316:	b004      	add	sp, #16
    9318:	bd80      	pop	{r7, pc}

0000931a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    931a:	b580      	push	{r7, lr}
    931c:	b084      	sub	sp, #16
    931e:	af00      	add	r7, sp, #0
    9320:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	691b      	ldr	r3, [r3, #16]
    9326:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	685b      	ldr	r3, [r3, #4]
    932c:	687a      	ldr	r2, [r7, #4]
    932e:	6892      	ldr	r2, [r2, #8]
    9330:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    9332:	687b      	ldr	r3, [r7, #4]
    9334:	689b      	ldr	r3, [r3, #8]
    9336:	687a      	ldr	r2, [r7, #4]
    9338:	6852      	ldr	r2, [r2, #4]
    933a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    933c:	68fb      	ldr	r3, [r7, #12]
    933e:	685b      	ldr	r3, [r3, #4]
    9340:	687a      	ldr	r2, [r7, #4]
    9342:	429a      	cmp	r2, r3
    9344:	d103      	bne.n	934e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    9346:	687b      	ldr	r3, [r7, #4]
    9348:	689a      	ldr	r2, [r3, #8]
    934a:	68fb      	ldr	r3, [r7, #12]
    934c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	2200      	movs	r2, #0
    9352:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    9354:	68fb      	ldr	r3, [r7, #12]
    9356:	681b      	ldr	r3, [r3, #0]
    9358:	1e5a      	subs	r2, r3, #1
    935a:	68fb      	ldr	r3, [r7, #12]
    935c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	681b      	ldr	r3, [r3, #0]
}
    9362:	0018      	movs	r0, r3
    9364:	46bd      	mov	sp, r7
    9366:	b004      	add	sp, #16
    9368:	bd80      	pop	{r7, pc}

0000936a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    936a:	b590      	push	{r4, r7, lr}
    936c:	b08d      	sub	sp, #52	; 0x34
    936e:	af04      	add	r7, sp, #16
    9370:	60f8      	str	r0, [r7, #12]
    9372:	60b9      	str	r1, [r7, #8]
    9374:	607a      	str	r2, [r7, #4]
    9376:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
    9378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    937a:	2b00      	cmp	r3, #0
    937c:	d101      	bne.n	9382 <xTaskCreateStatic+0x18>
    937e:	b672      	cpsid	i
    9380:	e7fe      	b.n	9380 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
    9382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9384:	2b00      	cmp	r3, #0
    9386:	d101      	bne.n	938c <xTaskCreateStatic+0x22>
    9388:	b672      	cpsid	i
    938a:	e7fe      	b.n	938a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
    938c:	2354      	movs	r3, #84	; 0x54
    938e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
    9390:	697b      	ldr	r3, [r7, #20]
    9392:	2b54      	cmp	r3, #84	; 0x54
    9394:	d001      	beq.n	939a <xTaskCreateStatic+0x30>
    9396:	b672      	cpsid	i
    9398:	e7fe      	b.n	9398 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    939c:	2b00      	cmp	r3, #0
    939e:	d020      	beq.n	93e2 <xTaskCreateStatic+0x78>
    93a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    93a2:	2b00      	cmp	r3, #0
    93a4:	d01d      	beq.n	93e2 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    93a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    93a8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    93aa:	69fb      	ldr	r3, [r7, #28]
    93ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    93ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    93b0:	69fb      	ldr	r3, [r7, #28]
    93b2:	2251      	movs	r2, #81	; 0x51
    93b4:	2102      	movs	r1, #2
    93b6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    93b8:	683c      	ldr	r4, [r7, #0]
    93ba:	687a      	ldr	r2, [r7, #4]
    93bc:	68b9      	ldr	r1, [r7, #8]
    93be:	68f8      	ldr	r0, [r7, #12]
    93c0:	2300      	movs	r3, #0
    93c2:	9303      	str	r3, [sp, #12]
    93c4:	69fb      	ldr	r3, [r7, #28]
    93c6:	9302      	str	r3, [sp, #8]
    93c8:	2318      	movs	r3, #24
    93ca:	18fb      	adds	r3, r7, r3
    93cc:	9301      	str	r3, [sp, #4]
    93ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    93d0:	9300      	str	r3, [sp, #0]
    93d2:	0023      	movs	r3, r4
    93d4:	f000 f858 	bl	9488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    93d8:	69fb      	ldr	r3, [r7, #28]
    93da:	0018      	movs	r0, r3
    93dc:	f000 f8ce 	bl	957c <prvAddNewTaskToReadyList>
    93e0:	e001      	b.n	93e6 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
    93e2:	2300      	movs	r3, #0
    93e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    93e6:	69bb      	ldr	r3, [r7, #24]
	}
    93e8:	0018      	movs	r0, r3
    93ea:	46bd      	mov	sp, r7
    93ec:	b009      	add	sp, #36	; 0x24
    93ee:	bd90      	pop	{r4, r7, pc}

000093f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    93f0:	b590      	push	{r4, r7, lr}
    93f2:	b08d      	sub	sp, #52	; 0x34
    93f4:	af04      	add	r7, sp, #16
    93f6:	60f8      	str	r0, [r7, #12]
    93f8:	60b9      	str	r1, [r7, #8]
    93fa:	603b      	str	r3, [r7, #0]
    93fc:	1dbb      	adds	r3, r7, #6
    93fe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9400:	1dbb      	adds	r3, r7, #6
    9402:	881b      	ldrh	r3, [r3, #0]
    9404:	009b      	lsls	r3, r3, #2
    9406:	0018      	movs	r0, r3
    9408:	f000 fd2e 	bl	9e68 <pvPortMalloc>
    940c:	0003      	movs	r3, r0
    940e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    9410:	697b      	ldr	r3, [r7, #20]
    9412:	2b00      	cmp	r3, #0
    9414:	d010      	beq.n	9438 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    9416:	2054      	movs	r0, #84	; 0x54
    9418:	f000 fd26 	bl	9e68 <pvPortMalloc>
    941c:	0003      	movs	r3, r0
    941e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    9420:	69fb      	ldr	r3, [r7, #28]
    9422:	2b00      	cmp	r3, #0
    9424:	d003      	beq.n	942e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    9426:	69fb      	ldr	r3, [r7, #28]
    9428:	697a      	ldr	r2, [r7, #20]
    942a:	631a      	str	r2, [r3, #48]	; 0x30
    942c:	e006      	b.n	943c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    942e:	697b      	ldr	r3, [r7, #20]
    9430:	0018      	movs	r0, r3
    9432:	f000 fdbf 	bl	9fb4 <vPortFree>
    9436:	e001      	b.n	943c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    9438:	2300      	movs	r3, #0
    943a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    943c:	69fb      	ldr	r3, [r7, #28]
    943e:	2b00      	cmp	r3, #0
    9440:	d01a      	beq.n	9478 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    9442:	69fb      	ldr	r3, [r7, #28]
    9444:	2251      	movs	r2, #81	; 0x51
    9446:	2100      	movs	r1, #0
    9448:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    944a:	1dbb      	adds	r3, r7, #6
    944c:	881a      	ldrh	r2, [r3, #0]
    944e:	683c      	ldr	r4, [r7, #0]
    9450:	68b9      	ldr	r1, [r7, #8]
    9452:	68f8      	ldr	r0, [r7, #12]
    9454:	2300      	movs	r3, #0
    9456:	9303      	str	r3, [sp, #12]
    9458:	69fb      	ldr	r3, [r7, #28]
    945a:	9302      	str	r3, [sp, #8]
    945c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    945e:	9301      	str	r3, [sp, #4]
    9460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9462:	9300      	str	r3, [sp, #0]
    9464:	0023      	movs	r3, r4
    9466:	f000 f80f 	bl	9488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    946a:	69fb      	ldr	r3, [r7, #28]
    946c:	0018      	movs	r0, r3
    946e:	f000 f885 	bl	957c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    9472:	2301      	movs	r3, #1
    9474:	61bb      	str	r3, [r7, #24]
    9476:	e002      	b.n	947e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    9478:	2301      	movs	r3, #1
    947a:	425b      	negs	r3, r3
    947c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    947e:	69bb      	ldr	r3, [r7, #24]
	}
    9480:	0018      	movs	r0, r3
    9482:	46bd      	mov	sp, r7
    9484:	b009      	add	sp, #36	; 0x24
    9486:	bd90      	pop	{r4, r7, pc}

00009488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    9488:	b580      	push	{r7, lr}
    948a:	b086      	sub	sp, #24
    948c:	af00      	add	r7, sp, #0
    948e:	60f8      	str	r0, [r7, #12]
    9490:	60b9      	str	r1, [r7, #8]
    9492:	607a      	str	r2, [r7, #4]
    9494:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    9496:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    949a:	687b      	ldr	r3, [r7, #4]
    949c:	4936      	ldr	r1, [pc, #216]	; (9578 <prvInitialiseNewTask+0xf0>)
    949e:	468c      	mov	ip, r1
    94a0:	4463      	add	r3, ip
    94a2:	009b      	lsls	r3, r3, #2
    94a4:	18d3      	adds	r3, r2, r3
    94a6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    94a8:	693b      	ldr	r3, [r7, #16]
    94aa:	2207      	movs	r2, #7
    94ac:	4393      	bics	r3, r2
    94ae:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    94b0:	693b      	ldr	r3, [r7, #16]
    94b2:	2207      	movs	r2, #7
    94b4:	4013      	ands	r3, r2
    94b6:	d001      	beq.n	94bc <prvInitialiseNewTask+0x34>
    94b8:	b672      	cpsid	i
    94ba:	e7fe      	b.n	94ba <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    94bc:	2300      	movs	r3, #0
    94be:	617b      	str	r3, [r7, #20]
    94c0:	e013      	b.n	94ea <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    94c2:	68ba      	ldr	r2, [r7, #8]
    94c4:	697b      	ldr	r3, [r7, #20]
    94c6:	18d3      	adds	r3, r2, r3
    94c8:	7818      	ldrb	r0, [r3, #0]
    94ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94cc:	2134      	movs	r1, #52	; 0x34
    94ce:	697b      	ldr	r3, [r7, #20]
    94d0:	18d3      	adds	r3, r2, r3
    94d2:	185b      	adds	r3, r3, r1
    94d4:	1c02      	adds	r2, r0, #0
    94d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    94d8:	68ba      	ldr	r2, [r7, #8]
    94da:	697b      	ldr	r3, [r7, #20]
    94dc:	18d3      	adds	r3, r2, r3
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	2b00      	cmp	r3, #0
    94e2:	d006      	beq.n	94f2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    94e4:	697b      	ldr	r3, [r7, #20]
    94e6:	3301      	adds	r3, #1
    94e8:	617b      	str	r3, [r7, #20]
    94ea:	697b      	ldr	r3, [r7, #20]
    94ec:	2b0f      	cmp	r3, #15
    94ee:	d9e8      	bls.n	94c2 <prvInitialiseNewTask+0x3a>
    94f0:	e000      	b.n	94f4 <prvInitialiseNewTask+0x6c>
		{
			break;
    94f2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    94f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f6:	2243      	movs	r2, #67	; 0x43
    94f8:	2100      	movs	r1, #0
    94fa:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    94fc:	6a3b      	ldr	r3, [r7, #32]
    94fe:	2b06      	cmp	r3, #6
    9500:	d901      	bls.n	9506 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    9502:	2306      	movs	r3, #6
    9504:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    9506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9508:	6a3a      	ldr	r2, [r7, #32]
    950a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    950e:	6a3a      	ldr	r2, [r7, #32]
    9510:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    9512:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9514:	2200      	movs	r2, #0
    9516:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    9518:	6abb      	ldr	r3, [r7, #40]	; 0x28
    951a:	3304      	adds	r3, #4
    951c:	0018      	movs	r0, r3
    951e:	f7ff fe99 	bl	9254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    9522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9524:	3318      	adds	r3, #24
    9526:	0018      	movs	r0, r3
    9528:	f7ff fe94 	bl	9254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    952e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9530:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9532:	6a3b      	ldr	r3, [r7, #32]
    9534:	2207      	movs	r2, #7
    9536:	1ad2      	subs	r2, r2, r3
    9538:	6abb      	ldr	r3, [r7, #40]	; 0x28
    953a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    953e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    9542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9544:	2200      	movs	r2, #0
    9546:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    9548:	6abb      	ldr	r3, [r7, #40]	; 0x28
    954a:	2250      	movs	r2, #80	; 0x50
    954c:	2100      	movs	r1, #0
    954e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    9550:	683a      	ldr	r2, [r7, #0]
    9552:	68f9      	ldr	r1, [r7, #12]
    9554:	693b      	ldr	r3, [r7, #16]
    9556:	0018      	movs	r0, r3
    9558:	f000 fba8 	bl	9cac <pxPortInitialiseStack>
    955c:	0002      	movs	r2, r0
    955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9560:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    9562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9564:	2b00      	cmp	r3, #0
    9566:	d002      	beq.n	956e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    9568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    956a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    956c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    956e:	46c0      	nop			; (mov r8, r8)
    9570:	46bd      	mov	sp, r7
    9572:	b006      	add	sp, #24
    9574:	bd80      	pop	{r7, pc}
    9576:	46c0      	nop			; (mov r8, r8)
    9578:	3fffffff 	.word	0x3fffffff

0000957c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    957c:	b580      	push	{r7, lr}
    957e:	b082      	sub	sp, #8
    9580:	af00      	add	r7, sp, #0
    9582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    9584:	f000 fc24 	bl	9dd0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    9588:	4b28      	ldr	r3, [pc, #160]	; (962c <prvAddNewTaskToReadyList+0xb0>)
    958a:	681b      	ldr	r3, [r3, #0]
    958c:	1c5a      	adds	r2, r3, #1
    958e:	4b27      	ldr	r3, [pc, #156]	; (962c <prvAddNewTaskToReadyList+0xb0>)
    9590:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    9592:	4b27      	ldr	r3, [pc, #156]	; (9630 <prvAddNewTaskToReadyList+0xb4>)
    9594:	681b      	ldr	r3, [r3, #0]
    9596:	2b00      	cmp	r3, #0
    9598:	d109      	bne.n	95ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    959a:	4b25      	ldr	r3, [pc, #148]	; (9630 <prvAddNewTaskToReadyList+0xb4>)
    959c:	687a      	ldr	r2, [r7, #4]
    959e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    95a0:	4b22      	ldr	r3, [pc, #136]	; (962c <prvAddNewTaskToReadyList+0xb0>)
    95a2:	681b      	ldr	r3, [r3, #0]
    95a4:	2b01      	cmp	r3, #1
    95a6:	d110      	bne.n	95ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    95a8:	f000 fa6e 	bl	9a88 <prvInitialiseTaskLists>
    95ac:	e00d      	b.n	95ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    95ae:	4b21      	ldr	r3, [pc, #132]	; (9634 <prvAddNewTaskToReadyList+0xb8>)
    95b0:	681b      	ldr	r3, [r3, #0]
    95b2:	2b00      	cmp	r3, #0
    95b4:	d109      	bne.n	95ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    95b6:	4b1e      	ldr	r3, [pc, #120]	; (9630 <prvAddNewTaskToReadyList+0xb4>)
    95b8:	681b      	ldr	r3, [r3, #0]
    95ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95c0:	429a      	cmp	r2, r3
    95c2:	d802      	bhi.n	95ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    95c4:	4b1a      	ldr	r3, [pc, #104]	; (9630 <prvAddNewTaskToReadyList+0xb4>)
    95c6:	687a      	ldr	r2, [r7, #4]
    95c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    95ca:	4b1b      	ldr	r3, [pc, #108]	; (9638 <prvAddNewTaskToReadyList+0xbc>)
    95cc:	681b      	ldr	r3, [r3, #0]
    95ce:	1c5a      	adds	r2, r3, #1
    95d0:	4b19      	ldr	r3, [pc, #100]	; (9638 <prvAddNewTaskToReadyList+0xbc>)
    95d2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    95d4:	687b      	ldr	r3, [r7, #4]
    95d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95d8:	4b18      	ldr	r3, [pc, #96]	; (963c <prvAddNewTaskToReadyList+0xc0>)
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	429a      	cmp	r2, r3
    95de:	d903      	bls.n	95e8 <prvAddNewTaskToReadyList+0x6c>
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95e4:	4b15      	ldr	r3, [pc, #84]	; (963c <prvAddNewTaskToReadyList+0xc0>)
    95e6:	601a      	str	r2, [r3, #0]
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ec:	0013      	movs	r3, r2
    95ee:	009b      	lsls	r3, r3, #2
    95f0:	189b      	adds	r3, r3, r2
    95f2:	009b      	lsls	r3, r3, #2
    95f4:	4a12      	ldr	r2, [pc, #72]	; (9640 <prvAddNewTaskToReadyList+0xc4>)
    95f6:	189a      	adds	r2, r3, r2
    95f8:	687b      	ldr	r3, [r7, #4]
    95fa:	3304      	adds	r3, #4
    95fc:	0019      	movs	r1, r3
    95fe:	0010      	movs	r0, r2
    9600:	f7ff fe33 	bl	926a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    9604:	f000 fbf6 	bl	9df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    9608:	4b0a      	ldr	r3, [pc, #40]	; (9634 <prvAddNewTaskToReadyList+0xb8>)
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	2b00      	cmp	r3, #0
    960e:	d008      	beq.n	9622 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    9610:	4b07      	ldr	r3, [pc, #28]	; (9630 <prvAddNewTaskToReadyList+0xb4>)
    9612:	681b      	ldr	r3, [r3, #0]
    9614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    961a:	429a      	cmp	r2, r3
    961c:	d201      	bcs.n	9622 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    961e:	f000 fbc7 	bl	9db0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	46bd      	mov	sp, r7
    9626:	b002      	add	sp, #8
    9628:	bd80      	pop	{r7, pc}
    962a:	46c0      	nop			; (mov r8, r8)
    962c:	0001a9c0 	.word	0x0001a9c0
    9630:	0001a8c0 	.word	0x0001a8c0
    9634:	0001a9cc 	.word	0x0001a9cc
    9638:	0001a9dc 	.word	0x0001a9dc
    963c:	0001a9c8 	.word	0x0001a9c8
    9640:	0001a8c4 	.word	0x0001a8c4

00009644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    9644:	b580      	push	{r7, lr}
    9646:	b084      	sub	sp, #16
    9648:	af00      	add	r7, sp, #0
    964a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    964c:	2300      	movs	r3, #0
    964e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    9650:	687b      	ldr	r3, [r7, #4]
    9652:	2b00      	cmp	r3, #0
    9654:	d010      	beq.n	9678 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    9656:	4b0d      	ldr	r3, [pc, #52]	; (968c <vTaskDelay+0x48>)
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	2b00      	cmp	r3, #0
    965c:	d001      	beq.n	9662 <vTaskDelay+0x1e>
    965e:	b672      	cpsid	i
    9660:	e7fe      	b.n	9660 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    9662:	f000 f863 	bl	972c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	2100      	movs	r1, #0
    966a:	0018      	movs	r0, r3
    966c:	f000 faca 	bl	9c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    9670:	f000 f868 	bl	9744 <xTaskResumeAll>
    9674:	0003      	movs	r3, r0
    9676:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    9678:	68fb      	ldr	r3, [r7, #12]
    967a:	2b00      	cmp	r3, #0
    967c:	d101      	bne.n	9682 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    967e:	f000 fb97 	bl	9db0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9682:	46c0      	nop			; (mov r8, r8)
    9684:	46bd      	mov	sp, r7
    9686:	b004      	add	sp, #16
    9688:	bd80      	pop	{r7, pc}
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	0001a9e8 	.word	0x0001a9e8

00009690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    9690:	b590      	push	{r4, r7, lr}
    9692:	b089      	sub	sp, #36	; 0x24
    9694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    9696:	2300      	movs	r3, #0
    9698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    969a:	2300      	movs	r3, #0
    969c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    969e:	003a      	movs	r2, r7
    96a0:	1d39      	adds	r1, r7, #4
    96a2:	2308      	movs	r3, #8
    96a4:	18fb      	adds	r3, r7, r3
    96a6:	0018      	movs	r0, r3
    96a8:	f000 fd84 	bl	a1b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    96ac:	683c      	ldr	r4, [r7, #0]
    96ae:	687b      	ldr	r3, [r7, #4]
    96b0:	68ba      	ldr	r2, [r7, #8]
    96b2:	4918      	ldr	r1, [pc, #96]	; (9714 <vTaskStartScheduler+0x84>)
    96b4:	4818      	ldr	r0, [pc, #96]	; (9718 <vTaskStartScheduler+0x88>)
    96b6:	9202      	str	r2, [sp, #8]
    96b8:	9301      	str	r3, [sp, #4]
    96ba:	2300      	movs	r3, #0
    96bc:	9300      	str	r3, [sp, #0]
    96be:	2300      	movs	r3, #0
    96c0:	0022      	movs	r2, r4
    96c2:	f7ff fe52 	bl	936a <xTaskCreateStatic>
    96c6:	0002      	movs	r2, r0
    96c8:	4b14      	ldr	r3, [pc, #80]	; (971c <vTaskStartScheduler+0x8c>)
    96ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    96cc:	4b13      	ldr	r3, [pc, #76]	; (971c <vTaskStartScheduler+0x8c>)
    96ce:	681b      	ldr	r3, [r3, #0]
    96d0:	2b00      	cmp	r3, #0
    96d2:	d002      	beq.n	96da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
    96d4:	2301      	movs	r3, #1
    96d6:	60fb      	str	r3, [r7, #12]
    96d8:	e001      	b.n	96de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
    96da:	2300      	movs	r3, #0
    96dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    96de:	68fb      	ldr	r3, [r7, #12]
    96e0:	2b01      	cmp	r3, #1
    96e2:	d10d      	bne.n	9700 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    96e4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    96e6:	4b0e      	ldr	r3, [pc, #56]	; (9720 <vTaskStartScheduler+0x90>)
    96e8:	2201      	movs	r2, #1
    96ea:	4252      	negs	r2, r2
    96ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    96ee:	4b0d      	ldr	r3, [pc, #52]	; (9724 <vTaskStartScheduler+0x94>)
    96f0:	2201      	movs	r2, #1
    96f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    96f4:	4b0c      	ldr	r3, [pc, #48]	; (9728 <vTaskStartScheduler+0x98>)
    96f6:	2200      	movs	r2, #0
    96f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    96fa:	f000 fb35 	bl	9d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    96fe:	e004      	b.n	970a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    9700:	68fb      	ldr	r3, [r7, #12]
    9702:	3301      	adds	r3, #1
    9704:	d101      	bne.n	970a <vTaskStartScheduler+0x7a>
    9706:	b672      	cpsid	i
    9708:	e7fe      	b.n	9708 <vTaskStartScheduler+0x78>
}
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	46bd      	mov	sp, r7
    970e:	b005      	add	sp, #20
    9710:	bd90      	pop	{r4, r7, pc}
    9712:	46c0      	nop			; (mov r8, r8)
    9714:	0000a798 	.word	0x0000a798
    9718:	00009a69 	.word	0x00009a69
    971c:	0001a9e4 	.word	0x0001a9e4
    9720:	0001a9e0 	.word	0x0001a9e0
    9724:	0001a9cc 	.word	0x0001a9cc
    9728:	0001a9c4 	.word	0x0001a9c4

0000972c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    972c:	b580      	push	{r7, lr}
    972e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    9730:	4b03      	ldr	r3, [pc, #12]	; (9740 <vTaskSuspendAll+0x14>)
    9732:	681b      	ldr	r3, [r3, #0]
    9734:	1c5a      	adds	r2, r3, #1
    9736:	4b02      	ldr	r3, [pc, #8]	; (9740 <vTaskSuspendAll+0x14>)
    9738:	601a      	str	r2, [r3, #0]
}
    973a:	46c0      	nop			; (mov r8, r8)
    973c:	46bd      	mov	sp, r7
    973e:	bd80      	pop	{r7, pc}
    9740:	0001a9e8 	.word	0x0001a9e8

00009744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    9744:	b580      	push	{r7, lr}
    9746:	b084      	sub	sp, #16
    9748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    974a:	2300      	movs	r3, #0
    974c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    974e:	2300      	movs	r3, #0
    9750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    9752:	4b3a      	ldr	r3, [pc, #232]	; (983c <xTaskResumeAll+0xf8>)
    9754:	681b      	ldr	r3, [r3, #0]
    9756:	2b00      	cmp	r3, #0
    9758:	d101      	bne.n	975e <xTaskResumeAll+0x1a>
    975a:	b672      	cpsid	i
    975c:	e7fe      	b.n	975c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    975e:	f000 fb37 	bl	9dd0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    9762:	4b36      	ldr	r3, [pc, #216]	; (983c <xTaskResumeAll+0xf8>)
    9764:	681b      	ldr	r3, [r3, #0]
    9766:	1e5a      	subs	r2, r3, #1
    9768:	4b34      	ldr	r3, [pc, #208]	; (983c <xTaskResumeAll+0xf8>)
    976a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    976c:	4b33      	ldr	r3, [pc, #204]	; (983c <xTaskResumeAll+0xf8>)
    976e:	681b      	ldr	r3, [r3, #0]
    9770:	2b00      	cmp	r3, #0
    9772:	d15b      	bne.n	982c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    9774:	4b32      	ldr	r3, [pc, #200]	; (9840 <xTaskResumeAll+0xfc>)
    9776:	681b      	ldr	r3, [r3, #0]
    9778:	2b00      	cmp	r3, #0
    977a:	d057      	beq.n	982c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    977c:	e02f      	b.n	97de <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    977e:	4b31      	ldr	r3, [pc, #196]	; (9844 <xTaskResumeAll+0x100>)
    9780:	68db      	ldr	r3, [r3, #12]
    9782:	68db      	ldr	r3, [r3, #12]
    9784:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    9786:	68fb      	ldr	r3, [r7, #12]
    9788:	3318      	adds	r3, #24
    978a:	0018      	movs	r0, r3
    978c:	f7ff fdc5 	bl	931a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9790:	68fb      	ldr	r3, [r7, #12]
    9792:	3304      	adds	r3, #4
    9794:	0018      	movs	r0, r3
    9796:	f7ff fdc0 	bl	931a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    979a:	68fb      	ldr	r3, [r7, #12]
    979c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    979e:	4b2a      	ldr	r3, [pc, #168]	; (9848 <xTaskResumeAll+0x104>)
    97a0:	681b      	ldr	r3, [r3, #0]
    97a2:	429a      	cmp	r2, r3
    97a4:	d903      	bls.n	97ae <xTaskResumeAll+0x6a>
    97a6:	68fb      	ldr	r3, [r7, #12]
    97a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97aa:	4b27      	ldr	r3, [pc, #156]	; (9848 <xTaskResumeAll+0x104>)
    97ac:	601a      	str	r2, [r3, #0]
    97ae:	68fb      	ldr	r3, [r7, #12]
    97b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97b2:	0013      	movs	r3, r2
    97b4:	009b      	lsls	r3, r3, #2
    97b6:	189b      	adds	r3, r3, r2
    97b8:	009b      	lsls	r3, r3, #2
    97ba:	4a24      	ldr	r2, [pc, #144]	; (984c <xTaskResumeAll+0x108>)
    97bc:	189a      	adds	r2, r3, r2
    97be:	68fb      	ldr	r3, [r7, #12]
    97c0:	3304      	adds	r3, #4
    97c2:	0019      	movs	r1, r3
    97c4:	0010      	movs	r0, r2
    97c6:	f7ff fd50 	bl	926a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    97ca:	68fb      	ldr	r3, [r7, #12]
    97cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97ce:	4b20      	ldr	r3, [pc, #128]	; (9850 <xTaskResumeAll+0x10c>)
    97d0:	681b      	ldr	r3, [r3, #0]
    97d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    97d4:	429a      	cmp	r2, r3
    97d6:	d302      	bcc.n	97de <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    97d8:	4b1e      	ldr	r3, [pc, #120]	; (9854 <xTaskResumeAll+0x110>)
    97da:	2201      	movs	r2, #1
    97dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    97de:	4b19      	ldr	r3, [pc, #100]	; (9844 <xTaskResumeAll+0x100>)
    97e0:	681b      	ldr	r3, [r3, #0]
    97e2:	2b00      	cmp	r3, #0
    97e4:	d1cb      	bne.n	977e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    97e6:	68fb      	ldr	r3, [r7, #12]
    97e8:	2b00      	cmp	r3, #0
    97ea:	d001      	beq.n	97f0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    97ec:	f000 f9e6 	bl	9bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    97f0:	4b19      	ldr	r3, [pc, #100]	; (9858 <xTaskResumeAll+0x114>)
    97f2:	681b      	ldr	r3, [r3, #0]
    97f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d00f      	beq.n	981c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    97fc:	f000 f82e 	bl	985c <xTaskIncrementTick>
    9800:	1e03      	subs	r3, r0, #0
    9802:	d002      	beq.n	980a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    9804:	4b13      	ldr	r3, [pc, #76]	; (9854 <xTaskResumeAll+0x110>)
    9806:	2201      	movs	r2, #1
    9808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	3b01      	subs	r3, #1
    980e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	2b00      	cmp	r3, #0
    9814:	d1f2      	bne.n	97fc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    9816:	4b10      	ldr	r3, [pc, #64]	; (9858 <xTaskResumeAll+0x114>)
    9818:	2200      	movs	r2, #0
    981a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    981c:	4b0d      	ldr	r3, [pc, #52]	; (9854 <xTaskResumeAll+0x110>)
    981e:	681b      	ldr	r3, [r3, #0]
    9820:	2b00      	cmp	r3, #0
    9822:	d003      	beq.n	982c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    9824:	2301      	movs	r3, #1
    9826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    9828:	f000 fac2 	bl	9db0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    982c:	f000 fae2 	bl	9df4 <vPortExitCritical>

	return xAlreadyYielded;
    9830:	68bb      	ldr	r3, [r7, #8]
}
    9832:	0018      	movs	r0, r3
    9834:	46bd      	mov	sp, r7
    9836:	b004      	add	sp, #16
    9838:	bd80      	pop	{r7, pc}
    983a:	46c0      	nop			; (mov r8, r8)
    983c:	0001a9e8 	.word	0x0001a9e8
    9840:	0001a9c0 	.word	0x0001a9c0
    9844:	0001a980 	.word	0x0001a980
    9848:	0001a9c8 	.word	0x0001a9c8
    984c:	0001a8c4 	.word	0x0001a8c4
    9850:	0001a8c0 	.word	0x0001a8c0
    9854:	0001a9d4 	.word	0x0001a9d4
    9858:	0001a9d0 	.word	0x0001a9d0

0000985c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    985c:	b580      	push	{r7, lr}
    985e:	b086      	sub	sp, #24
    9860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    9862:	2300      	movs	r3, #0
    9864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9866:	4b4c      	ldr	r3, [pc, #304]	; (9998 <xTaskIncrementTick+0x13c>)
    9868:	681b      	ldr	r3, [r3, #0]
    986a:	2b00      	cmp	r3, #0
    986c:	d000      	beq.n	9870 <xTaskIncrementTick+0x14>
    986e:	e083      	b.n	9978 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    9870:	4b4a      	ldr	r3, [pc, #296]	; (999c <xTaskIncrementTick+0x140>)
    9872:	681b      	ldr	r3, [r3, #0]
    9874:	3301      	adds	r3, #1
    9876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    9878:	4b48      	ldr	r3, [pc, #288]	; (999c <xTaskIncrementTick+0x140>)
    987a:	693a      	ldr	r2, [r7, #16]
    987c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    987e:	693b      	ldr	r3, [r7, #16]
    9880:	2b00      	cmp	r3, #0
    9882:	d117      	bne.n	98b4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    9884:	4b46      	ldr	r3, [pc, #280]	; (99a0 <xTaskIncrementTick+0x144>)
    9886:	681b      	ldr	r3, [r3, #0]
    9888:	681b      	ldr	r3, [r3, #0]
    988a:	2b00      	cmp	r3, #0
    988c:	d001      	beq.n	9892 <xTaskIncrementTick+0x36>
    988e:	b672      	cpsid	i
    9890:	e7fe      	b.n	9890 <xTaskIncrementTick+0x34>
    9892:	4b43      	ldr	r3, [pc, #268]	; (99a0 <xTaskIncrementTick+0x144>)
    9894:	681b      	ldr	r3, [r3, #0]
    9896:	60fb      	str	r3, [r7, #12]
    9898:	4b42      	ldr	r3, [pc, #264]	; (99a4 <xTaskIncrementTick+0x148>)
    989a:	681a      	ldr	r2, [r3, #0]
    989c:	4b40      	ldr	r3, [pc, #256]	; (99a0 <xTaskIncrementTick+0x144>)
    989e:	601a      	str	r2, [r3, #0]
    98a0:	4b40      	ldr	r3, [pc, #256]	; (99a4 <xTaskIncrementTick+0x148>)
    98a2:	68fa      	ldr	r2, [r7, #12]
    98a4:	601a      	str	r2, [r3, #0]
    98a6:	4b40      	ldr	r3, [pc, #256]	; (99a8 <xTaskIncrementTick+0x14c>)
    98a8:	681b      	ldr	r3, [r3, #0]
    98aa:	1c5a      	adds	r2, r3, #1
    98ac:	4b3e      	ldr	r3, [pc, #248]	; (99a8 <xTaskIncrementTick+0x14c>)
    98ae:	601a      	str	r2, [r3, #0]
    98b0:	f000 f984 	bl	9bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    98b4:	4b3d      	ldr	r3, [pc, #244]	; (99ac <xTaskIncrementTick+0x150>)
    98b6:	681b      	ldr	r3, [r3, #0]
    98b8:	693a      	ldr	r2, [r7, #16]
    98ba:	429a      	cmp	r2, r3
    98bc:	d34e      	bcc.n	995c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    98be:	4b38      	ldr	r3, [pc, #224]	; (99a0 <xTaskIncrementTick+0x144>)
    98c0:	681b      	ldr	r3, [r3, #0]
    98c2:	681b      	ldr	r3, [r3, #0]
    98c4:	2b00      	cmp	r3, #0
    98c6:	d101      	bne.n	98cc <xTaskIncrementTick+0x70>
    98c8:	2301      	movs	r3, #1
    98ca:	e000      	b.n	98ce <xTaskIncrementTick+0x72>
    98cc:	2300      	movs	r3, #0
    98ce:	2b00      	cmp	r3, #0
    98d0:	d004      	beq.n	98dc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    98d2:	4b36      	ldr	r3, [pc, #216]	; (99ac <xTaskIncrementTick+0x150>)
    98d4:	2201      	movs	r2, #1
    98d6:	4252      	negs	r2, r2
    98d8:	601a      	str	r2, [r3, #0]
					break;
    98da:	e03f      	b.n	995c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    98dc:	4b30      	ldr	r3, [pc, #192]	; (99a0 <xTaskIncrementTick+0x144>)
    98de:	681b      	ldr	r3, [r3, #0]
    98e0:	68db      	ldr	r3, [r3, #12]
    98e2:	68db      	ldr	r3, [r3, #12]
    98e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    98e6:	68bb      	ldr	r3, [r7, #8]
    98e8:	685b      	ldr	r3, [r3, #4]
    98ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    98ec:	693a      	ldr	r2, [r7, #16]
    98ee:	687b      	ldr	r3, [r7, #4]
    98f0:	429a      	cmp	r2, r3
    98f2:	d203      	bcs.n	98fc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    98f4:	4b2d      	ldr	r3, [pc, #180]	; (99ac <xTaskIncrementTick+0x150>)
    98f6:	687a      	ldr	r2, [r7, #4]
    98f8:	601a      	str	r2, [r3, #0]
						break;
    98fa:	e02f      	b.n	995c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    98fc:	68bb      	ldr	r3, [r7, #8]
    98fe:	3304      	adds	r3, #4
    9900:	0018      	movs	r0, r3
    9902:	f7ff fd0a 	bl	931a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    9906:	68bb      	ldr	r3, [r7, #8]
    9908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    990a:	2b00      	cmp	r3, #0
    990c:	d004      	beq.n	9918 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    990e:	68bb      	ldr	r3, [r7, #8]
    9910:	3318      	adds	r3, #24
    9912:	0018      	movs	r0, r3
    9914:	f7ff fd01 	bl	931a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    9918:	68bb      	ldr	r3, [r7, #8]
    991a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    991c:	4b24      	ldr	r3, [pc, #144]	; (99b0 <xTaskIncrementTick+0x154>)
    991e:	681b      	ldr	r3, [r3, #0]
    9920:	429a      	cmp	r2, r3
    9922:	d903      	bls.n	992c <xTaskIncrementTick+0xd0>
    9924:	68bb      	ldr	r3, [r7, #8]
    9926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9928:	4b21      	ldr	r3, [pc, #132]	; (99b0 <xTaskIncrementTick+0x154>)
    992a:	601a      	str	r2, [r3, #0]
    992c:	68bb      	ldr	r3, [r7, #8]
    992e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9930:	0013      	movs	r3, r2
    9932:	009b      	lsls	r3, r3, #2
    9934:	189b      	adds	r3, r3, r2
    9936:	009b      	lsls	r3, r3, #2
    9938:	4a1e      	ldr	r2, [pc, #120]	; (99b4 <xTaskIncrementTick+0x158>)
    993a:	189a      	adds	r2, r3, r2
    993c:	68bb      	ldr	r3, [r7, #8]
    993e:	3304      	adds	r3, #4
    9940:	0019      	movs	r1, r3
    9942:	0010      	movs	r0, r2
    9944:	f7ff fc91 	bl	926a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    9948:	68bb      	ldr	r3, [r7, #8]
    994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    994c:	4b1a      	ldr	r3, [pc, #104]	; (99b8 <xTaskIncrementTick+0x15c>)
    994e:	681b      	ldr	r3, [r3, #0]
    9950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9952:	429a      	cmp	r2, r3
    9954:	d3b3      	bcc.n	98be <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    9956:	2301      	movs	r3, #1
    9958:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    995a:	e7b0      	b.n	98be <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    995c:	4b16      	ldr	r3, [pc, #88]	; (99b8 <xTaskIncrementTick+0x15c>)
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9962:	4914      	ldr	r1, [pc, #80]	; (99b4 <xTaskIncrementTick+0x158>)
    9964:	0013      	movs	r3, r2
    9966:	009b      	lsls	r3, r3, #2
    9968:	189b      	adds	r3, r3, r2
    996a:	009b      	lsls	r3, r3, #2
    996c:	585b      	ldr	r3, [r3, r1]
    996e:	2b01      	cmp	r3, #1
    9970:	d907      	bls.n	9982 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    9972:	2301      	movs	r3, #1
    9974:	617b      	str	r3, [r7, #20]
    9976:	e004      	b.n	9982 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    9978:	4b10      	ldr	r3, [pc, #64]	; (99bc <xTaskIncrementTick+0x160>)
    997a:	681b      	ldr	r3, [r3, #0]
    997c:	1c5a      	adds	r2, r3, #1
    997e:	4b0f      	ldr	r3, [pc, #60]	; (99bc <xTaskIncrementTick+0x160>)
    9980:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    9982:	4b0f      	ldr	r3, [pc, #60]	; (99c0 <xTaskIncrementTick+0x164>)
    9984:	681b      	ldr	r3, [r3, #0]
    9986:	2b00      	cmp	r3, #0
    9988:	d001      	beq.n	998e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    998a:	2301      	movs	r3, #1
    998c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    998e:	697b      	ldr	r3, [r7, #20]
}
    9990:	0018      	movs	r0, r3
    9992:	46bd      	mov	sp, r7
    9994:	b006      	add	sp, #24
    9996:	bd80      	pop	{r7, pc}
    9998:	0001a9e8 	.word	0x0001a9e8
    999c:	0001a9c4 	.word	0x0001a9c4
    99a0:	0001a978 	.word	0x0001a978
    99a4:	0001a97c 	.word	0x0001a97c
    99a8:	0001a9d8 	.word	0x0001a9d8
    99ac:	0001a9e0 	.word	0x0001a9e0
    99b0:	0001a9c8 	.word	0x0001a9c8
    99b4:	0001a8c4 	.word	0x0001a8c4
    99b8:	0001a8c0 	.word	0x0001a8c0
    99bc:	0001a9d0 	.word	0x0001a9d0
    99c0:	0001a9d4 	.word	0x0001a9d4

000099c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b082      	sub	sp, #8
    99c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    99ca:	4b22      	ldr	r3, [pc, #136]	; (9a54 <vTaskSwitchContext+0x90>)
    99cc:	681b      	ldr	r3, [r3, #0]
    99ce:	2b00      	cmp	r3, #0
    99d0:	d003      	beq.n	99da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    99d2:	4b21      	ldr	r3, [pc, #132]	; (9a58 <vTaskSwitchContext+0x94>)
    99d4:	2201      	movs	r2, #1
    99d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    99d8:	e037      	b.n	9a4a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    99da:	4b1f      	ldr	r3, [pc, #124]	; (9a58 <vTaskSwitchContext+0x94>)
    99dc:	2200      	movs	r2, #0
    99de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    99e0:	4b1e      	ldr	r3, [pc, #120]	; (9a5c <vTaskSwitchContext+0x98>)
    99e2:	681b      	ldr	r3, [r3, #0]
    99e4:	607b      	str	r3, [r7, #4]
    99e6:	e007      	b.n	99f8 <vTaskSwitchContext+0x34>
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	2b00      	cmp	r3, #0
    99ec:	d101      	bne.n	99f2 <vTaskSwitchContext+0x2e>
    99ee:	b672      	cpsid	i
    99f0:	e7fe      	b.n	99f0 <vTaskSwitchContext+0x2c>
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	3b01      	subs	r3, #1
    99f6:	607b      	str	r3, [r7, #4]
    99f8:	4919      	ldr	r1, [pc, #100]	; (9a60 <vTaskSwitchContext+0x9c>)
    99fa:	687a      	ldr	r2, [r7, #4]
    99fc:	0013      	movs	r3, r2
    99fe:	009b      	lsls	r3, r3, #2
    9a00:	189b      	adds	r3, r3, r2
    9a02:	009b      	lsls	r3, r3, #2
    9a04:	585b      	ldr	r3, [r3, r1]
    9a06:	2b00      	cmp	r3, #0
    9a08:	d0ee      	beq.n	99e8 <vTaskSwitchContext+0x24>
    9a0a:	687a      	ldr	r2, [r7, #4]
    9a0c:	0013      	movs	r3, r2
    9a0e:	009b      	lsls	r3, r3, #2
    9a10:	189b      	adds	r3, r3, r2
    9a12:	009b      	lsls	r3, r3, #2
    9a14:	4a12      	ldr	r2, [pc, #72]	; (9a60 <vTaskSwitchContext+0x9c>)
    9a16:	189b      	adds	r3, r3, r2
    9a18:	603b      	str	r3, [r7, #0]
    9a1a:	683b      	ldr	r3, [r7, #0]
    9a1c:	685b      	ldr	r3, [r3, #4]
    9a1e:	685a      	ldr	r2, [r3, #4]
    9a20:	683b      	ldr	r3, [r7, #0]
    9a22:	605a      	str	r2, [r3, #4]
    9a24:	683b      	ldr	r3, [r7, #0]
    9a26:	685a      	ldr	r2, [r3, #4]
    9a28:	683b      	ldr	r3, [r7, #0]
    9a2a:	3308      	adds	r3, #8
    9a2c:	429a      	cmp	r2, r3
    9a2e:	d104      	bne.n	9a3a <vTaskSwitchContext+0x76>
    9a30:	683b      	ldr	r3, [r7, #0]
    9a32:	685b      	ldr	r3, [r3, #4]
    9a34:	685a      	ldr	r2, [r3, #4]
    9a36:	683b      	ldr	r3, [r7, #0]
    9a38:	605a      	str	r2, [r3, #4]
    9a3a:	683b      	ldr	r3, [r7, #0]
    9a3c:	685b      	ldr	r3, [r3, #4]
    9a3e:	68da      	ldr	r2, [r3, #12]
    9a40:	4b08      	ldr	r3, [pc, #32]	; (9a64 <vTaskSwitchContext+0xa0>)
    9a42:	601a      	str	r2, [r3, #0]
    9a44:	4b05      	ldr	r3, [pc, #20]	; (9a5c <vTaskSwitchContext+0x98>)
    9a46:	687a      	ldr	r2, [r7, #4]
    9a48:	601a      	str	r2, [r3, #0]
}
    9a4a:	46c0      	nop			; (mov r8, r8)
    9a4c:	46bd      	mov	sp, r7
    9a4e:	b002      	add	sp, #8
    9a50:	bd80      	pop	{r7, pc}
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	0001a9e8 	.word	0x0001a9e8
    9a58:	0001a9d4 	.word	0x0001a9d4
    9a5c:	0001a9c8 	.word	0x0001a9c8
    9a60:	0001a8c4 	.word	0x0001a8c4
    9a64:	0001a8c0 	.word	0x0001a8c0

00009a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    9a68:	b580      	push	{r7, lr}
    9a6a:	b082      	sub	sp, #8
    9a6c:	af00      	add	r7, sp, #0
    9a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9a70:	f000 f84e 	bl	9b10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    9a74:	4b03      	ldr	r3, [pc, #12]	; (9a84 <prvIdleTask+0x1c>)
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	2b01      	cmp	r3, #1
    9a7a:	d9f9      	bls.n	9a70 <prvIdleTask+0x8>
			{
				taskYIELD();
    9a7c:	f000 f998 	bl	9db0 <vPortYield>
		prvCheckTasksWaitingTermination();
    9a80:	e7f6      	b.n	9a70 <prvIdleTask+0x8>
    9a82:	46c0      	nop			; (mov r8, r8)
    9a84:	0001a8c4 	.word	0x0001a8c4

00009a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    9a88:	b580      	push	{r7, lr}
    9a8a:	b082      	sub	sp, #8
    9a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9a8e:	2300      	movs	r3, #0
    9a90:	607b      	str	r3, [r7, #4]
    9a92:	e00c      	b.n	9aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9a94:	687a      	ldr	r2, [r7, #4]
    9a96:	0013      	movs	r3, r2
    9a98:	009b      	lsls	r3, r3, #2
    9a9a:	189b      	adds	r3, r3, r2
    9a9c:	009b      	lsls	r3, r3, #2
    9a9e:	4a14      	ldr	r2, [pc, #80]	; (9af0 <prvInitialiseTaskLists+0x68>)
    9aa0:	189b      	adds	r3, r3, r2
    9aa2:	0018      	movs	r0, r3
    9aa4:	f7ff fbb8 	bl	9218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9aa8:	687b      	ldr	r3, [r7, #4]
    9aaa:	3301      	adds	r3, #1
    9aac:	607b      	str	r3, [r7, #4]
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	2b06      	cmp	r3, #6
    9ab2:	d9ef      	bls.n	9a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    9ab4:	4b0f      	ldr	r3, [pc, #60]	; (9af4 <prvInitialiseTaskLists+0x6c>)
    9ab6:	0018      	movs	r0, r3
    9ab8:	f7ff fbae 	bl	9218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    9abc:	4b0e      	ldr	r3, [pc, #56]	; (9af8 <prvInitialiseTaskLists+0x70>)
    9abe:	0018      	movs	r0, r3
    9ac0:	f7ff fbaa 	bl	9218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    9ac4:	4b0d      	ldr	r3, [pc, #52]	; (9afc <prvInitialiseTaskLists+0x74>)
    9ac6:	0018      	movs	r0, r3
    9ac8:	f7ff fba6 	bl	9218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    9acc:	4b0c      	ldr	r3, [pc, #48]	; (9b00 <prvInitialiseTaskLists+0x78>)
    9ace:	0018      	movs	r0, r3
    9ad0:	f7ff fba2 	bl	9218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    9ad4:	4b0b      	ldr	r3, [pc, #44]	; (9b04 <prvInitialiseTaskLists+0x7c>)
    9ad6:	0018      	movs	r0, r3
    9ad8:	f7ff fb9e 	bl	9218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    9adc:	4b0a      	ldr	r3, [pc, #40]	; (9b08 <prvInitialiseTaskLists+0x80>)
    9ade:	4a05      	ldr	r2, [pc, #20]	; (9af4 <prvInitialiseTaskLists+0x6c>)
    9ae0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    9ae2:	4b0a      	ldr	r3, [pc, #40]	; (9b0c <prvInitialiseTaskLists+0x84>)
    9ae4:	4a04      	ldr	r2, [pc, #16]	; (9af8 <prvInitialiseTaskLists+0x70>)
    9ae6:	601a      	str	r2, [r3, #0]
}
    9ae8:	46c0      	nop			; (mov r8, r8)
    9aea:	46bd      	mov	sp, r7
    9aec:	b002      	add	sp, #8
    9aee:	bd80      	pop	{r7, pc}
    9af0:	0001a8c4 	.word	0x0001a8c4
    9af4:	0001a950 	.word	0x0001a950
    9af8:	0001a964 	.word	0x0001a964
    9afc:	0001a980 	.word	0x0001a980
    9b00:	0001a994 	.word	0x0001a994
    9b04:	0001a9ac 	.word	0x0001a9ac
    9b08:	0001a978 	.word	0x0001a978
    9b0c:	0001a97c 	.word	0x0001a97c

00009b10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    9b10:	b580      	push	{r7, lr}
    9b12:	b082      	sub	sp, #8
    9b14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9b16:	e01a      	b.n	9b4e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    9b18:	f000 f95a 	bl	9dd0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    9b1c:	4b10      	ldr	r3, [pc, #64]	; (9b60 <prvCheckTasksWaitingTermination+0x50>)
    9b1e:	68db      	ldr	r3, [r3, #12]
    9b20:	68db      	ldr	r3, [r3, #12]
    9b22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9b24:	687b      	ldr	r3, [r7, #4]
    9b26:	3304      	adds	r3, #4
    9b28:	0018      	movs	r0, r3
    9b2a:	f7ff fbf6 	bl	931a <uxListRemove>
				--uxCurrentNumberOfTasks;
    9b2e:	4b0d      	ldr	r3, [pc, #52]	; (9b64 <prvCheckTasksWaitingTermination+0x54>)
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	1e5a      	subs	r2, r3, #1
    9b34:	4b0b      	ldr	r3, [pc, #44]	; (9b64 <prvCheckTasksWaitingTermination+0x54>)
    9b36:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    9b38:	4b0b      	ldr	r3, [pc, #44]	; (9b68 <prvCheckTasksWaitingTermination+0x58>)
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	1e5a      	subs	r2, r3, #1
    9b3e:	4b0a      	ldr	r3, [pc, #40]	; (9b68 <prvCheckTasksWaitingTermination+0x58>)
    9b40:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    9b42:	f000 f957 	bl	9df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	0018      	movs	r0, r3
    9b4a:	f000 f80f 	bl	9b6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9b4e:	4b06      	ldr	r3, [pc, #24]	; (9b68 <prvCheckTasksWaitingTermination+0x58>)
    9b50:	681b      	ldr	r3, [r3, #0]
    9b52:	2b00      	cmp	r3, #0
    9b54:	d1e0      	bne.n	9b18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    9b56:	46c0      	nop			; (mov r8, r8)
    9b58:	46bd      	mov	sp, r7
    9b5a:	b002      	add	sp, #8
    9b5c:	bd80      	pop	{r7, pc}
    9b5e:	46c0      	nop			; (mov r8, r8)
    9b60:	0001a994 	.word	0x0001a994
    9b64:	0001a9c0 	.word	0x0001a9c0
    9b68:	0001a9a8 	.word	0x0001a9a8

00009b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    9b6c:	b580      	push	{r7, lr}
    9b6e:	b082      	sub	sp, #8
    9b70:	af00      	add	r7, sp, #0
    9b72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    9b74:	687b      	ldr	r3, [r7, #4]
    9b76:	2251      	movs	r2, #81	; 0x51
    9b78:	5c9b      	ldrb	r3, [r3, r2]
    9b7a:	2b00      	cmp	r3, #0
    9b7c:	d109      	bne.n	9b92 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9b82:	0018      	movs	r0, r3
    9b84:	f000 fa16 	bl	9fb4 <vPortFree>
				vPortFree( pxTCB );
    9b88:	687b      	ldr	r3, [r7, #4]
    9b8a:	0018      	movs	r0, r3
    9b8c:	f000 fa12 	bl	9fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    9b90:	e010      	b.n	9bb4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	2251      	movs	r2, #81	; 0x51
    9b96:	5c9b      	ldrb	r3, [r3, r2]
    9b98:	2b01      	cmp	r3, #1
    9b9a:	d104      	bne.n	9ba6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
    9b9c:	687b      	ldr	r3, [r7, #4]
    9b9e:	0018      	movs	r0, r3
    9ba0:	f000 fa08 	bl	9fb4 <vPortFree>
	}
    9ba4:	e006      	b.n	9bb4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	2251      	movs	r2, #81	; 0x51
    9baa:	5c9b      	ldrb	r3, [r3, r2]
    9bac:	2b02      	cmp	r3, #2
    9bae:	d001      	beq.n	9bb4 <prvDeleteTCB+0x48>
    9bb0:	b672      	cpsid	i
    9bb2:	e7fe      	b.n	9bb2 <prvDeleteTCB+0x46>
	}
    9bb4:	46c0      	nop			; (mov r8, r8)
    9bb6:	46bd      	mov	sp, r7
    9bb8:	b002      	add	sp, #8
    9bba:	bd80      	pop	{r7, pc}

00009bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    9bbc:	b580      	push	{r7, lr}
    9bbe:	b082      	sub	sp, #8
    9bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9bc2:	4b0e      	ldr	r3, [pc, #56]	; (9bfc <prvResetNextTaskUnblockTime+0x40>)
    9bc4:	681b      	ldr	r3, [r3, #0]
    9bc6:	681b      	ldr	r3, [r3, #0]
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d101      	bne.n	9bd0 <prvResetNextTaskUnblockTime+0x14>
    9bcc:	2301      	movs	r3, #1
    9bce:	e000      	b.n	9bd2 <prvResetNextTaskUnblockTime+0x16>
    9bd0:	2300      	movs	r3, #0
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d004      	beq.n	9be0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    9bd6:	4b0a      	ldr	r3, [pc, #40]	; (9c00 <prvResetNextTaskUnblockTime+0x44>)
    9bd8:	2201      	movs	r2, #1
    9bda:	4252      	negs	r2, r2
    9bdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    9bde:	e008      	b.n	9bf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    9be0:	4b06      	ldr	r3, [pc, #24]	; (9bfc <prvResetNextTaskUnblockTime+0x40>)
    9be2:	681b      	ldr	r3, [r3, #0]
    9be4:	68db      	ldr	r3, [r3, #12]
    9be6:	68db      	ldr	r3, [r3, #12]
    9be8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	685a      	ldr	r2, [r3, #4]
    9bee:	4b04      	ldr	r3, [pc, #16]	; (9c00 <prvResetNextTaskUnblockTime+0x44>)
    9bf0:	601a      	str	r2, [r3, #0]
}
    9bf2:	46c0      	nop			; (mov r8, r8)
    9bf4:	46bd      	mov	sp, r7
    9bf6:	b002      	add	sp, #8
    9bf8:	bd80      	pop	{r7, pc}
    9bfa:	46c0      	nop			; (mov r8, r8)
    9bfc:	0001a978 	.word	0x0001a978
    9c00:	0001a9e0 	.word	0x0001a9e0

00009c04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    9c04:	b580      	push	{r7, lr}
    9c06:	b084      	sub	sp, #16
    9c08:	af00      	add	r7, sp, #0
    9c0a:	6078      	str	r0, [r7, #4]
    9c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    9c0e:	4b21      	ldr	r3, [pc, #132]	; (9c94 <prvAddCurrentTaskToDelayedList+0x90>)
    9c10:	681b      	ldr	r3, [r3, #0]
    9c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9c14:	4b20      	ldr	r3, [pc, #128]	; (9c98 <prvAddCurrentTaskToDelayedList+0x94>)
    9c16:	681b      	ldr	r3, [r3, #0]
    9c18:	3304      	adds	r3, #4
    9c1a:	0018      	movs	r0, r3
    9c1c:	f7ff fb7d 	bl	931a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	3301      	adds	r3, #1
    9c24:	d10b      	bne.n	9c3e <prvAddCurrentTaskToDelayedList+0x3a>
    9c26:	683b      	ldr	r3, [r7, #0]
    9c28:	2b00      	cmp	r3, #0
    9c2a:	d008      	beq.n	9c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9c2c:	4b1a      	ldr	r3, [pc, #104]	; (9c98 <prvAddCurrentTaskToDelayedList+0x94>)
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	1d1a      	adds	r2, r3, #4
    9c32:	4b1a      	ldr	r3, [pc, #104]	; (9c9c <prvAddCurrentTaskToDelayedList+0x98>)
    9c34:	0011      	movs	r1, r2
    9c36:	0018      	movs	r0, r3
    9c38:	f7ff fb17 	bl	926a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9c3c:	e026      	b.n	9c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    9c3e:	68fa      	ldr	r2, [r7, #12]
    9c40:	687b      	ldr	r3, [r7, #4]
    9c42:	18d3      	adds	r3, r2, r3
    9c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9c46:	4b14      	ldr	r3, [pc, #80]	; (9c98 <prvAddCurrentTaskToDelayedList+0x94>)
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	68ba      	ldr	r2, [r7, #8]
    9c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    9c4e:	68ba      	ldr	r2, [r7, #8]
    9c50:	68fb      	ldr	r3, [r7, #12]
    9c52:	429a      	cmp	r2, r3
    9c54:	d209      	bcs.n	9c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9c56:	4b12      	ldr	r3, [pc, #72]	; (9ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
    9c58:	681a      	ldr	r2, [r3, #0]
    9c5a:	4b0f      	ldr	r3, [pc, #60]	; (9c98 <prvAddCurrentTaskToDelayedList+0x94>)
    9c5c:	681b      	ldr	r3, [r3, #0]
    9c5e:	3304      	adds	r3, #4
    9c60:	0019      	movs	r1, r3
    9c62:	0010      	movs	r0, r2
    9c64:	f7ff fb23 	bl	92ae <vListInsert>
}
    9c68:	e010      	b.n	9c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9c6a:	4b0e      	ldr	r3, [pc, #56]	; (9ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
    9c6c:	681a      	ldr	r2, [r3, #0]
    9c6e:	4b0a      	ldr	r3, [pc, #40]	; (9c98 <prvAddCurrentTaskToDelayedList+0x94>)
    9c70:	681b      	ldr	r3, [r3, #0]
    9c72:	3304      	adds	r3, #4
    9c74:	0019      	movs	r1, r3
    9c76:	0010      	movs	r0, r2
    9c78:	f7ff fb19 	bl	92ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    9c7c:	4b0a      	ldr	r3, [pc, #40]	; (9ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
    9c7e:	681b      	ldr	r3, [r3, #0]
    9c80:	68ba      	ldr	r2, [r7, #8]
    9c82:	429a      	cmp	r2, r3
    9c84:	d202      	bcs.n	9c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    9c86:	4b08      	ldr	r3, [pc, #32]	; (9ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
    9c88:	68ba      	ldr	r2, [r7, #8]
    9c8a:	601a      	str	r2, [r3, #0]
}
    9c8c:	46c0      	nop			; (mov r8, r8)
    9c8e:	46bd      	mov	sp, r7
    9c90:	b004      	add	sp, #16
    9c92:	bd80      	pop	{r7, pc}
    9c94:	0001a9c4 	.word	0x0001a9c4
    9c98:	0001a8c0 	.word	0x0001a8c0
    9c9c:	0001a9ac 	.word	0x0001a9ac
    9ca0:	0001a97c 	.word	0x0001a97c
    9ca4:	0001a978 	.word	0x0001a978
    9ca8:	0001a9e0 	.word	0x0001a9e0

00009cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    9cac:	b580      	push	{r7, lr}
    9cae:	b084      	sub	sp, #16
    9cb0:	af00      	add	r7, sp, #0
    9cb2:	60f8      	str	r0, [r7, #12]
    9cb4:	60b9      	str	r1, [r7, #8]
    9cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    9cb8:	68fb      	ldr	r3, [r7, #12]
    9cba:	3b04      	subs	r3, #4
    9cbc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    9cbe:	68fb      	ldr	r3, [r7, #12]
    9cc0:	2280      	movs	r2, #128	; 0x80
    9cc2:	0452      	lsls	r2, r2, #17
    9cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    9cc6:	68fb      	ldr	r3, [r7, #12]
    9cc8:	3b04      	subs	r3, #4
    9cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    9ccc:	68ba      	ldr	r2, [r7, #8]
    9cce:	68fb      	ldr	r3, [r7, #12]
    9cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    9cd2:	68fb      	ldr	r3, [r7, #12]
    9cd4:	3b04      	subs	r3, #4
    9cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    9cd8:	4a08      	ldr	r2, [pc, #32]	; (9cfc <pxPortInitialiseStack+0x50>)
    9cda:	68fb      	ldr	r3, [r7, #12]
    9cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    9cde:	68fb      	ldr	r3, [r7, #12]
    9ce0:	3b14      	subs	r3, #20
    9ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    9ce4:	687a      	ldr	r2, [r7, #4]
    9ce6:	68fb      	ldr	r3, [r7, #12]
    9ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    9cea:	68fb      	ldr	r3, [r7, #12]
    9cec:	3b20      	subs	r3, #32
    9cee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    9cf0:	68fb      	ldr	r3, [r7, #12]
}
    9cf2:	0018      	movs	r0, r3
    9cf4:	46bd      	mov	sp, r7
    9cf6:	b004      	add	sp, #16
    9cf8:	bd80      	pop	{r7, pc}
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	00009d01 	.word	0x00009d01

00009d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b082      	sub	sp, #8
    9d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    9d06:	2300      	movs	r3, #0
    9d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    9d0a:	4b07      	ldr	r3, [pc, #28]	; (9d28 <prvTaskExitError+0x28>)
    9d0c:	681b      	ldr	r3, [r3, #0]
    9d0e:	3301      	adds	r3, #1
    9d10:	d001      	beq.n	9d16 <prvTaskExitError+0x16>
    9d12:	b672      	cpsid	i
    9d14:	e7fe      	b.n	9d14 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    9d16:	b672      	cpsid	i
	while( ulDummy == 0 )
    9d18:	46c0      	nop			; (mov r8, r8)
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d0fc      	beq.n	9d1a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    9d20:	46c0      	nop			; (mov r8, r8)
    9d22:	46bd      	mov	sp, r7
    9d24:	b002      	add	sp, #8
    9d26:	bd80      	pop	{r7, pc}
    9d28:	0001a838 	.word	0x0001a838
    9d2c:	00000000 	.word	0x00000000

00009d30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    9d30:	4a0b      	ldr	r2, [pc, #44]	; (9d60 <pxCurrentTCBConst2>)
    9d32:	6813      	ldr	r3, [r2, #0]
    9d34:	6818      	ldr	r0, [r3, #0]
    9d36:	3020      	adds	r0, #32
    9d38:	f380 8809 	msr	PSP, r0
    9d3c:	2002      	movs	r0, #2
    9d3e:	f380 8814 	msr	CONTROL, r0
    9d42:	f3bf 8f6f 	isb	sy
    9d46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    9d48:	46ae      	mov	lr, r5
    9d4a:	bc08      	pop	{r3}
    9d4c:	bc04      	pop	{r2}
    9d4e:	b662      	cpsie	i
    9d50:	4718      	bx	r3
    9d52:	46c0      	nop			; (mov r8, r8)
    9d54:	46c0      	nop			; (mov r8, r8)
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	46c0      	nop			; (mov r8, r8)
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	46c0      	nop			; (mov r8, r8)
    9d5e:	46c0      	nop			; (mov r8, r8)

00009d60 <pxCurrentTCBConst2>:
    9d60:	0001a8c0 	.word	0x0001a8c0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    9d64:	46c0      	nop			; (mov r8, r8)
    9d66:	46c0      	nop			; (mov r8, r8)

00009d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    9d6c:	4b0e      	ldr	r3, [pc, #56]	; (9da8 <xPortStartScheduler+0x40>)
    9d6e:	681a      	ldr	r2, [r3, #0]
    9d70:	4b0d      	ldr	r3, [pc, #52]	; (9da8 <xPortStartScheduler+0x40>)
    9d72:	21ff      	movs	r1, #255	; 0xff
    9d74:	0409      	lsls	r1, r1, #16
    9d76:	430a      	orrs	r2, r1
    9d78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    9d7a:	4b0b      	ldr	r3, [pc, #44]	; (9da8 <xPortStartScheduler+0x40>)
    9d7c:	681a      	ldr	r2, [r3, #0]
    9d7e:	4b0a      	ldr	r3, [pc, #40]	; (9da8 <xPortStartScheduler+0x40>)
    9d80:	21ff      	movs	r1, #255	; 0xff
    9d82:	0609      	lsls	r1, r1, #24
    9d84:	430a      	orrs	r2, r1
    9d86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    9d88:	f000 f84c 	bl	9e24 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    9d8c:	4b07      	ldr	r3, [pc, #28]	; (9dac <xPortStartScheduler+0x44>)
    9d8e:	2200      	movs	r2, #0
    9d90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    9d92:	f7ff ffcd 	bl	9d30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    9d96:	f7ff fe15 	bl	99c4 <vTaskSwitchContext>
	prvTaskExitError();
    9d9a:	f7ff ffb1 	bl	9d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
    9d9e:	2300      	movs	r3, #0
}
    9da0:	0018      	movs	r0, r3
    9da2:	46bd      	mov	sp, r7
    9da4:	bd80      	pop	{r7, pc}
    9da6:	46c0      	nop			; (mov r8, r8)
    9da8:	e000ed20 	.word	0xe000ed20
    9dac:	0001a838 	.word	0x0001a838

00009db0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    9db0:	b580      	push	{r7, lr}
    9db2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    9db4:	4b05      	ldr	r3, [pc, #20]	; (9dcc <vPortYield+0x1c>)
    9db6:	2280      	movs	r2, #128	; 0x80
    9db8:	0552      	lsls	r2, r2, #21
    9dba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    9dbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    9dc0:	f3bf 8f6f 	isb	sy
}
    9dc4:	46c0      	nop			; (mov r8, r8)
    9dc6:	46bd      	mov	sp, r7
    9dc8:	bd80      	pop	{r7, pc}
    9dca:	46c0      	nop			; (mov r8, r8)
    9dcc:	e000ed04 	.word	0xe000ed04

00009dd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    9dd0:	b580      	push	{r7, lr}
    9dd2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    9dd4:	b672      	cpsid	i
    uxCriticalNesting++;
    9dd6:	4b06      	ldr	r3, [pc, #24]	; (9df0 <vPortEnterCritical+0x20>)
    9dd8:	681b      	ldr	r3, [r3, #0]
    9dda:	1c5a      	adds	r2, r3, #1
    9ddc:	4b04      	ldr	r3, [pc, #16]	; (9df0 <vPortEnterCritical+0x20>)
    9dde:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    9de0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    9de4:	f3bf 8f6f 	isb	sy
}
    9de8:	46c0      	nop			; (mov r8, r8)
    9dea:	46bd      	mov	sp, r7
    9dec:	bd80      	pop	{r7, pc}
    9dee:	46c0      	nop			; (mov r8, r8)
    9df0:	0001a838 	.word	0x0001a838

00009df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    9df4:	b580      	push	{r7, lr}
    9df6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    9df8:	4b09      	ldr	r3, [pc, #36]	; (9e20 <vPortExitCritical+0x2c>)
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d101      	bne.n	9e04 <vPortExitCritical+0x10>
    9e00:	b672      	cpsid	i
    9e02:	e7fe      	b.n	9e02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    9e04:	4b06      	ldr	r3, [pc, #24]	; (9e20 <vPortExitCritical+0x2c>)
    9e06:	681b      	ldr	r3, [r3, #0]
    9e08:	1e5a      	subs	r2, r3, #1
    9e0a:	4b05      	ldr	r3, [pc, #20]	; (9e20 <vPortExitCritical+0x2c>)
    9e0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    9e0e:	4b04      	ldr	r3, [pc, #16]	; (9e20 <vPortExitCritical+0x2c>)
    9e10:	681b      	ldr	r3, [r3, #0]
    9e12:	2b00      	cmp	r3, #0
    9e14:	d100      	bne.n	9e18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    9e16:	b662      	cpsie	i
    }
}
    9e18:	46c0      	nop			; (mov r8, r8)
    9e1a:	46bd      	mov	sp, r7
    9e1c:	bd80      	pop	{r7, pc}
    9e1e:	46c0      	nop			; (mov r8, r8)
    9e20:	0001a838 	.word	0x0001a838

00009e24 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    9e24:	b580      	push	{r7, lr}
    9e26:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
    9e28:	4b0b      	ldr	r3, [pc, #44]	; (9e58 <prvSetupTimerInterrupt+0x34>)
    9e2a:	2200      	movs	r2, #0
    9e2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
    9e2e:	4b0b      	ldr	r3, [pc, #44]	; (9e5c <prvSetupTimerInterrupt+0x38>)
    9e30:	2200      	movs	r2, #0
    9e32:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    9e34:	4b0a      	ldr	r3, [pc, #40]	; (9e60 <prvSetupTimerInterrupt+0x3c>)
    9e36:	681a      	ldr	r2, [r3, #0]
    9e38:	23fa      	movs	r3, #250	; 0xfa
    9e3a:	0099      	lsls	r1, r3, #2
    9e3c:	0010      	movs	r0, r2
    9e3e:	f000 fc09 	bl	a654 <__udivsi3>
    9e42:	0003      	movs	r3, r0
    9e44:	001a      	movs	r2, r3
    9e46:	4b07      	ldr	r3, [pc, #28]	; (9e64 <prvSetupTimerInterrupt+0x40>)
    9e48:	3a01      	subs	r2, #1
    9e4a:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    9e4c:	4b02      	ldr	r3, [pc, #8]	; (9e58 <prvSetupTimerInterrupt+0x34>)
    9e4e:	2207      	movs	r2, #7
    9e50:	601a      	str	r2, [r3, #0]
}
    9e52:	46c0      	nop			; (mov r8, r8)
    9e54:	46bd      	mov	sp, r7
    9e56:	bd80      	pop	{r7, pc}
    9e58:	e000e010 	.word	0xe000e010
    9e5c:	e000e018 	.word	0xe000e018
    9e60:	0001a83c 	.word	0x0001a83c
    9e64:	e000e014 	.word	0xe000e014

00009e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    9e68:	b580      	push	{r7, lr}
    9e6a:	b086      	sub	sp, #24
    9e6c:	af00      	add	r7, sp, #0
    9e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    9e70:	2300      	movs	r3, #0
    9e72:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
    9e74:	f7ff fc5a 	bl	972c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    9e78:	4b49      	ldr	r3, [pc, #292]	; (9fa0 <pvPortMalloc+0x138>)
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d101      	bne.n	9e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    9e80:	f000 f8e0 	bl	a044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    9e84:	4b47      	ldr	r3, [pc, #284]	; (9fa4 <pvPortMalloc+0x13c>)
    9e86:	681b      	ldr	r3, [r3, #0]
    9e88:	687a      	ldr	r2, [r7, #4]
    9e8a:	4013      	ands	r3, r2
    9e8c:	d000      	beq.n	9e90 <pvPortMalloc+0x28>
    9e8e:	e079      	b.n	9f84 <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	2b00      	cmp	r3, #0
    9e94:	d012      	beq.n	9ebc <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
    9e96:	2208      	movs	r2, #8
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	189b      	adds	r3, r3, r2
    9e9c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    9e9e:	687b      	ldr	r3, [r7, #4]
    9ea0:	2207      	movs	r2, #7
    9ea2:	4013      	ands	r3, r2
    9ea4:	d00a      	beq.n	9ebc <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	2207      	movs	r2, #7
    9eaa:	4393      	bics	r3, r2
    9eac:	3308      	adds	r3, #8
    9eae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    9eb0:	687b      	ldr	r3, [r7, #4]
    9eb2:	2207      	movs	r2, #7
    9eb4:	4013      	ands	r3, r2
    9eb6:	d001      	beq.n	9ebc <pvPortMalloc+0x54>
    9eb8:	b672      	cpsid	i
    9eba:	e7fe      	b.n	9eba <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	d060      	beq.n	9f84 <pvPortMalloc+0x11c>
    9ec2:	4b39      	ldr	r3, [pc, #228]	; (9fa8 <pvPortMalloc+0x140>)
    9ec4:	681b      	ldr	r3, [r3, #0]
    9ec6:	687a      	ldr	r2, [r7, #4]
    9ec8:	429a      	cmp	r2, r3
    9eca:	d85b      	bhi.n	9f84 <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    9ecc:	4b37      	ldr	r3, [pc, #220]	; (9fac <pvPortMalloc+0x144>)
    9ece:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
    9ed0:	4b36      	ldr	r3, [pc, #216]	; (9fac <pvPortMalloc+0x144>)
    9ed2:	681b      	ldr	r3, [r3, #0]
    9ed4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    9ed6:	e004      	b.n	9ee2 <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
    9ed8:	697b      	ldr	r3, [r7, #20]
    9eda:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
    9edc:	697b      	ldr	r3, [r7, #20]
    9ede:	681b      	ldr	r3, [r3, #0]
    9ee0:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    9ee2:	697b      	ldr	r3, [r7, #20]
    9ee4:	685b      	ldr	r3, [r3, #4]
    9ee6:	687a      	ldr	r2, [r7, #4]
    9ee8:	429a      	cmp	r2, r3
    9eea:	d903      	bls.n	9ef4 <pvPortMalloc+0x8c>
    9eec:	697b      	ldr	r3, [r7, #20]
    9eee:	681b      	ldr	r3, [r3, #0]
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d1f1      	bne.n	9ed8 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    9ef4:	4b2a      	ldr	r3, [pc, #168]	; (9fa0 <pvPortMalloc+0x138>)
    9ef6:	681b      	ldr	r3, [r3, #0]
    9ef8:	697a      	ldr	r2, [r7, #20]
    9efa:	429a      	cmp	r2, r3
    9efc:	d042      	beq.n	9f84 <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    9efe:	693b      	ldr	r3, [r7, #16]
    9f00:	681b      	ldr	r3, [r3, #0]
    9f02:	2208      	movs	r2, #8
    9f04:	189b      	adds	r3, r3, r2
    9f06:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    9f08:	697b      	ldr	r3, [r7, #20]
    9f0a:	681a      	ldr	r2, [r3, #0]
    9f0c:	693b      	ldr	r3, [r7, #16]
    9f0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    9f10:	697b      	ldr	r3, [r7, #20]
    9f12:	685a      	ldr	r2, [r3, #4]
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	1ad2      	subs	r2, r2, r3
    9f18:	2308      	movs	r3, #8
    9f1a:	005b      	lsls	r3, r3, #1
    9f1c:	429a      	cmp	r2, r3
    9f1e:	d916      	bls.n	9f4e <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    9f20:	697a      	ldr	r2, [r7, #20]
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	18d3      	adds	r3, r2, r3
    9f26:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    9f28:	68bb      	ldr	r3, [r7, #8]
    9f2a:	2207      	movs	r2, #7
    9f2c:	4013      	ands	r3, r2
    9f2e:	d001      	beq.n	9f34 <pvPortMalloc+0xcc>
    9f30:	b672      	cpsid	i
    9f32:	e7fe      	b.n	9f32 <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    9f34:	697b      	ldr	r3, [r7, #20]
    9f36:	685a      	ldr	r2, [r3, #4]
    9f38:	687b      	ldr	r3, [r7, #4]
    9f3a:	1ad2      	subs	r2, r2, r3
    9f3c:	68bb      	ldr	r3, [r7, #8]
    9f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    9f40:	697b      	ldr	r3, [r7, #20]
    9f42:	687a      	ldr	r2, [r7, #4]
    9f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    9f46:	68bb      	ldr	r3, [r7, #8]
    9f48:	0018      	movs	r0, r3
    9f4a:	f000 f8db 	bl	a104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    9f4e:	4b16      	ldr	r3, [pc, #88]	; (9fa8 <pvPortMalloc+0x140>)
    9f50:	681a      	ldr	r2, [r3, #0]
    9f52:	697b      	ldr	r3, [r7, #20]
    9f54:	685b      	ldr	r3, [r3, #4]
    9f56:	1ad2      	subs	r2, r2, r3
    9f58:	4b13      	ldr	r3, [pc, #76]	; (9fa8 <pvPortMalloc+0x140>)
    9f5a:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    9f5c:	4b12      	ldr	r3, [pc, #72]	; (9fa8 <pvPortMalloc+0x140>)
    9f5e:	681a      	ldr	r2, [r3, #0]
    9f60:	4b13      	ldr	r3, [pc, #76]	; (9fb0 <pvPortMalloc+0x148>)
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	429a      	cmp	r2, r3
    9f66:	d203      	bcs.n	9f70 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    9f68:	4b0f      	ldr	r3, [pc, #60]	; (9fa8 <pvPortMalloc+0x140>)
    9f6a:	681a      	ldr	r2, [r3, #0]
    9f6c:	4b10      	ldr	r3, [pc, #64]	; (9fb0 <pvPortMalloc+0x148>)
    9f6e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    9f70:	697b      	ldr	r3, [r7, #20]
    9f72:	685a      	ldr	r2, [r3, #4]
    9f74:	4b0b      	ldr	r3, [pc, #44]	; (9fa4 <pvPortMalloc+0x13c>)
    9f76:	681b      	ldr	r3, [r3, #0]
    9f78:	431a      	orrs	r2, r3
    9f7a:	697b      	ldr	r3, [r7, #20]
    9f7c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    9f7e:	697b      	ldr	r3, [r7, #20]
    9f80:	2200      	movs	r2, #0
    9f82:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    9f84:	f7ff fbde 	bl	9744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    9f88:	68fb      	ldr	r3, [r7, #12]
    9f8a:	2207      	movs	r2, #7
    9f8c:	4013      	ands	r3, r2
    9f8e:	d001      	beq.n	9f94 <pvPortMalloc+0x12c>
    9f90:	b672      	cpsid	i
    9f92:	e7fe      	b.n	9f92 <pvPortMalloc+0x12a>
	return pvReturn;
    9f94:	68fb      	ldr	r3, [r7, #12]
}
    9f96:	0018      	movs	r0, r3
    9f98:	46bd      	mov	sp, r7
    9f9a:	b006      	add	sp, #24
    9f9c:	bd80      	pop	{r7, pc}
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	0001b5f4 	.word	0x0001b5f4
    9fa4:	0001b600 	.word	0x0001b600
    9fa8:	0001b5f8 	.word	0x0001b5f8
    9fac:	0001b5ec 	.word	0x0001b5ec
    9fb0:	0001b5fc 	.word	0x0001b5fc

00009fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    9fb4:	b580      	push	{r7, lr}
    9fb6:	b084      	sub	sp, #16
    9fb8:	af00      	add	r7, sp, #0
    9fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    9fbc:	687b      	ldr	r3, [r7, #4]
    9fbe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d035      	beq.n	a032 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    9fc6:	2308      	movs	r3, #8
    9fc8:	425b      	negs	r3, r3
    9fca:	68fa      	ldr	r2, [r7, #12]
    9fcc:	18d3      	adds	r3, r2, r3
    9fce:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    9fd0:	68fb      	ldr	r3, [r7, #12]
    9fd2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    9fd4:	68bb      	ldr	r3, [r7, #8]
    9fd6:	685a      	ldr	r2, [r3, #4]
    9fd8:	4b18      	ldr	r3, [pc, #96]	; (a03c <vPortFree+0x88>)
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	4013      	ands	r3, r2
    9fde:	d101      	bne.n	9fe4 <vPortFree+0x30>
    9fe0:	b672      	cpsid	i
    9fe2:	e7fe      	b.n	9fe2 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    9fe4:	68bb      	ldr	r3, [r7, #8]
    9fe6:	681b      	ldr	r3, [r3, #0]
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d001      	beq.n	9ff0 <vPortFree+0x3c>
    9fec:	b672      	cpsid	i
    9fee:	e7fe      	b.n	9fee <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    9ff0:	68bb      	ldr	r3, [r7, #8]
    9ff2:	685a      	ldr	r2, [r3, #4]
    9ff4:	4b11      	ldr	r3, [pc, #68]	; (a03c <vPortFree+0x88>)
    9ff6:	681b      	ldr	r3, [r3, #0]
    9ff8:	4013      	ands	r3, r2
    9ffa:	d01a      	beq.n	a032 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    9ffc:	68bb      	ldr	r3, [r7, #8]
    9ffe:	681b      	ldr	r3, [r3, #0]
    a000:	2b00      	cmp	r3, #0
    a002:	d116      	bne.n	a032 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    a004:	68bb      	ldr	r3, [r7, #8]
    a006:	685a      	ldr	r2, [r3, #4]
    a008:	4b0c      	ldr	r3, [pc, #48]	; (a03c <vPortFree+0x88>)
    a00a:	681b      	ldr	r3, [r3, #0]
    a00c:	43db      	mvns	r3, r3
    a00e:	401a      	ands	r2, r3
    a010:	68bb      	ldr	r3, [r7, #8]
    a012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    a014:	f7ff fb8a 	bl	972c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    a018:	68bb      	ldr	r3, [r7, #8]
    a01a:	685a      	ldr	r2, [r3, #4]
    a01c:	4b08      	ldr	r3, [pc, #32]	; (a040 <vPortFree+0x8c>)
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	18d2      	adds	r2, r2, r3
    a022:	4b07      	ldr	r3, [pc, #28]	; (a040 <vPortFree+0x8c>)
    a024:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    a026:	68bb      	ldr	r3, [r7, #8]
    a028:	0018      	movs	r0, r3
    a02a:	f000 f86b 	bl	a104 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    a02e:	f7ff fb89 	bl	9744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    a032:	46c0      	nop			; (mov r8, r8)
    a034:	46bd      	mov	sp, r7
    a036:	b004      	add	sp, #16
    a038:	bd80      	pop	{r7, pc}
    a03a:	46c0      	nop			; (mov r8, r8)
    a03c:	0001b600 	.word	0x0001b600
    a040:	0001b5f8 	.word	0x0001b5f8

0000a044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    a044:	b580      	push	{r7, lr}
    a046:	b084      	sub	sp, #16
    a048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    a04a:	23c0      	movs	r3, #192	; 0xc0
    a04c:	011b      	lsls	r3, r3, #4
    a04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    a050:	4b26      	ldr	r3, [pc, #152]	; (a0ec <prvHeapInit+0xa8>)
    a052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    a054:	68fb      	ldr	r3, [r7, #12]
    a056:	2207      	movs	r2, #7
    a058:	4013      	ands	r3, r2
    a05a:	d00c      	beq.n	a076 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    a05c:	68fb      	ldr	r3, [r7, #12]
    a05e:	3307      	adds	r3, #7
    a060:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    a062:	68fb      	ldr	r3, [r7, #12]
    a064:	2207      	movs	r2, #7
    a066:	4393      	bics	r3, r2
    a068:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    a06a:	68ba      	ldr	r2, [r7, #8]
    a06c:	68fb      	ldr	r3, [r7, #12]
    a06e:	1ad2      	subs	r2, r2, r3
    a070:	4b1e      	ldr	r3, [pc, #120]	; (a0ec <prvHeapInit+0xa8>)
    a072:	18d3      	adds	r3, r2, r3
    a074:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    a076:	68fb      	ldr	r3, [r7, #12]
    a078:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    a07a:	4b1d      	ldr	r3, [pc, #116]	; (a0f0 <prvHeapInit+0xac>)
    a07c:	687a      	ldr	r2, [r7, #4]
    a07e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
    a080:	4b1b      	ldr	r3, [pc, #108]	; (a0f0 <prvHeapInit+0xac>)
    a082:	2200      	movs	r2, #0
    a084:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	68ba      	ldr	r2, [r7, #8]
    a08a:	18d3      	adds	r3, r2, r3
    a08c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    a08e:	2208      	movs	r2, #8
    a090:	68fb      	ldr	r3, [r7, #12]
    a092:	1a9b      	subs	r3, r3, r2
    a094:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	2207      	movs	r2, #7
    a09a:	4393      	bics	r3, r2
    a09c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    a09e:	68fa      	ldr	r2, [r7, #12]
    a0a0:	4b14      	ldr	r3, [pc, #80]	; (a0f4 <prvHeapInit+0xb0>)
    a0a2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
    a0a4:	4b13      	ldr	r3, [pc, #76]	; (a0f4 <prvHeapInit+0xb0>)
    a0a6:	681b      	ldr	r3, [r3, #0]
    a0a8:	2200      	movs	r2, #0
    a0aa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    a0ac:	4b11      	ldr	r3, [pc, #68]	; (a0f4 <prvHeapInit+0xb0>)
    a0ae:	681b      	ldr	r3, [r3, #0]
    a0b0:	2200      	movs	r2, #0
    a0b2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    a0b4:	687b      	ldr	r3, [r7, #4]
    a0b6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    a0b8:	683b      	ldr	r3, [r7, #0]
    a0ba:	68fa      	ldr	r2, [r7, #12]
    a0bc:	1ad2      	subs	r2, r2, r3
    a0be:	683b      	ldr	r3, [r7, #0]
    a0c0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    a0c2:	4b0c      	ldr	r3, [pc, #48]	; (a0f4 <prvHeapInit+0xb0>)
    a0c4:	681a      	ldr	r2, [r3, #0]
    a0c6:	683b      	ldr	r3, [r7, #0]
    a0c8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    a0ca:	683b      	ldr	r3, [r7, #0]
    a0cc:	685a      	ldr	r2, [r3, #4]
    a0ce:	4b0a      	ldr	r3, [pc, #40]	; (a0f8 <prvHeapInit+0xb4>)
    a0d0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    a0d2:	683b      	ldr	r3, [r7, #0]
    a0d4:	685a      	ldr	r2, [r3, #4]
    a0d6:	4b09      	ldr	r3, [pc, #36]	; (a0fc <prvHeapInit+0xb8>)
    a0d8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    a0da:	4b09      	ldr	r3, [pc, #36]	; (a100 <prvHeapInit+0xbc>)
    a0dc:	2280      	movs	r2, #128	; 0x80
    a0de:	0612      	lsls	r2, r2, #24
    a0e0:	601a      	str	r2, [r3, #0]
}
    a0e2:	46c0      	nop			; (mov r8, r8)
    a0e4:	46bd      	mov	sp, r7
    a0e6:	b004      	add	sp, #16
    a0e8:	bd80      	pop	{r7, pc}
    a0ea:	46c0      	nop			; (mov r8, r8)
    a0ec:	0001a9ec 	.word	0x0001a9ec
    a0f0:	0001b5ec 	.word	0x0001b5ec
    a0f4:	0001b5f4 	.word	0x0001b5f4
    a0f8:	0001b5fc 	.word	0x0001b5fc
    a0fc:	0001b5f8 	.word	0x0001b5f8
    a100:	0001b600 	.word	0x0001b600

0000a104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    a104:	b580      	push	{r7, lr}
    a106:	b084      	sub	sp, #16
    a108:	af00      	add	r7, sp, #0
    a10a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    a10c:	4b27      	ldr	r3, [pc, #156]	; (a1ac <prvInsertBlockIntoFreeList+0xa8>)
    a10e:	60fb      	str	r3, [r7, #12]
    a110:	e002      	b.n	a118 <prvInsertBlockIntoFreeList+0x14>
    a112:	68fb      	ldr	r3, [r7, #12]
    a114:	681b      	ldr	r3, [r3, #0]
    a116:	60fb      	str	r3, [r7, #12]
    a118:	68fb      	ldr	r3, [r7, #12]
    a11a:	681b      	ldr	r3, [r3, #0]
    a11c:	687a      	ldr	r2, [r7, #4]
    a11e:	429a      	cmp	r2, r3
    a120:	d8f7      	bhi.n	a112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    a122:	68fb      	ldr	r3, [r7, #12]
    a124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    a126:	68fb      	ldr	r3, [r7, #12]
    a128:	685b      	ldr	r3, [r3, #4]
    a12a:	68ba      	ldr	r2, [r7, #8]
    a12c:	18d3      	adds	r3, r2, r3
    a12e:	687a      	ldr	r2, [r7, #4]
    a130:	429a      	cmp	r2, r3
    a132:	d108      	bne.n	a146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    a134:	68fb      	ldr	r3, [r7, #12]
    a136:	685a      	ldr	r2, [r3, #4]
    a138:	687b      	ldr	r3, [r7, #4]
    a13a:	685b      	ldr	r3, [r3, #4]
    a13c:	18d2      	adds	r2, r2, r3
    a13e:	68fb      	ldr	r3, [r7, #12]
    a140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    a142:	68fb      	ldr	r3, [r7, #12]
    a144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	685b      	ldr	r3, [r3, #4]
    a14e:	68ba      	ldr	r2, [r7, #8]
    a150:	18d2      	adds	r2, r2, r3
    a152:	68fb      	ldr	r3, [r7, #12]
    a154:	681b      	ldr	r3, [r3, #0]
    a156:	429a      	cmp	r2, r3
    a158:	d118      	bne.n	a18c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    a15a:	68fb      	ldr	r3, [r7, #12]
    a15c:	681a      	ldr	r2, [r3, #0]
    a15e:	4b14      	ldr	r3, [pc, #80]	; (a1b0 <prvInsertBlockIntoFreeList+0xac>)
    a160:	681b      	ldr	r3, [r3, #0]
    a162:	429a      	cmp	r2, r3
    a164:	d00d      	beq.n	a182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	685a      	ldr	r2, [r3, #4]
    a16a:	68fb      	ldr	r3, [r7, #12]
    a16c:	681b      	ldr	r3, [r3, #0]
    a16e:	685b      	ldr	r3, [r3, #4]
    a170:	18d2      	adds	r2, r2, r3
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    a176:	68fb      	ldr	r3, [r7, #12]
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	681a      	ldr	r2, [r3, #0]
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	601a      	str	r2, [r3, #0]
    a180:	e008      	b.n	a194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    a182:	4b0b      	ldr	r3, [pc, #44]	; (a1b0 <prvInsertBlockIntoFreeList+0xac>)
    a184:	681a      	ldr	r2, [r3, #0]
    a186:	687b      	ldr	r3, [r7, #4]
    a188:	601a      	str	r2, [r3, #0]
    a18a:	e003      	b.n	a194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    a18c:	68fb      	ldr	r3, [r7, #12]
    a18e:	681a      	ldr	r2, [r3, #0]
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    a194:	68fa      	ldr	r2, [r7, #12]
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	429a      	cmp	r2, r3
    a19a:	d002      	beq.n	a1a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    a19c:	68fb      	ldr	r3, [r7, #12]
    a19e:	687a      	ldr	r2, [r7, #4]
    a1a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    a1a2:	46c0      	nop			; (mov r8, r8)
    a1a4:	46bd      	mov	sp, r7
    a1a6:	b004      	add	sp, #16
    a1a8:	bd80      	pop	{r7, pc}
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	0001b5ec 	.word	0x0001b5ec
    a1b0:	0001b5f4 	.word	0x0001b5f4

0000a1b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b084      	sub	sp, #16
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	60f8      	str	r0, [r7, #12]
    a1bc:	60b9      	str	r1, [r7, #8]
    a1be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
    a1c0:	68fb      	ldr	r3, [r7, #12]
    a1c2:	4a06      	ldr	r2, [pc, #24]	; (a1dc <vApplicationGetIdleTaskMemory+0x28>)
    a1c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
    a1c6:	68bb      	ldr	r3, [r7, #8]
    a1c8:	4a05      	ldr	r2, [pc, #20]	; (a1e0 <vApplicationGetIdleTaskMemory+0x2c>)
    a1ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	2280      	movs	r2, #128	; 0x80
    a1d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	46bd      	mov	sp, r7
    a1d6:	b004      	add	sp, #16
    a1d8:	bd80      	pop	{r7, pc}
    a1da:	46c0      	nop			; (mov r8, r8)
    a1dc:	0001b604 	.word	0x0001b604
    a1e0:	0001b658 	.word	0x0001b658

0000a1e4 <shieldConfig>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void shieldConfig(){
    a1e4:	b580      	push	{r7, lr}
    a1e6:	af00      	add	r7, sp, #0
	#define GPIOB_MODER (*(unsigned int*) (0x48000400)) // mode register
	#define GPIOB_ODR (*(unsigned int*) (0x48000414)) // output data register
	#define PUPDR (*(unsigned int*) (0x4800040C)) // Pull up/Pull down register
	#define GPIOB_IDR (*(unsigned int*) (0x48000410)) //input data register

	RCC_AHBENR |= (1 << 18);
    a1e8:	4b0b      	ldr	r3, [pc, #44]	; (a218 <shieldConfig+0x34>)
    a1ea:	681a      	ldr	r2, [r3, #0]
    a1ec:	4b0a      	ldr	r3, [pc, #40]	; (a218 <shieldConfig+0x34>)
    a1ee:	2180      	movs	r1, #128	; 0x80
    a1f0:	02c9      	lsls	r1, r1, #11
    a1f2:	430a      	orrs	r2, r1
    a1f4:	601a      	str	r2, [r3, #0]
	GPIOB_MODER |= 0x1540;
    a1f6:	4b09      	ldr	r3, [pc, #36]	; (a21c <shieldConfig+0x38>)
    a1f8:	681a      	ldr	r2, [r3, #0]
    a1fa:	4b08      	ldr	r3, [pc, #32]	; (a21c <shieldConfig+0x38>)
    a1fc:	21aa      	movs	r1, #170	; 0xaa
    a1fe:	0149      	lsls	r1, r1, #5
    a200:	430a      	orrs	r2, r1
    a202:	601a      	str	r2, [r3, #0]
	PUPDR |= (1 << 19);
    a204:	4b06      	ldr	r3, [pc, #24]	; (a220 <shieldConfig+0x3c>)
    a206:	681a      	ldr	r2, [r3, #0]
    a208:	4b05      	ldr	r3, [pc, #20]	; (a220 <shieldConfig+0x3c>)
    a20a:	2180      	movs	r1, #128	; 0x80
    a20c:	0309      	lsls	r1, r1, #12
    a20e:	430a      	orrs	r2, r1
    a210:	601a      	str	r2, [r3, #0]
}
    a212:	46c0      	nop			; (mov r8, r8)
    a214:	46bd      	mov	sp, r7
    a216:	bd80      	pop	{r7, pc}
    a218:	40021014 	.word	0x40021014
    a21c:	48000400 	.word	0x48000400
    a220:	4800040c 	.word	0x4800040c

0000a224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    a224:	b590      	push	{r4, r7, lr}
    a226:	b08d      	sub	sp, #52	; 0x34
    a228:	af02      	add	r7, sp, #8
TaskHandle_t task1_handle;
TaskHandle_t task2_handle;

BaseType_t status;

shieldConfig();
    a22a:	f7ff ffdb 	bl	a1e4 <shieldConfig>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    a22e:	f7fd ff65 	bl	80fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    a232:	f000 f84d 	bl	a2d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    a236:	f000 f895 	bl	a364 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(task1_handler, "Task_1", 200, "Hello World from task 1", 2, &task1_handle );
    a23a:	4a1d      	ldr	r2, [pc, #116]	; (a2b0 <main+0x8c>)
    a23c:	491d      	ldr	r1, [pc, #116]	; (a2b4 <main+0x90>)
    a23e:	481e      	ldr	r0, [pc, #120]	; (a2b8 <main+0x94>)
    a240:	2320      	movs	r3, #32
    a242:	18fb      	adds	r3, r7, r3
    a244:	9301      	str	r3, [sp, #4]
    a246:	2302      	movs	r3, #2
    a248:	9300      	str	r3, [sp, #0]
    a24a:	0013      	movs	r3, r2
    a24c:	22c8      	movs	r2, #200	; 0xc8
    a24e:	f7ff f8cf 	bl	93f0 <xTaskCreate>
    a252:	0003      	movs	r3, r0
    a254:	627b      	str	r3, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
    a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a258:	2b01      	cmp	r3, #1
    a25a:	d001      	beq.n	a260 <main+0x3c>
    a25c:	b672      	cpsid	i
    a25e:	e7fe      	b.n	a25e <main+0x3a>

  status = xTaskCreate(task2_handler, "Task_2", 200, "Hello World from task 2", 2, &task2_handle );
    a260:	4a16      	ldr	r2, [pc, #88]	; (a2bc <main+0x98>)
    a262:	4917      	ldr	r1, [pc, #92]	; (a2c0 <main+0x9c>)
    a264:	4817      	ldr	r0, [pc, #92]	; (a2c4 <main+0xa0>)
    a266:	231c      	movs	r3, #28
    a268:	18fb      	adds	r3, r7, r3
    a26a:	9301      	str	r3, [sp, #4]
    a26c:	2302      	movs	r3, #2
    a26e:	9300      	str	r3, [sp, #0]
    a270:	0013      	movs	r3, r2
    a272:	22c8      	movs	r2, #200	; 0xc8
    a274:	f7ff f8bc 	bl	93f0 <xTaskCreate>
    a278:	0003      	movs	r3, r0
    a27a:	627b      	str	r3, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
    a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a27e:	2b01      	cmp	r3, #1
    a280:	d001      	beq.n	a286 <main+0x62>
    a282:	b672      	cpsid	i
    a284:	e7fe      	b.n	a284 <main+0x60>


  // start the freertos scheduler

  vTaskStartScheduler();
    a286:	f7ff fa03 	bl	9690 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
    a28a:	003b      	movs	r3, r7
    a28c:	4a0e      	ldr	r2, [pc, #56]	; (a2c8 <main+0xa4>)
    a28e:	ca13      	ldmia	r2!, {r0, r1, r4}
    a290:	c313      	stmia	r3!, {r0, r1, r4}
    a292:	ca13      	ldmia	r2!, {r0, r1, r4}
    a294:	c313      	stmia	r3!, {r0, r1, r4}
    a296:	6812      	ldr	r2, [r2, #0]
    a298:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
    a29a:	003b      	movs	r3, r7
    a29c:	2100      	movs	r1, #0
    a29e:	0018      	movs	r0, r3
    a2a0:	f7fe ff59 	bl	9156 <osThreadCreate>
    a2a4:	0002      	movs	r2, r0
    a2a6:	4b09      	ldr	r3, [pc, #36]	; (a2cc <main+0xa8>)
    a2a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
    a2aa:	f7fe ff4c 	bl	9146 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    a2ae:	e7fe      	b.n	a2ae <main+0x8a>
    a2b0:	0000a7a0 	.word	0x0000a7a0
    a2b4:	0000a7b8 	.word	0x0000a7b8
    a2b8:	0000a465 	.word	0x0000a465
    a2bc:	0000a7c0 	.word	0x0000a7c0
    a2c0:	0000a7d8 	.word	0x0000a7d8
    a2c4:	0000a481 	.word	0x0000a481
    a2c8:	0000a7ec 	.word	0x0000a7ec
    a2cc:	0001b85c 	.word	0x0001b85c

0000a2d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    a2d0:	b590      	push	{r4, r7, lr}
    a2d2:	b091      	sub	sp, #68	; 0x44
    a2d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    a2d6:	2410      	movs	r4, #16
    a2d8:	193b      	adds	r3, r7, r4
    a2da:	0018      	movs	r0, r3
    a2dc:	2330      	movs	r3, #48	; 0x30
    a2de:	001a      	movs	r2, r3
    a2e0:	2100      	movs	r1, #0
    a2e2:	f000 f9af 	bl	a644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    a2e6:	003b      	movs	r3, r7
    a2e8:	0018      	movs	r0, r3
    a2ea:	2310      	movs	r3, #16
    a2ec:	001a      	movs	r2, r3
    a2ee:	2100      	movs	r1, #0
    a2f0:	f000 f9a8 	bl	a644 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    a2f4:	0021      	movs	r1, r4
    a2f6:	187b      	adds	r3, r7, r1
    a2f8:	2202      	movs	r2, #2
    a2fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    a2fc:	187b      	adds	r3, r7, r1
    a2fe:	2201      	movs	r2, #1
    a300:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    a302:	187b      	adds	r3, r7, r1
    a304:	2210      	movs	r2, #16
    a306:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    a308:	187b      	adds	r3, r7, r1
    a30a:	2202      	movs	r2, #2
    a30c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    a30e:	187b      	adds	r3, r7, r1
    a310:	2200      	movs	r2, #0
    a312:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
    a314:	187b      	adds	r3, r7, r1
    a316:	22a0      	movs	r2, #160	; 0xa0
    a318:	0392      	lsls	r2, r2, #14
    a31a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
    a31c:	187b      	adds	r3, r7, r1
    a31e:	2200      	movs	r2, #0
    a320:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    a322:	187b      	adds	r3, r7, r1
    a324:	0018      	movs	r0, r3
    a326:	f7fe f943 	bl	85b0 <HAL_RCC_OscConfig>
    a32a:	1e03      	subs	r3, r0, #0
    a32c:	d001      	beq.n	a332 <SystemClock_Config+0x62>
  {
    Error_Handler();
    a32e:	f000 f8bd 	bl	a4ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    a332:	003b      	movs	r3, r7
    a334:	2207      	movs	r2, #7
    a336:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    a338:	003b      	movs	r3, r7
    a33a:	2202      	movs	r2, #2
    a33c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    a33e:	003b      	movs	r3, r7
    a340:	2200      	movs	r2, #0
    a342:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    a344:	003b      	movs	r3, r7
    a346:	2200      	movs	r2, #0
    a348:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
    a34a:	003b      	movs	r3, r7
    a34c:	2101      	movs	r1, #1
    a34e:	0018      	movs	r0, r3
    a350:	f7fe fc4a 	bl	8be8 <HAL_RCC_ClockConfig>
    a354:	1e03      	subs	r3, r0, #0
    a356:	d001      	beq.n	a35c <SystemClock_Config+0x8c>
  {
    Error_Handler();
    a358:	f000 f8a8 	bl	a4ac <Error_Handler>
  }
}
    a35c:	46c0      	nop			; (mov r8, r8)
    a35e:	46bd      	mov	sp, r7
    a360:	b011      	add	sp, #68	; 0x44
    a362:	bd90      	pop	{r4, r7, pc}

0000a364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    a364:	b590      	push	{r4, r7, lr}
    a366:	b089      	sub	sp, #36	; 0x24
    a368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    a36a:	240c      	movs	r4, #12
    a36c:	193b      	adds	r3, r7, r4
    a36e:	0018      	movs	r0, r3
    a370:	2314      	movs	r3, #20
    a372:	001a      	movs	r2, r3
    a374:	2100      	movs	r1, #0
    a376:	f000 f965 	bl	a644 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
    a37a:	4b38      	ldr	r3, [pc, #224]	; (a45c <MX_GPIO_Init+0xf8>)
    a37c:	695a      	ldr	r2, [r3, #20]
    a37e:	4b37      	ldr	r3, [pc, #220]	; (a45c <MX_GPIO_Init+0xf8>)
    a380:	2180      	movs	r1, #128	; 0x80
    a382:	0309      	lsls	r1, r1, #12
    a384:	430a      	orrs	r2, r1
    a386:	615a      	str	r2, [r3, #20]
    a388:	4b34      	ldr	r3, [pc, #208]	; (a45c <MX_GPIO_Init+0xf8>)
    a38a:	695a      	ldr	r2, [r3, #20]
    a38c:	2380      	movs	r3, #128	; 0x80
    a38e:	031b      	lsls	r3, r3, #12
    a390:	4013      	ands	r3, r2
    a392:	60bb      	str	r3, [r7, #8]
    a394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
    a396:	4b31      	ldr	r3, [pc, #196]	; (a45c <MX_GPIO_Init+0xf8>)
    a398:	695a      	ldr	r2, [r3, #20]
    a39a:	4b30      	ldr	r3, [pc, #192]	; (a45c <MX_GPIO_Init+0xf8>)
    a39c:	2180      	movs	r1, #128	; 0x80
    a39e:	03c9      	lsls	r1, r1, #15
    a3a0:	430a      	orrs	r2, r1
    a3a2:	615a      	str	r2, [r3, #20]
    a3a4:	4b2d      	ldr	r3, [pc, #180]	; (a45c <MX_GPIO_Init+0xf8>)
    a3a6:	695a      	ldr	r2, [r3, #20]
    a3a8:	2380      	movs	r3, #128	; 0x80
    a3aa:	03db      	lsls	r3, r3, #15
    a3ac:	4013      	ands	r3, r2
    a3ae:	607b      	str	r3, [r7, #4]
    a3b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    a3b2:	4b2a      	ldr	r3, [pc, #168]	; (a45c <MX_GPIO_Init+0xf8>)
    a3b4:	695a      	ldr	r2, [r3, #20]
    a3b6:	4b29      	ldr	r3, [pc, #164]	; (a45c <MX_GPIO_Init+0xf8>)
    a3b8:	2180      	movs	r1, #128	; 0x80
    a3ba:	0289      	lsls	r1, r1, #10
    a3bc:	430a      	orrs	r2, r1
    a3be:	615a      	str	r2, [r3, #20]
    a3c0:	4b26      	ldr	r3, [pc, #152]	; (a45c <MX_GPIO_Init+0xf8>)
    a3c2:	695a      	ldr	r2, [r3, #20]
    a3c4:	2380      	movs	r3, #128	; 0x80
    a3c6:	029b      	lsls	r3, r3, #10
    a3c8:	4013      	ands	r3, r2
    a3ca:	603b      	str	r3, [r7, #0]
    a3cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
    a3ce:	2390      	movs	r3, #144	; 0x90
    a3d0:	05db      	lsls	r3, r3, #23
    a3d2:	2200      	movs	r2, #0
    a3d4:	2120      	movs	r1, #32
    a3d6:	0018      	movs	r0, r3
    a3d8:	f7fe f8cc 	bl	8574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
    a3dc:	193b      	adds	r3, r7, r4
    a3de:	2280      	movs	r2, #128	; 0x80
    a3e0:	0192      	lsls	r2, r2, #6
    a3e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    a3e4:	193b      	adds	r3, r7, r4
    a3e6:	2284      	movs	r2, #132	; 0x84
    a3e8:	0392      	lsls	r2, r2, #14
    a3ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    a3ec:	193b      	adds	r3, r7, r4
    a3ee:	2200      	movs	r2, #0
    a3f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
    a3f2:	193b      	adds	r3, r7, r4
    a3f4:	4a1a      	ldr	r2, [pc, #104]	; (a460 <MX_GPIO_Init+0xfc>)
    a3f6:	0019      	movs	r1, r3
    a3f8:	0010      	movs	r0, r2
    a3fa:	f7fd ff4b 	bl	8294 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    a3fe:	193b      	adds	r3, r7, r4
    a400:	220c      	movs	r2, #12
    a402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    a404:	193b      	adds	r3, r7, r4
    a406:	2202      	movs	r2, #2
    a408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    a40a:	193b      	adds	r3, r7, r4
    a40c:	2200      	movs	r2, #0
    a40e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a410:	193b      	adds	r3, r7, r4
    a412:	2200      	movs	r2, #0
    a414:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    a416:	193b      	adds	r3, r7, r4
    a418:	2201      	movs	r2, #1
    a41a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    a41c:	193a      	adds	r2, r7, r4
    a41e:	2390      	movs	r3, #144	; 0x90
    a420:	05db      	lsls	r3, r3, #23
    a422:	0011      	movs	r1, r2
    a424:	0018      	movs	r0, r3
    a426:	f7fd ff35 	bl	8294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
    a42a:	0021      	movs	r1, r4
    a42c:	187b      	adds	r3, r7, r1
    a42e:	2220      	movs	r2, #32
    a430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    a432:	187b      	adds	r3, r7, r1
    a434:	2201      	movs	r2, #1
    a436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    a438:	187b      	adds	r3, r7, r1
    a43a:	2200      	movs	r2, #0
    a43c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    a43e:	187b      	adds	r3, r7, r1
    a440:	2200      	movs	r2, #0
    a442:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
    a444:	187a      	adds	r2, r7, r1
    a446:	2390      	movs	r3, #144	; 0x90
    a448:	05db      	lsls	r3, r3, #23
    a44a:	0011      	movs	r1, r2
    a44c:	0018      	movs	r0, r3
    a44e:	f7fd ff21 	bl	8294 <HAL_GPIO_Init>

}
    a452:	46c0      	nop			; (mov r8, r8)
    a454:	46bd      	mov	sp, r7
    a456:	b009      	add	sp, #36	; 0x24
    a458:	bd90      	pop	{r4, r7, pc}
    a45a:	46c0      	nop			; (mov r8, r8)
    a45c:	40021000 	.word	0x40021000
    a460:	48000800 	.word	0x48000800

0000a464 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
    a464:	b580      	push	{r7, lr}
    a466:	b082      	sub	sp, #8
    a468:	af00      	add	r7, sp, #0
    a46a:	6078      	str	r0, [r7, #4]

while(1){
						GPIOB_ODR |= 0x8;
    a46c:	4b03      	ldr	r3, [pc, #12]	; (a47c <task1_handler+0x18>)
    a46e:	681a      	ldr	r2, [r3, #0]
    a470:	4b02      	ldr	r3, [pc, #8]	; (a47c <task1_handler+0x18>)
    a472:	2108      	movs	r1, #8
    a474:	430a      	orrs	r2, r1
    a476:	601a      	str	r2, [r3, #0]
    a478:	e7f8      	b.n	a46c <task1_handler+0x8>
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	48000414 	.word	0x48000414

0000a480 <task2_handler>:
}

}

static void task2_handler(void* parameters)
{
    a480:	b580      	push	{r7, lr}
    a482:	b082      	sub	sp, #8
    a484:	af00      	add	r7, sp, #0
    a486:	6078      	str	r0, [r7, #4]
	while(1){
							//GPIOB_ODR |= 0x8;
							//GPIOB_ODR |= 0x20;
							//GPIOB_ODR |= 0x10;
							GPIOB_ODR |= 0x40;
    a488:	4b03      	ldr	r3, [pc, #12]	; (a498 <task2_handler+0x18>)
    a48a:	681a      	ldr	r2, [r3, #0]
    a48c:	4b02      	ldr	r3, [pc, #8]	; (a498 <task2_handler+0x18>)
    a48e:	2140      	movs	r1, #64	; 0x40
    a490:	430a      	orrs	r2, r1
    a492:	601a      	str	r2, [r3, #0]
    a494:	e7f8      	b.n	a488 <task2_handler+0x8>
    a496:	46c0      	nop			; (mov r8, r8)
    a498:	48000414 	.word	0x48000414

0000a49c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b082      	sub	sp, #8
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
    a4a4:	2001      	movs	r0, #1
    a4a6:	f7fe fea3 	bl	91f0 <osDelay>
    a4aa:	e7fb      	b.n	a4a4 <StartDefaultTask+0x8>

0000a4ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    a4ac:	b580      	push	{r7, lr}
    a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    a4b0:	46c0      	nop			; (mov r8, r8)
    a4b2:	46bd      	mov	sp, r7
    a4b4:	bd80      	pop	{r7, pc}
	...

0000a4b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b082      	sub	sp, #8
    a4bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
    a4be:	4b0f      	ldr	r3, [pc, #60]	; (a4fc <HAL_MspInit+0x44>)
    a4c0:	699a      	ldr	r2, [r3, #24]
    a4c2:	4b0e      	ldr	r3, [pc, #56]	; (a4fc <HAL_MspInit+0x44>)
    a4c4:	2101      	movs	r1, #1
    a4c6:	430a      	orrs	r2, r1
    a4c8:	619a      	str	r2, [r3, #24]
    a4ca:	4b0c      	ldr	r3, [pc, #48]	; (a4fc <HAL_MspInit+0x44>)
    a4cc:	699b      	ldr	r3, [r3, #24]
    a4ce:	2201      	movs	r2, #1
    a4d0:	4013      	ands	r3, r2
    a4d2:	607b      	str	r3, [r7, #4]
    a4d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
    a4d6:	4b09      	ldr	r3, [pc, #36]	; (a4fc <HAL_MspInit+0x44>)
    a4d8:	69da      	ldr	r2, [r3, #28]
    a4da:	4b08      	ldr	r3, [pc, #32]	; (a4fc <HAL_MspInit+0x44>)
    a4dc:	2180      	movs	r1, #128	; 0x80
    a4de:	0549      	lsls	r1, r1, #21
    a4e0:	430a      	orrs	r2, r1
    a4e2:	61da      	str	r2, [r3, #28]
    a4e4:	4b05      	ldr	r3, [pc, #20]	; (a4fc <HAL_MspInit+0x44>)
    a4e6:	69da      	ldr	r2, [r3, #28]
    a4e8:	2380      	movs	r3, #128	; 0x80
    a4ea:	055b      	lsls	r3, r3, #21
    a4ec:	4013      	ands	r3, r2
    a4ee:	603b      	str	r3, [r7, #0]
    a4f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    a4f2:	46c0      	nop			; (mov r8, r8)
    a4f4:	46bd      	mov	sp, r7
    a4f6:	b002      	add	sp, #8
    a4f8:	bd80      	pop	{r7, pc}
    a4fa:	46c0      	nop			; (mov r8, r8)
    a4fc:	40021000 	.word	0x40021000

0000a500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    a500:	b580      	push	{r7, lr}
    a502:	b08a      	sub	sp, #40	; 0x28
    a504:	af00      	add	r7, sp, #0
    a506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
    a508:	2300      	movs	r3, #0
    a50a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
    a50c:	2300      	movs	r3, #0
    a50e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	2200      	movs	r2, #0
    a514:	0019      	movs	r1, r3
    a516:	2011      	movs	r0, #17
    a518:	f7fd fe96 	bl	8248 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
    a51c:	2011      	movs	r0, #17
    a51e:	f7fd fea8 	bl	8272 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
    a522:	4b20      	ldr	r3, [pc, #128]	; (a5a4 <HAL_InitTick+0xa4>)
    a524:	69da      	ldr	r2, [r3, #28]
    a526:	4b1f      	ldr	r3, [pc, #124]	; (a5a4 <HAL_InitTick+0xa4>)
    a528:	2110      	movs	r1, #16
    a52a:	430a      	orrs	r2, r1
    a52c:	61da      	str	r2, [r3, #28]
    a52e:	4b1d      	ldr	r3, [pc, #116]	; (a5a4 <HAL_InitTick+0xa4>)
    a530:	69db      	ldr	r3, [r3, #28]
    a532:	2210      	movs	r2, #16
    a534:	4013      	ands	r3, r2
    a536:	60bb      	str	r3, [r7, #8]
    a538:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
    a53a:	230c      	movs	r3, #12
    a53c:	18fa      	adds	r2, r7, r3
    a53e:	2310      	movs	r3, #16
    a540:	18fb      	adds	r3, r7, r3
    a542:	0011      	movs	r1, r2
    a544:	0018      	movs	r0, r3
    a546:	f7fe fca1 	bl	8e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
    a54a:	f7fe fc89 	bl	8e60 <HAL_RCC_GetPCLK1Freq>
    a54e:	0003      	movs	r3, r0
    a550:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a554:	4914      	ldr	r1, [pc, #80]	; (a5a8 <HAL_InitTick+0xa8>)
    a556:	0018      	movs	r0, r3
    a558:	f000 f87c 	bl	a654 <__udivsi3>
    a55c:	0003      	movs	r3, r0
    a55e:	3b01      	subs	r3, #1
    a560:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
    a562:	4b12      	ldr	r3, [pc, #72]	; (a5ac <HAL_InitTick+0xac>)
    a564:	4a12      	ldr	r2, [pc, #72]	; (a5b0 <HAL_InitTick+0xb0>)
    a566:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
    a568:	4b10      	ldr	r3, [pc, #64]	; (a5ac <HAL_InitTick+0xac>)
    a56a:	4a12      	ldr	r2, [pc, #72]	; (a5b4 <HAL_InitTick+0xb4>)
    a56c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
    a56e:	4b0f      	ldr	r3, [pc, #60]	; (a5ac <HAL_InitTick+0xac>)
    a570:	6a3a      	ldr	r2, [r7, #32]
    a572:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
    a574:	4b0d      	ldr	r3, [pc, #52]	; (a5ac <HAL_InitTick+0xac>)
    a576:	2200      	movs	r2, #0
    a578:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
    a57a:	4b0c      	ldr	r3, [pc, #48]	; (a5ac <HAL_InitTick+0xac>)
    a57c:	2200      	movs	r2, #0
    a57e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
    a580:	4b0a      	ldr	r3, [pc, #40]	; (a5ac <HAL_InitTick+0xac>)
    a582:	0018      	movs	r0, r3
    a584:	f7fe fcac 	bl	8ee0 <HAL_TIM_Base_Init>
    a588:	1e03      	subs	r3, r0, #0
    a58a:	d105      	bne.n	a598 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
    a58c:	4b07      	ldr	r3, [pc, #28]	; (a5ac <HAL_InitTick+0xac>)
    a58e:	0018      	movs	r0, r3
    a590:	f7fe fcfe 	bl	8f90 <HAL_TIM_Base_Start_IT>
    a594:	0003      	movs	r3, r0
    a596:	e000      	b.n	a59a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
    a598:	2301      	movs	r3, #1
}
    a59a:	0018      	movs	r0, r3
    a59c:	46bd      	mov	sp, r7
    a59e:	b00a      	add	sp, #40	; 0x28
    a5a0:	bd80      	pop	{r7, pc}
    a5a2:	46c0      	nop			; (mov r8, r8)
    a5a4:	40021000 	.word	0x40021000
    a5a8:	000f4240 	.word	0x000f4240
    a5ac:	0001b860 	.word	0x0001b860
    a5b0:	40001000 	.word	0x40001000
    a5b4:	000003e7 	.word	0x000003e7

0000a5b8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
    a5b8:	b580      	push	{r7, lr}
    a5ba:	b082      	sub	sp, #8
    a5bc:	af00      	add	r7, sp, #0
    a5be:	6078      	str	r0, [r7, #4]
    a5c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
    a5c2:	f000 f815 	bl	a5f0 <__errno>
    a5c6:	0003      	movs	r3, r0
    a5c8:	2216      	movs	r2, #22
    a5ca:	601a      	str	r2, [r3, #0]
	return -1;
    a5cc:	2301      	movs	r3, #1
    a5ce:	425b      	negs	r3, r3
}
    a5d0:	0018      	movs	r0, r3
    a5d2:	46bd      	mov	sp, r7
    a5d4:	b002      	add	sp, #8
    a5d6:	bd80      	pop	{r7, pc}

0000a5d8 <_exit>:

void _exit (int status)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
    a5e0:	2301      	movs	r3, #1
    a5e2:	425a      	negs	r2, r3
    a5e4:	687b      	ldr	r3, [r7, #4]
    a5e6:	0011      	movs	r1, r2
    a5e8:	0018      	movs	r0, r3
    a5ea:	f7ff ffe5 	bl	a5b8 <_kill>
	while (1) {}		/* Make sure we hang here */
    a5ee:	e7fe      	b.n	a5ee <_exit+0x16>

0000a5f0 <__errno>:
    a5f0:	4b01      	ldr	r3, [pc, #4]	; (a5f8 <__errno+0x8>)
    a5f2:	6818      	ldr	r0, [r3, #0]
    a5f4:	4770      	bx	lr
    a5f6:	46c0      	nop			; (mov r8, r8)
    a5f8:	0001a840 	.word	0x0001a840

0000a5fc <__libc_init_array>:
    a5fc:	b570      	push	{r4, r5, r6, lr}
    a5fe:	2600      	movs	r6, #0
    a600:	4d0c      	ldr	r5, [pc, #48]	; (a634 <__libc_init_array+0x38>)
    a602:	4c0d      	ldr	r4, [pc, #52]	; (a638 <__libc_init_array+0x3c>)
    a604:	1b64      	subs	r4, r4, r5
    a606:	10a4      	asrs	r4, r4, #2
    a608:	42a6      	cmp	r6, r4
    a60a:	d109      	bne.n	a620 <__libc_init_array+0x24>
    a60c:	2600      	movs	r6, #0
    a60e:	f7fd fcf7 	bl	8000 <_init>
    a612:	4d0a      	ldr	r5, [pc, #40]	; (a63c <__libc_init_array+0x40>)
    a614:	4c0a      	ldr	r4, [pc, #40]	; (a640 <__libc_init_array+0x44>)
    a616:	1b64      	subs	r4, r4, r5
    a618:	10a4      	asrs	r4, r4, #2
    a61a:	42a6      	cmp	r6, r4
    a61c:	d105      	bne.n	a62a <__libc_init_array+0x2e>
    a61e:	bd70      	pop	{r4, r5, r6, pc}
    a620:	00b3      	lsls	r3, r6, #2
    a622:	58eb      	ldr	r3, [r5, r3]
    a624:	4798      	blx	r3
    a626:	3601      	adds	r6, #1
    a628:	e7ee      	b.n	a608 <__libc_init_array+0xc>
    a62a:	00b3      	lsls	r3, r6, #2
    a62c:	58eb      	ldr	r3, [r5, r3]
    a62e:	4798      	blx	r3
    a630:	3601      	adds	r6, #1
    a632:	e7f2      	b.n	a61a <__libc_init_array+0x1e>
    a634:	0001a830 	.word	0x0001a830
    a638:	0001a830 	.word	0x0001a830
    a63c:	0001a830 	.word	0x0001a830
    a640:	0001a834 	.word	0x0001a834

0000a644 <memset>:
    a644:	0003      	movs	r3, r0
    a646:	1812      	adds	r2, r2, r0
    a648:	4293      	cmp	r3, r2
    a64a:	d100      	bne.n	a64e <memset+0xa>
    a64c:	4770      	bx	lr
    a64e:	7019      	strb	r1, [r3, #0]
    a650:	3301      	adds	r3, #1
    a652:	e7f9      	b.n	a648 <memset+0x4>

0000a654 <__udivsi3>:
    a654:	2200      	movs	r2, #0
    a656:	0843      	lsrs	r3, r0, #1
    a658:	428b      	cmp	r3, r1
    a65a:	d374      	bcc.n	a746 <__udivsi3+0xf2>
    a65c:	0903      	lsrs	r3, r0, #4
    a65e:	428b      	cmp	r3, r1
    a660:	d35f      	bcc.n	a722 <__udivsi3+0xce>
    a662:	0a03      	lsrs	r3, r0, #8
    a664:	428b      	cmp	r3, r1
    a666:	d344      	bcc.n	a6f2 <__udivsi3+0x9e>
    a668:	0b03      	lsrs	r3, r0, #12
    a66a:	428b      	cmp	r3, r1
    a66c:	d328      	bcc.n	a6c0 <__udivsi3+0x6c>
    a66e:	0c03      	lsrs	r3, r0, #16
    a670:	428b      	cmp	r3, r1
    a672:	d30d      	bcc.n	a690 <__udivsi3+0x3c>
    a674:	22ff      	movs	r2, #255	; 0xff
    a676:	0209      	lsls	r1, r1, #8
    a678:	ba12      	rev	r2, r2
    a67a:	0c03      	lsrs	r3, r0, #16
    a67c:	428b      	cmp	r3, r1
    a67e:	d302      	bcc.n	a686 <__udivsi3+0x32>
    a680:	1212      	asrs	r2, r2, #8
    a682:	0209      	lsls	r1, r1, #8
    a684:	d065      	beq.n	a752 <__udivsi3+0xfe>
    a686:	0b03      	lsrs	r3, r0, #12
    a688:	428b      	cmp	r3, r1
    a68a:	d319      	bcc.n	a6c0 <__udivsi3+0x6c>
    a68c:	e000      	b.n	a690 <__udivsi3+0x3c>
    a68e:	0a09      	lsrs	r1, r1, #8
    a690:	0bc3      	lsrs	r3, r0, #15
    a692:	428b      	cmp	r3, r1
    a694:	d301      	bcc.n	a69a <__udivsi3+0x46>
    a696:	03cb      	lsls	r3, r1, #15
    a698:	1ac0      	subs	r0, r0, r3
    a69a:	4152      	adcs	r2, r2
    a69c:	0b83      	lsrs	r3, r0, #14
    a69e:	428b      	cmp	r3, r1
    a6a0:	d301      	bcc.n	a6a6 <__udivsi3+0x52>
    a6a2:	038b      	lsls	r3, r1, #14
    a6a4:	1ac0      	subs	r0, r0, r3
    a6a6:	4152      	adcs	r2, r2
    a6a8:	0b43      	lsrs	r3, r0, #13
    a6aa:	428b      	cmp	r3, r1
    a6ac:	d301      	bcc.n	a6b2 <__udivsi3+0x5e>
    a6ae:	034b      	lsls	r3, r1, #13
    a6b0:	1ac0      	subs	r0, r0, r3
    a6b2:	4152      	adcs	r2, r2
    a6b4:	0b03      	lsrs	r3, r0, #12
    a6b6:	428b      	cmp	r3, r1
    a6b8:	d301      	bcc.n	a6be <__udivsi3+0x6a>
    a6ba:	030b      	lsls	r3, r1, #12
    a6bc:	1ac0      	subs	r0, r0, r3
    a6be:	4152      	adcs	r2, r2
    a6c0:	0ac3      	lsrs	r3, r0, #11
    a6c2:	428b      	cmp	r3, r1
    a6c4:	d301      	bcc.n	a6ca <__udivsi3+0x76>
    a6c6:	02cb      	lsls	r3, r1, #11
    a6c8:	1ac0      	subs	r0, r0, r3
    a6ca:	4152      	adcs	r2, r2
    a6cc:	0a83      	lsrs	r3, r0, #10
    a6ce:	428b      	cmp	r3, r1
    a6d0:	d301      	bcc.n	a6d6 <__udivsi3+0x82>
    a6d2:	028b      	lsls	r3, r1, #10
    a6d4:	1ac0      	subs	r0, r0, r3
    a6d6:	4152      	adcs	r2, r2
    a6d8:	0a43      	lsrs	r3, r0, #9
    a6da:	428b      	cmp	r3, r1
    a6dc:	d301      	bcc.n	a6e2 <__udivsi3+0x8e>
    a6de:	024b      	lsls	r3, r1, #9
    a6e0:	1ac0      	subs	r0, r0, r3
    a6e2:	4152      	adcs	r2, r2
    a6e4:	0a03      	lsrs	r3, r0, #8
    a6e6:	428b      	cmp	r3, r1
    a6e8:	d301      	bcc.n	a6ee <__udivsi3+0x9a>
    a6ea:	020b      	lsls	r3, r1, #8
    a6ec:	1ac0      	subs	r0, r0, r3
    a6ee:	4152      	adcs	r2, r2
    a6f0:	d2cd      	bcs.n	a68e <__udivsi3+0x3a>
    a6f2:	09c3      	lsrs	r3, r0, #7
    a6f4:	428b      	cmp	r3, r1
    a6f6:	d301      	bcc.n	a6fc <__udivsi3+0xa8>
    a6f8:	01cb      	lsls	r3, r1, #7
    a6fa:	1ac0      	subs	r0, r0, r3
    a6fc:	4152      	adcs	r2, r2
    a6fe:	0983      	lsrs	r3, r0, #6
    a700:	428b      	cmp	r3, r1
    a702:	d301      	bcc.n	a708 <__udivsi3+0xb4>
    a704:	018b      	lsls	r3, r1, #6
    a706:	1ac0      	subs	r0, r0, r3
    a708:	4152      	adcs	r2, r2
    a70a:	0943      	lsrs	r3, r0, #5
    a70c:	428b      	cmp	r3, r1
    a70e:	d301      	bcc.n	a714 <__udivsi3+0xc0>
    a710:	014b      	lsls	r3, r1, #5
    a712:	1ac0      	subs	r0, r0, r3
    a714:	4152      	adcs	r2, r2
    a716:	0903      	lsrs	r3, r0, #4
    a718:	428b      	cmp	r3, r1
    a71a:	d301      	bcc.n	a720 <__udivsi3+0xcc>
    a71c:	010b      	lsls	r3, r1, #4
    a71e:	1ac0      	subs	r0, r0, r3
    a720:	4152      	adcs	r2, r2
    a722:	08c3      	lsrs	r3, r0, #3
    a724:	428b      	cmp	r3, r1
    a726:	d301      	bcc.n	a72c <__udivsi3+0xd8>
    a728:	00cb      	lsls	r3, r1, #3
    a72a:	1ac0      	subs	r0, r0, r3
    a72c:	4152      	adcs	r2, r2
    a72e:	0883      	lsrs	r3, r0, #2
    a730:	428b      	cmp	r3, r1
    a732:	d301      	bcc.n	a738 <__udivsi3+0xe4>
    a734:	008b      	lsls	r3, r1, #2
    a736:	1ac0      	subs	r0, r0, r3
    a738:	4152      	adcs	r2, r2
    a73a:	0843      	lsrs	r3, r0, #1
    a73c:	428b      	cmp	r3, r1
    a73e:	d301      	bcc.n	a744 <__udivsi3+0xf0>
    a740:	004b      	lsls	r3, r1, #1
    a742:	1ac0      	subs	r0, r0, r3
    a744:	4152      	adcs	r2, r2
    a746:	1a41      	subs	r1, r0, r1
    a748:	d200      	bcs.n	a74c <__udivsi3+0xf8>
    a74a:	4601      	mov	r1, r0
    a74c:	4152      	adcs	r2, r2
    a74e:	4610      	mov	r0, r2
    a750:	4770      	bx	lr
    a752:	e7ff      	b.n	a754 <__udivsi3+0x100>
    a754:	b501      	push	{r0, lr}
    a756:	2000      	movs	r0, #0
    a758:	f000 f806 	bl	a768 <__aeabi_idiv0>
    a75c:	bd02      	pop	{r1, pc}
    a75e:	46c0      	nop			; (mov r8, r8)

0000a760 <__aeabi_uidivmod>:
    a760:	2900      	cmp	r1, #0
    a762:	d0f7      	beq.n	a754 <__udivsi3+0x100>
    a764:	e776      	b.n	a654 <__udivsi3>
    a766:	4770      	bx	lr

0000a768 <__aeabi_idiv0>:
    a768:	4770      	bx	lr
    a76a:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

0000a76c <_fini>:
    a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a76e:	46c0      	nop			; (mov r8, r8)
    a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a772:	bc08      	pop	{r3}
    a774:	469e      	mov	lr, r3
    a776:	4770      	bx	lr
